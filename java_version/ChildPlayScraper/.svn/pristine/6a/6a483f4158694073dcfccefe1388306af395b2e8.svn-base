package bots;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ScrollPaneConstants;

import master.Master;
import util.*;

public class CraigList extends Master {
	
	private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	private SimpleDateFormat sdfForFile = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
	private Pattern imagePattern;
	private Pattern propWrapPattern;
	private Pattern propPattern;
	private Pattern phonePattern;
	private Pattern contactLinkPattern;
	private Pattern descriptionPattern;
	private Pattern phonePattern2;
	private Pattern contactInfoPattern;

	public CraigList(String startingUrl) {	
		
		baseURL = startingUrl.substring(0, startingUrl.indexOf(".org")+4);
		
		firstPageNumber = 0;
		pageIncrement = 100;
		incrementPartOneURL = startingUrl + "?s=";
		incrementPartTwoURL = "&";
		
		recordCount = 1;
		
		detailsPagePattern = Pattern.compile("<p class=\"row\".+?href=\"(.+?)\"");
		
		pProc = new PatternProcessor();
		writter = new Writter("craiglist_" + sdf.format(new Date()) + ".csv");
		
		// Patterns
		pProc.addPattern(1, Pattern.compile("<title>(.+?)</title>")); // title
		pProc.addPattern(2, Pattern.compile("- (&#x0024;.+?)\\s")); // price
		pProc.addPattern(3, Pattern.compile("odometer: <b>(.+?)<")); // mileage
		// 4 will be page url
		pProc.addPattern(5, Pattern.compile("posted: <time datetime=\"(.+?)-\\d{4}")); // date posted
		pProc.addPattern(5, Pattern.compile("Posted: <time datetime=\"(.+?)-\\d{4}")); // date posted
		
		contactLinkPattern = Pattern.compile("<a id=\"replylink\" href=\"(.+?\\d+)\"");
		contactInfoPattern = Pattern.compile("<a href=\"(/fb/inl/cto/\\d+)\" class=\"showcontact\"");
		phonePattern = Pattern.compile("([\\d-\\s]{9,15})");
		phonePattern2 = Pattern.compile("<li>&#9742;\\s+([\\d-\\s]{9,15})");		
		
		imagePattern = Pattern.compile("\"shortid\":\".+?url\":\"(.+?)\"");
		
		descriptionPattern = Pattern.compile("<section id=\"postingbody\">\\s+(.+?)</section>", Pattern.DOTALL); // description
		
		propWrapPattern = Pattern.compile("<p class=\"attrgroup\">(.+?)</div>", Pattern.DOTALL);
		propPattern = Pattern.compile("<span>(.+?)</span>");
		
		pProc.addData(11, "");
		pProc.addPattern(12, Pattern.compile("<span>VIN:\\s*(.+?)</span>")); // vin number
		
		pProc.addReplacement(2, "\\&#x0024\\;", "\\$");
		pProc.addReplacement(5, "T", " ");
		pProc.addReplacement(8, "<.+?>", "");
		pProc.addReplacement(10, "<.+?>", "");
		
	}		
	
	private static JTextArea textArea;

	public static void main(String[] args) {	
		
		//1. Create the frame.
		JFrame frame = new JFrame("CraigList Scraper");

		//2. Optional: What happens when the frame closes?
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(500, 550);
		frame.setResizable(false);
		frame.setLocationRelativeTo(null);
		frame.getContentPane().setLayout(null);
		//3. Create components and put them in the frame.
		//...create emptyLabel...
		JLabel label = new JLabel("Enter url to scrape");
		label.setSize(350, 20);
		label.setLocation(20, 10);
		
		final JTextField textF = new JTextField();
		textF.setSize(350, 25);
		textF.setLocation(20, 40);
		
		final JButton startScrape = new JButton("Start");
		startScrape.setSize(100, 25);
		startScrape.setLocation(380, 40);
		
		startScrape.addActionListener(new ActionListener() {			
			@Override
			public void actionPerformed(ActionEvent e) {
				String startingUrl = textF.getText();
				if (startingUrl.trim().equals("")) {
					JOptionPane.showMessageDialog(null, "Enter some link first");
				}
				
				startScrape.setEnabled(false);
				new CraigList(startingUrl).start();				
			}
		});
		
		JLabel label2 = new JLabel("Output");
		label2.setSize(350, 20);
		label2.setLocation(20, 80);
		
		textArea = new JTextArea();
		textArea.setSize(460, 400);
		textArea.setLocation(20, 110);
		
		JScrollPane scroll = new JScrollPane(textArea);
		scroll.setSize(460, 400);
		scroll.setLocation(20, 110);
		
        scroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        
        frame.getContentPane().add(label);
		frame.getContentPane().add(textF);
		frame.getContentPane().add(startScrape);
		frame.getContentPane().add(label2);	
		frame.getContentPane().add(scroll);
		
		//5. Show it.
		frame.setVisible(true);		
		
	}

	@Override
	public void run() {
		typeOneProcessing();
	}
	
	protected void typeOneProcessing() {
		paginationURL = null;
		detailsPageURL = null;
		String pageHtml = null;
		String detailsPageHtml = null;
		String carURLHash = null;

		int errorDelay = initialErrorDelay;

		Matcher paginationMatcher;
		Matcher urlMatcher;
		HashSet<String> carURLs;

		mainLoop: for (int i = firstPageNumber; i <= lastPageNumber; i += pageIncrement) {
			paginationURL = incrementPartOneURL + formParam + formValue + pageNumberParam + i + incrementPartTwoURL;
			pageHtml = getHtml(paginationURL);
			
		//	System.out.println(pageHtml);

			if (pageHtml != null) {
				System.out.println("-Pagination page: " + paginationURL);
				textArea.append("-Pagination page: " + paginationURL + "\n");
				errorCount = 0;
				errorDelay = initialErrorDelay;
				urlMatcher = detailsPagePattern.matcher(pageHtml);
				carURLs = new HashSet<String>();
				while (urlMatcher.find()) {
					detailsPageURL = urlMatcher.group(1);
					if (!detailsPageURL.startsWith("http:")) {
						detailsPageURL = baseURL + detailsPageURL;
					}

					detailsPageURL = fixURL(detailsPageURL);
					System.out.println("\t"+ detailsPageURL);
					textArea.append("\t"+ recordCount + ". " + detailsPageURL + "\n");
					carURLHash = Sha1Hash.SHA1(detailsPageURL);

					if (carURLs.contains(carURLHash)) {
						continue;
					} else {
						carURLs.add(carURLHash);
					}					

					pProc.addData(4, detailsPageURL);
					detailsPageHtml = getHtml(detailsPageURL);

					if (detailsPageHtml != null) {
						write(detailsPageHtml);
						recordCount++;
						newRecordsCount++;
					}
					
					sleep(requestDelay);
				}
				paginationMatcher = paginationPattern.matcher(pageHtml);
				if (!paginationMatcher.find()) {
					if (paginationCheckTime != 0) {
					//	System.out.println("Last pagination check for " + webSiteID + " in progress ...");
						sleep(paginationCheckTime);

						pageHtml = getHtml(paginationURL);
						if (pageHtml == null) {
							break;
						}

						paginationMatcher = paginationPattern.matcher(pageHtml);
						if (!paginationMatcher.find()) {
							break;
						} else {
							i -= pageIncrement;
						}
					} else {
						break;
					}
				}
			} else {
				errorCount++;
				if (errorCount == 5) {
					break;
				}
				i -= pageIncrement;
				
				sleep(errorDelay);
				errorDelay *= 5;				
			}
			if (stopped) {
				break;
			}
		}
	}
	
	@Override
	public void write (String data) {
		
		String description = findInString(data, descriptionPattern);
		description = description.replaceAll("<.+?>", "");
		pProc.addData(8, description);
		
		String phone = findInString(description, phonePattern);
		phone = phone.replaceAll("[^0-9]+", "");
		if (phone.length() > 10 || phone.length() < 9) phone = "";
		
		if (phone.equals("")) {
			String contactLink = findInString(data, contactLinkPattern);
			if (!contactLink.equals("")) {
				String contactData = getHtml(baseURL + contactLink);
				phone = findInString(contactData, phonePattern2);
			}
		}
		
		if (phone.equals("")) {
			String contactLink = findInString(data, contactInfoPattern);
			if (!contactLink.equals("")) {
				String contactData = getHtml(baseURL + contactLink);
				phone = findInString(contactData, phonePattern);
			}
		}
		
		phone = phone.replaceAll("[^0-9]+", "");
		if (phone.length() > 10 || phone.length() < 9) phone = "";		
		pProc.addData(6, formatPhone(phone));
		
		String imageField = Utils.joinStringFromArray(findAllInString(data, imagePattern), ",");
		
		pProc.addData(7, imageField);
		pProc.addData(9, sdfForFile.format(new Date()));
		
		String propData = findInString(data, propWrapPattern);
		String propField = Utils.joinStringFromArray(findAllInString(propData, propPattern), " ");
		
		pProc.addData(10, propField);
		
		
		
		pProc.processPatterns(data, writter);
	}
	
	private String formatPhone(String phone) {
		if (phone.length() > 10 || phone.length() < 9) return "";
		
		String firstThree = phone.substring(0, 3);
		String secondThree = phone.substring(3, 6);
		String thirdThree = phone.substring(6);
		
		return "(" + firstThree + ") " + secondThree + "-" + thirdThree;
	}
	
}


