package bots;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import util.PatternProcessor;
import util.Writter;

public class RuskiSajt {
	
	private String url;
	private String html;
	private Writter writter;
	private PatternProcessor pProc;
	private Pattern locationPattern;
	private String location;
	
	private Pattern phoneWrapP = Pattern.compile("<td>Сотрудник</td>.+?>.+?<br />(.+?)<", Pattern.DOTALL);

	public RuskiSajt() {
		
		writter = new Writter("output1.csv");
		writter.writeLine("Name,Birth date,Location,ICQ,Employers,Specialty,Phone1,Phone2,Phone3,Phone4,Phone5");
		
		pProc = new PatternProcessor();
		
		locationPattern = Pattern.compile("<td>Населенный пункт</td>.+?>(.+?)<", Pattern.DOTALL); //3
		
		pProc.addPattern(1, Pattern.compile("<h1 class=\"display-no\">\\s*(.+?)\\s*</h1>", Pattern.DOTALL));
		pProc.addPattern(2, Pattern.compile("<td>Дата рождения</td>.+?>(.+?)<", Pattern.DOTALL));
		//pProc.addPattern(3, Pattern.compile("<td>Населенный пункт</td>.+?>(.+?)<", Pattern.DOTALL)); //location
		pProc.addPattern(4, Pattern.compile("<td>ICQ</td>.+?>(.+?)<", Pattern.DOTALL));
		pProc.addPattern(5, Pattern.compile("<td>Сотрудник</td>.+?>(.+?)<", Pattern.DOTALL));
		pProc.addPattern(6, Pattern.compile("<td>Специализация</td>.+?>(.+?)<", Pattern.DOTALL));
		
		
	}
	
	public void run() {
		
		for(int i = 31 ; i <= 110000; i++) {
			
			url = "http://msk.36n6.ru/id" + i;
			System.out.println(url);
			html = fetchPage(url);
			
			if(html == null) {
				continue;
			}
			
			write(html);
					
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
			
	}
	
	public void write(String data) {
		
		location = findInString(data, locationPattern);
		location = location.replaceAll("\\s{2,}", "");
		
		if(!location.equals("")) {
			pProc.addData(3, location);
		}
		else {
			pProc.addData(3, "");
		}
		
		pProc.addData(7, "");
		pProc.addData(8, "");
		pProc.addData(9, "");
		pProc.addData(10, "");
		pProc.addData(11, "");
		
		String phoneWrap = findInString(data, phoneWrapP);	
		
		int pos = 7;
		if (phoneWrap.length() > 5) {
			String phones [] = phoneWrap.split(",");
			
			for (String phone : phones) {
				pProc.addData(pos++, phone.trim());
			}
		}
		
					
		pProc.processPatterns(data, writter);
		
	}
	
	private String fetchPage(String url) {		
		try {
			URL pageUrl = new URL(url);
			
			BufferedReader in = new BufferedReader(new InputStreamReader(pageUrl.openStream()));
			String line;
			StringBuilder pageHtml = new StringBuilder();
			
			while ((line = in.readLine()) != null) {
				pageHtml.append(line).append("\n");
			}
			
			in.close();			
			return pageHtml.toString();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	public ArrayList<String> findAllInString(String string, Pattern pattern) {
		ArrayList<String> list = new ArrayList<String>();
		
		Matcher m = pattern.matcher(string);
		while (m.find()) {
			String value = m.group(1).trim();
			list.add(value);
		}
		
		return list;
		
		
	}

	public String [] findGroupsInString(String string, Pattern pattern, int groups) {
		String [] parts = new String[groups];
		
		Matcher m = pattern.matcher(string);
		while (m.find()) {
			for (int curGroup = 0; curGroup < groups; curGroup++) {
				parts[curGroup] = m.group(curGroup+1).trim();
			}
			
			return parts;
		}
		return null;
	}
	
	public ArrayList<String []> findAllGroupsInString(String string, Pattern pattern) {
		ArrayList<String []> parts = new ArrayList<String[]>();
		
		Matcher m = pattern.matcher(string);
		while (m.find()) {
			String groups[] = new String[m.groupCount()]; 
			for (int curGroup = 0; curGroup < m.groupCount(); curGroup++) {
				groups[curGroup] = m.group(curGroup+1).trim();
			}
			
			parts.add(groups);
		}
		return parts;
	}
	
	public String findInString(String string, Pattern pattern) {
		Matcher m = pattern.matcher(string);
		while (m.find()) {
			String value = m.group(1).trim();
		//	System.out.println(value);
			return value;
		}
		return "";
	}
	
	public static void main(String[] args) {
		
		new RuskiSajt().run();

	}

}
