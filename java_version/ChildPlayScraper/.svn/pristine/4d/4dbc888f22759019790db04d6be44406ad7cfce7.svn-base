package bots;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import empty.DummyScraper;

import util.PatternProcessor;
import util.Sha1Hash;
import util.Utils;
import util.Writter;

import master.Master;

public class Zomato extends Master{

	private Pattern adresaPattern;
	private String[] adresa;
	private Pattern cuisinePattern;
	private ArrayList<String> cuisine;
	private Pattern adresaProveraPattern;
	private Pattern adresa2Pattern;
	
	Pattern highlightsPattern = Pattern.compile("<div class=\"res-info-highlights \">(.+?)<div class=\"clear\"></div>", Pattern.DOTALL);
	
	public Zomato(Integer firstPage, Integer lastPage) {		
		this();
		firstPageNumber = firstPage;
		lastPageNumber = lastPage;
	}
	
	public static void main(String[] args) {
		if (args.length == 2) {
			new Zomato(Integer.parseInt(args[0]), Integer.parseInt(args[1])).start();
		} else {
			new Zomato().start();
		}
		
	}

	public Zomato() {
		
		writter = new Writter("zomato.csv");
		writter.writeLine("Name of Restaurant,Area/Borough,Address,Cuisines,Phone,Home Delivery,Takeaway");
		
		pProc = new PatternProcessor();
		
		firstPageNumber = 1;
		pageIncrement = 1;
		lastPageNumber = 680;
		
		baseURL = "https://www.zomato.com/london/";
		incrementPartOneURL = "https://www.zomato.com/london/restaurants?q=london+restaurants&page=";
		
		detailsPagePattern = Pattern.compile("result-title\"\\s+href=\".+?/london/(.+?)\"");
				
		paginationPattern = Pattern.compile("");
		
	}
	
	protected void typeOneProcessing() {
		paginationURL = null;
		detailsPageURL = null;
		String pageHtml = null;
		String detailsPageHtml = null;
		String carURLHash = null;
		long carID;
		int errorDelay = initialErrorDelay;

		Matcher paginationMatcher;
		Matcher urlMatcher;
		HashSet<String> carURLs;

		mainLoop: for (int i = firstPageNumber; i <= lastPageNumber; i += pageIncrement) {
			paginationURL = incrementPartOneURL + formParam + formValue + pageNumberParam + i + incrementPartTwoURL;
			pageHtml = getHtml(paginationURL);
			
		//	System.out.println(pageHtml);

			if (pageHtml != null) {
				System.out.println("-Pagination page: " + paginationURL);
				errorCount = 0;
				errorDelay = initialErrorDelay;
				urlMatcher = detailsPagePattern.matcher(pageHtml);
				carURLs = new HashSet<String>();
				while (urlMatcher.find()) {
					detailsPageURL = urlMatcher.group(1);
					if (!detailsPageURL.startsWith("http:")) {
						detailsPageURL = baseURL + detailsPageURL;
					}

					detailsPageURL = fixURL(detailsPageURL);
					System.out.println("\t"+ detailsPageURL);
					carURLHash = Sha1Hash.SHA1(detailsPageURL);

					if (carURLs.contains(carURLHash)) {
						continue;
					} else {
						carURLs.add(carURLHash);
					}
					
					// test for duplicate url
//					if (1 == 1 + 0) {
//					//	DBWorksOnline.updateTime(carID, countryDescription.getCode());
//						recordCount++;
//						updatedRecordsCount++;
//						continue;
//					}

					detailsPageHtml = getHtml(detailsPageURL);
				//	System.out.println(detailsPageHtml);

					if (detailsPageHtml != null) {
						write(detailsPageHtml);
						recordCount++;
						newRecordsCount++;
					}
					
					sleep(requestDelay);
				}
				
			} else {
				errorCount++;
				if (errorCount == 5) {
					break;
				}
				i -= pageIncrement;
				
				sleep(errorDelay);
				errorDelay *= 5;				
			}
			if (stopped) {
				break;
			}
		}
	}
	
	public void write(String data) {
		
		pProc.addPattern(1, Pattern.compile("itemprop=\"name\".+?>(.+?)<")); //ime
		pProc.addReplacement(1, "&amp;", "&");
		pProc.addPattern(2, Pattern.compile("a class=\"nhu\" href=\".+?\"><b>(.+?)</b>")); //area		
		
		adresaPattern = Pattern.compile("PostalAddress\">\\s+(.+?)\\s*<.+?addressLocality\">(.+?)<.+?>(.+?)\\s*<.+?postalCode\">(.+?)<", Pattern.DOTALL);
		adresa2Pattern = Pattern.compile("PostalAddress\">(.+?)<span itemprop=\"postalCode\">(.+?)<", Pattern.DOTALL);
		cuisinePattern = Pattern.compile("<a itemprop=\"servesCuisine\".+?href=\".+?\">(.+?)<", Pattern.DOTALL);
		adresaProveraPattern = Pattern.compile("(addressLocality)");
		
		String addressLocality = findInString(data, adresaProveraPattern);
		//System.out.println(addressLocality);
		
		if(addressLocality.equals("")) {
			adresa = findGroupsInString(data, adresa2Pattern, 2);
			
			String address = adresa[0] + adresa[1];
			pProc.addData(3, address);
		}
		else {
		
			adresa = findGroupsInString(data, adresaPattern, 4);
		
			String address = adresa[0] + adresa[1] + adresa[2] + adresa[3];
			pProc.addData(3, address);
		
		}
		
		cuisine = findAllInString(data, cuisinePattern);
		
		String kuhinja = Utils.joinStringFromArray(cuisine, ",");
		pProc.addData(4, kuhinja);
		
		pProc.addPattern(5, Pattern.compile("class=\"tel\">(.+?)<")); //phone
		
		String highlights = findInString(data, highlightsPattern);
		if (highlights.contains("title=\"Home Delivery\">")) {
			pProc.addData(6, "Yes");
		} else {
			pProc.addData(6, "No");
		}
		if (highlights.contains("title=\"Takeaway Available\">")) {
			pProc.addData(7, "Yes");
		} else {
			pProc.addData(7, "No");
		}
		
		pProc.processPatterns(data, writter);
		
	}
	
	public void run() {
		
		typeOneProcessing();
		
	}
	

}