package bots;

import java.io.BufferedReader;
import java.io.FileReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.jws.soap.SOAPBinding.Use;

import util.Files;
import util.PatternProcessor;
import util.Sha1Hash;
import util.Writter;

import master.Master;

public class MrtviLjudi extends Master{

	private Pattern stateIdPattern;
	private ArrayList<String> listaIdName;
	private Pattern stateNamePattern;
	private ArrayList<String> listaSlova;
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
	SimpleDateFormat sdfForPublish = new SimpleDateFormat("MMMM dd, yyyy");
	ArrayList<ArrayList<Pattern>> sitePatterns = new ArrayList<ArrayList<Pattern>>();
	private RelationsExtractor relationsExtractor;
	
	Pattern entityWrapP = Pattern.compile("_ObituaryDisplay_divObitEntry.+?>(.+?)</div>\\s+</div>\\s+</div>", Pattern.DOTALL);
	
	Pattern publishWrapP = Pattern.compile("class=\"obitPublished\">(.+)");
	Pattern datePP = Pattern.compile("Published online on (.+?\\d{4})");	
	Pattern datePP2 = Pattern.compile("(?:from|on) (\\w+\\.\\s*\\d+,\\s*\\d{4})");
	Pattern datePP3 = Pattern.compile("from (\\w+\\.\\s*\\d+)\\s*to.+?(\\d{4})");
	
	Pattern muertoWrapP = Pattern.compile("(\\{\"id\":\\d+,.+?\\})", Pattern.DOTALL);
	Pattern deathLineP = Pattern.compile("\"publishline\":\"(.*?)\",", Pattern.DOTALL);
	Pattern namePattern = Pattern.compile("\"name\":\"(.*?)\",");
	
	public MrtviLjudi() {		
		
		writter = new Writter("obituary_output.csv");
		writter.writeLine("Obituary Published Date,Obituary Published State,Deceased Name,Deceased Death Date,Relationship keywords,Relatives Name,Relatives Place,Link to Obituary");
		pProc = new PatternProcessor();
		
		pProc.addReplacement(3, "\\\\", "");
		
	//	paginationPattern = Pattern.compile("<a .+?_uxNextLink\"\\s+class=\"next\"");
	//	detailsPagePattern = Pattern.compile("<div class=\"obitName\">\\s+<a.+?href=\"(.+?)\"", Pattern.DOTALL);
		
		paginationPattern = Pattern.compile("\"NumPageRemaining\":0,");
		detailsPagePattern = Pattern.compile("\"obitlink\":\"(.+?)\"");
		
		
		stateIdPattern = Pattern.compile("\\s*<option.*?value=\"(.+?)\"");
		stateNamePattern = Pattern.compile("\\s*<option.*?value=\".+?\">(.+?)<");
		
		relationsExtractor = new RelationsExtractor();
		
		addNewPatternSet(Pattern.compile("<span itemprop=\"givenName\">"), null, Pattern.compile("class=\"ObitTextHtml\".+?>(.+?)</span>", Pattern.DOTALL));
		addNewPatternSet(Pattern.compile("<base href=\"www.meaningfulfunerals.net\">"), Pattern.compile("<span class=\"obitlink\">.+?-\\s+(.+?)\\)"), Pattern.compile("<div class=\"content\" style=\"padding-right: 10px;\">(.+?)</div>", Pattern.DOTALL));
		addNewPatternSet(Pattern.compile("Hillview Memorial Gardens"), Pattern.compile("-\\s+((\\w+)\\s+\\d+,\\s*\\d{4})"), Pattern.compile("<td colspan=\"2\">.+?</tr>.+?<td colspan=\"2\">(.+?)</td>", Pattern.DOTALL));
		addNewPatternSet(Pattern.compile("<div class=\"obit_header\">"), Pattern.compile("-\\s+((\\w+)\\s+\\d+,\\s*\\d{4})"), Pattern.compile("class=\"full\">(.+?)</div>", Pattern.DOTALL));
		addNewPatternSet(Pattern.compile("\\| Legacy.com"), Pattern.compile("-\\s+(\\d{1,2}/\\d{1,2}/\\d{4})"), Pattern.compile("id=\"obitText\">(.+?)</div>", Pattern.DOTALL));
		

	}
	
	private void addNewPatternSet(Pattern pattern1, Pattern pattern2, Pattern pattern3) {
		ArrayList<Pattern> pats = new ArrayList<>();
		pats.add(pattern1);
		pats.add(pattern2);
		pats.add(pattern3);
		
		sitePatterns.add(pats);
		
	}	
	
	private HashSet<String> relativesToAddFamilyName = new HashSet<String>();
	
	public void run() {
		relativesToAddFamilyName.add("survived by son");
		relativesToAddFamilyName.add("survived by his wife");
		relativesToAddFamilyName.add("survived by her husband");
		relativesToAddFamilyName.add("survived by brother");
		relativesToAddFamilyName.add("survived by mother");
		relativesToAddFamilyName.add("survived by father");
		relativesToAddFamilyName.add("survived by parent");
		relativesToAddFamilyName.add("survived by child");
		
		
		firstPageNumber = 1;
		pageIncrement = 1;
		
		listaIdName = new ArrayList<>();
		listaSlova = new ArrayList<>();
		
		ArrayList<String> lines = Files.loadListFromFile("statesInput.txt");
		for (String line : lines) {
		//	String [] parts = findGroupsInString(line, Pattern.compile("value=\"(.+?)\">(.+?)<"), 2);
			String [] parts = line.split("~");
			listaIdName.add(parts[0] + "&" + parts[1]);
		//	System.out.println(parts[0] + "~" + parts[1]);
		}
		
		for(char c = 'a'; c <= 'z'; c++) {
			String s = Character.toString(c);
			listaSlova.add(s);
		}
		
		Properties p = new Properties();
		String dateFrom = "";
		String dateTo = "";
		Date startDate = null, endDate = null;
		try {
			p.load(new FileReader("properties.txt"));
			dateFrom = p.getProperty("dateFrom");
			dateTo = p.getProperty("dateTo");
			
			startDate = sdf.parse(dateFrom);
			endDate = sdf.parse(dateTo);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		while (startDate.before(endDate)) {		
			
			Calendar cal = Calendar.getInstance();
			cal.setTime(startDate);			
			
			String time = sdf.format(startDate);
			
			pProc.addData(1, sdfForPublish.format(startDate));
			
			for(String idName : listaIdName) {
				
				String idsNames[] = idName.split("&");
				
				String stateId = idsNames[0];
				
				pProc.addData(2, idsNames[1]);
						
				for(String slovo : listaSlova) {
					
					System.out.println("Working on state " + idsNames[1] + " - Letter " + slovo.toUpperCase());
					
					incrementPartOneURL = "http://www.legacy.com/obituaries/tucson/api/obituarysearch?&affiliateid=0&countryid=1&daterange=0&firstname="+slovo+"&specificdate="+time+"&stateid="+stateId+"&townname=&keyword=&entriesperpage=15&page=";
					incrementPartTwoURL = "&previousDateType=0&position=0";
					
					typeOneProcessing();
					
				}
				
			}
			
			
			
			cal.add(Calendar.DAY_OF_YEAR, 1);
			startDate = cal.getTime();
			
		}		
		
	}
	
//	public void run() {
//		
//		firstPageNumber = 1;
//		pageIncrement = 1;
//		
//		listaIdName = new ArrayList<>();
//		listaSlova = new ArrayList<>();
//		
//		ArrayList<String> lines = Files.loadListFromFile("statesInput.txt");
//		for (String line : lines) {
//		//	String [] parts = findGroupsInString(line, Pattern.compile("value=\"(.+?)\">(.+?)<"), 2);
//			String [] parts = line.split("~");
//			listaIdName.add(parts[0] + "&" + parts[1]);
//		//	System.out.println(parts[0] + "~" + parts[1]);
//		}
//		
//		try {			
//			BufferedReader in = new BufferedReader(new FileReader("mrtvezemlje.txt"));
//			String line = null;
//			
//			while ((line = in.readLine()) != null) {
//				
//				String stateId = findInString(line, stateIdPattern);			
//				String stateName = findInString(line, stateNamePattern);
//				
//				String idName = stateId + "&" + stateName;
//				
//				listaIdName.add(idName);
//								
//			}
//		} catch (Exception e) {
//			
//		}
//		
//		for(char c = 'A'; c <= 'Z'; c++) {
//			String s = Character.toString(c);
//			listaSlova.add(s);
//		}
//		
//		for(String idName : listaIdName) {
//			
//			String idsNames[] = idName.split("&");
//			
//			String stateId = idsNames[0];
//			
//			pProc.addData(2, idsNames[1]);
//					
//			for(String slovo : listaSlova) {
//				
//				String firstName = slovo;
//				
//				incrementPartOneURL = "http://www.legacy.com/ns/obitfinder/obituary-search.aspx?Page=";
//				incrementPartTwoURL = "&countryid=1&daterange=Last30Days&firstname=" + firstName + "&stateid=" + stateId;
//				
//				typeOneProcessing();
//				
//			}
//			
//		}
//		
//	}
	
//	protected void typeOneProcessing() {
//		paginationURL = null;
//		detailsPageURL = null;
//		String pageHtml = null;
//		String detailsPageHtml = null;
//		String carURLHash = null;
//
//		Matcher paginationMatcher;
//		Matcher urlMatcher;
//		HashSet<String> carURLs = new HashSet<String>();
//
//		mainLoop: for (int i = firstPageNumber; i <= lastPageNumber; i += pageIncrement) {
//			paginationURL = incrementPartOneURL + formParam + formValue + pageNumberParam + i + incrementPartTwoURL;
//			pageHtml = getHtml(paginationURL);
//			
//
//			if (pageHtml != null) {
//				System.out.println("-Pagination page: " + paginationURL);
//				
//				ArrayList<String> entitiesWraps = findAllInString(pageHtml, entityWrapP);
//				
//				for (String entityWrap : entitiesWraps) {
//										
//					detailsPageURL = findInString(entityWrap, detailsPagePattern);
//					detailsPageURL = detailsPageURL.replace("&amp;", "&");	
//					
//					String publishDateWrap = findInString(entityWrap, publishWrapP);
//					String publishDate = findInString(publishDateWrap, datePP);
//					if (publishDate.equals("")) publishDate = findInString(publishDateWrap, datePP2);
//					if (publishDate.equals("")) {
//						String parts [] = findGroupsInString(publishDateWrap, datePP3, 2);
//						if (parts != null) {
//							publishDate = parts[0] + ", " + parts[1];
//						}
//					}
//					
//					if (!publishDate.equals("")) {
//						publishDate = publishDate.replace("&nbsp;", " ");
//					}
//					
//					pProc.addData(1, publishDate);
//					
//					System.out.println("\t"+ detailsPageURL);
//					carURLHash = Sha1Hash.SHA1(detailsPageURL);
//
//					if (carURLs.contains(carURLHash)) {
//						continue;
//					} else {
//						carURLs.add(carURLHash);
//					}
//
//					detailsPageHtml = getHtml(detailsPageURL);
//				
//					if (detailsPageHtml != null) {
//						write(detailsPageHtml);
//						recordCount++;
//						newRecordsCount++;
//					}
//					
//					sleep(requestDelay);
//				}
//				
//				paginationMatcher = paginationPattern.matcher(pageHtml);
//				if (!paginationMatcher.find()) {					
//					break;					
//				}
//			} 
//		}
//	}
	
	private HashSet<String> carURLs = new HashSet<String>();
	
	protected void typeOneProcessing() {
		paginationURL = null;
		detailsPageURL = null;
		String pageHtml = null;
		String detailsPageHtml = null;
		String carURLHash = null;

		Matcher paginationMatcher;
		Matcher urlMatcher;
		

		mainLoop: for (int i = firstPageNumber; i <= lastPageNumber; i += pageIncrement) {
			paginationURL = incrementPartOneURL + formParam + formValue + pageNumberParam + i + incrementPartTwoURL;
			pageHtml = getHtml(paginationURL);
			

			if (pageHtml != null) {
				System.out.println("-Pagination page: " + paginationURL);
				
				ArrayList<String> entitiesWraps = findAllInString(pageHtml, muertoWrapP);
				
				for (String entityWrap : entitiesWraps) {
										
					detailsPageURL = findInString(entityWrap, detailsPagePattern);
					detailsPageURL = detailsPageURL.replace("&amp;", "&");	
					
					String name = findInString(entityWrap, namePattern).replace("*", "");
					pProc.addData(3, name);
					
//					String publishDateWrap = findInString(entityWrap, deathLineP);
//					String publishDate = findInString(publishDateWrap, datePP);
//					if (publishDate.equals("")) publishDate = findInString(publishDateWrap, datePP2);
//					if (publishDate.equals("")) {
//						String parts [] = findGroupsInString(publishDateWrap, datePP3, 2);
//						if (parts != null) {
//							publishDate = parts[0] + ", " + parts[1];
//						}
//					}
//					
//					if (!publishDate.equals("")) {
//						publishDate = publishDate.replace("&nbsp;", " ");
//					}
					
//					pProc.addData(1, publishDate);
					
					System.out.println("\t"+ detailsPageURL);
					carURLHash = Sha1Hash.SHA1(detailsPageURL);

					if (carURLs.contains(carURLHash)) {
						continue;
					} else {
						carURLs.add(carURLHash);
					}

					detailsPageHtml = getHtml(detailsPageURL);
				
					if (detailsPageHtml != null) {
						write(detailsPageHtml);
						recordCount++;
						newRecordsCount++;
					}
					
					sleep(requestDelay);
				}
				
				paginationMatcher = paginationPattern.matcher(pageHtml);
				if (paginationMatcher.find()) {					
					break;					
				}
			} 
		}
	}
	
	
	
	public void write(String data) {
		
		for (ArrayList<Pattern> sitePattern : sitePatterns) {
			Matcher m = sitePattern.get(0).matcher(data);
			if (m.find()) {					
				
				String text = findInString(data, sitePattern.get(2));
				ArrayList<String> relations = relationsExtractor.extractRelations(data);
				
				String dDate = findInString(data, sitePattern.get(1));
				pProc.addData(4, dDate);
				
				for (String relation : relations) {
					String parts [] = relation.split("~");
					
				//	pProc.addData(3, "Charles Spaulding Jr.");
					
					if (relativesToAddFamilyName.contains(parts[0])) {
						String nameOfDeceased = pProc.getData(3);
						String nameParts [] = nameOfDeceased.split("\\s+");
						
						String surname = nameParts[nameParts.length-1];
						if (surname.toLowerCase().contains("jr.")) {
							if (nameParts.length > 2) {
								surname = nameParts[nameParts.length - 2];
							} else {
								surname = null;
							}
						}
						
						if (parts[1].split("\\s+").length == 1) {
							parts[1] += (surname == null?"" : " " + surname);
						}
					}					
					
					pProc.addData(5, parts[0]);
					pProc.addData(6, parts[1]);
					pProc.addData(7, "");
					pProc.addData(8, detailsPageURL);
					
					
					pProc.processPatterns(data, writter);
					
					System.out.println(relation);
				}
				return;
			}
		}
		
		System.err.println("Not found " + detailsPageURL);
	}
	
	public static void main(String[] args) {
		new MrtviLjudi().run();
	}

}
