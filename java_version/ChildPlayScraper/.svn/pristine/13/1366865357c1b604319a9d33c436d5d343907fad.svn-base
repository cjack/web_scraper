package bots;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import master.Master;

import util.Files;
import util.PatternProcessor;
import util.Sha1Hash;
import util.Writter;

import org.unbescape.html.HtmlEscape;

public class Chemistwarehouse extends Master {

	private String inputCategoryLinks;
	private Pattern cateogryLinkPattern;
	private ArrayList<String> categoryLinks;
	private String catHtml;
	private Pattern categoryWrapperPattern;
	private Pattern categoryPattern;
	private String categoryWrapper;
	private ArrayList<String> categories;
	private Pattern descriptionWrapperPattern;
	private Pattern descriptionPattern;
	private String descriptionWrapper;
	private ArrayList<String[]> descriptions;
	private Pattern imagePattrn;
	private String image;
	private DecimalFormat nf;
	private int masterID;
	private String lastLetterID;
	private String imageName;
	private Pattern specialWarningsPattern;
	private Pattern noSpecialWarningPattern;
	private String specialWarnings;
	private String noSpecailWarning;
	private String categoryText;
	private ArrayList<String> detUrls;
	private ArrayList<String> lastIDs;
	private Writter writterLastId;
	private ArrayList<String> lastIdList;
	private String lastId;

	public Chemistwarehouse() {
		
		detUrls = new ArrayList<>();
		
		File f = new File("chemistwarehouse.csv");
		
		if(!f.exists()) {
			writter = new Writter("chemistwarehouse.csv");
			writter.writeLine("Number,Source Website,Source Product Page,ID,Master ID,Name,Categories,Price tax excluded or Price tax included,Tax rules ID,Wholesale price,Manufacturer,EAN13,UPC,Width,Height,Depth,Weight,Additional shipping cost,Unit for the unit price,Unit price,Short description,Description,Tags,Meta title,Meta keywords,Meta description,Image URLs,Feature,Ingredients,Dosage/How to take,Warnings,Aliment(s),Video URLs,Brand,Sub-Brand,Product Form,Size,Country of Origin,Other,Special Warnings,SubCat1,SubCat2,SubCat3,SubCat4,SubCat5,SubCat6,SubCat7,SubCat8,SubCat9");		
			masterID = 1;
			lastLetterID = "a";
		}
		else {
			writter = new Writter("chemistwarehouse.csv", true);
			detUrls = Files.loadListFromFile("chemistwarehouse.csv", 3);
			lastIDs = Files.loadListFromFile("chemistwarehouse.csv", 1);
			String lastID = lastIDs.get(lastIDs.size()-1);
			int onlyNumbers = Integer.parseInt(lastID.replaceAll("\"", ""));
			masterID = onlyNumbers + 1;
			lastLetterID = "a";
		}
			
		inputCategoryLinks = Files.loadFileData("inputChemistwarehouse.txt");
			
		/*writter = new Writter("chemistwarehouse.csv");
		writter.writeLine("Source Website,Source Product Page,ID,Master ID,Name,Categories,Price tax excluded or Price tax included,Tax rules ID,Wholesale price,Manufacturer,EAN13,UPC,Width,Height,Depth,Weight,Additional shipping cost,Unit for the unit price,Unit price,Short description,Description,Tags,Meta title,Meta keywords,Meta description,Image URLs,Feature,Ingredients,Dosage/How to take,Warnings,Aliment(s),Video URLs,Brand,Sub-Brand,Product Form,Size,Country of Origin,Other,Special Warnings,SubCat1,SubCat2,SubCat3,SubCat4,SubCat5,SubCat6,SubCat7,SubCat8,SubCat9");
		*/
		
		pProc = new PatternProcessor();
		
		cateogryLinkPattern = Pattern.compile("<a href=\"(.+?)\"");
		
		detailsPagePattern = Pattern.compile("<a href=\"(.+?)\" title.+?>\\s*<div class=\"Product\"");
		paginationPattern = Pattern.compile(">Last</a>");
		
		categoryWrapperPattern = Pattern.compile("<div id=\"Left-Content\">(.+?)<script", Pattern.DOTALL);
		categoryPattern = Pattern.compile("<a href='.+?'\\s*>\\s*(.+?)\\s*</a>");
		descriptionWrapperPattern = Pattern.compile("<div id=\"productInfoContainter\"(.+?)<div id=\"productInfoActionButtonHolder\">", Pattern.DOTALL);
		descriptionPattern = Pattern.compile("<table.+?>.+?<tr.+?div.+?><b>(.+?)</b>.+?<tr.+?div.+?>(.*?)</div>", Pattern.DOTALL);
		imagePattrn = Pattern.compile("<a class='product_img_enlarge'.+?href='(.+?)'"); //26
		specialWarningsPattern = Pattern.compile("class='Schedule'>(.+?)<span>", Pattern.DOTALL); //39
		noSpecialWarningPattern = Pattern.compile("(<div style='display:none'>)");
		
		pProc.addPattern(4, Pattern.compile("Product ID:\\s*(.+?)</p>"));
		pProc.addPattern(6, Pattern.compile("<div class=\"productDetail\">\\s*<h1>\\s*(.+?)\\s*</h1>"));
		pProc.addPattern(8, Pattern.compile("itemprop=\"price\">(.+?)</div>"));		
		
	}
	
	public void run() {
		
		nf = new java.text.DecimalFormat("000000");
		
		categoryLinks = findAllInString(inputCategoryLinks, cateogryLinkPattern);
		
		for(String catLink : categoryLinks) {
			
			baseURL = "http://www.chemistwarehouse.com.au";
			firstPageNumber = 1;
			pageIncrement = 1;			
			incrementPartOneURL = "http://www.chemistwarehouse.com.au" + catLink + "?size=120&page=";
			
			typeOneProcessing();
			
		}
		
	}
	
	public void write(String data) {
		
		pProc.addData(5, nf.format(masterID) + lastLetterID);		
		
		for(int i = 10; i <= 21; i++) {
			pProc.addData(i, "");
		}
		
		for(int i = 23; i <= 26; i++) {
			pProc.addData(i, "");
		}
		
		for(int i = 28; i <= 39; i++) {
			pProc.addData(i, "");
		}
		
		descriptionWrapper = findInString(data, descriptionWrapperPattern);
		
		descriptions = findAllGroupsInString(descriptionWrapper, descriptionPattern);
		
		String description = "";
		
		for(String[] desc : descriptions) {
			if(!desc[1].equals("")) {
				description += desc[0] + " " + desc[1];
			}
		}
			
		description = description.replaceAll("<.+?>", "");
		description = description.replaceAll("\\s+", " ");
		description = description.replaceAll("&nbsp;", "");
		pProc.addData(22, description);
		
		pProc.addData(7, "Home");
		
		categoryWrapper = findInString(data, categoryWrapperPattern);
		
		categories = findAllInString(categoryWrapper, categoryPattern);
		categoryText = "";
	
		for(int j = 41; j <= 49; j++) {
			pProc.addData(j, "");
		}
		
		if(!categories.isEmpty()) {
			categories.remove(0);
			int j = 41;
			for(String cat : categories) {
				pProc.addData(j++, cat);
			}	
		}
		
		pProc.addData(2, "http://www.chemistwarehouse.com.au/");
		pProc.addData(9, "ex");
		
		image = findInString(data, imagePattrn);
		
		if(!image.equals("")) {
			
			imageName = nf.format(masterID) + lastLetterID + ".jpg";
			
			try {	
				File f = new File ("imagesChemist/");
				if (!f.exists()) {
					f.mkdirs();
				}
				saveImage(image, "imagesChemist/" + imageName);
				pProc.addData(27, imageName);
			} catch (IOException e2) {
				pProc.addData(27, "");
				e2.printStackTrace();							
			}	
			
			
		}
		else {
			pProc.addData(27, "");
		}
		
		specialWarnings = findInString(data, specialWarningsPattern);
		
		if(!specialWarnings.equals("")) {
			noSpecailWarning = findInString(specialWarnings, noSpecialWarningPattern);
			
			if(!noSpecailWarning.equals("")) {
				pProc.addData(40, "");
			}
			else {
				specialWarnings = specialWarnings.replaceAll("<.+?>", " ");
				specialWarnings = specialWarnings.replaceAll("\\s+", " ");
				pProc.addData(40, specialWarnings);
			}
		}
		else {
			pProc.addData(40, "");
		}
		
		pProc.addData(1, masterID + "");
		
		pProc.processPatterns(data, writter);
		masterID++;
	}
	
	public static void saveImage(String imageUrl, String destinationFile) throws IOException {
		URL url = new URL(imageUrl);
		InputStream is = url.openStream();		
		OutputStream os = new FileOutputStream(destinationFile);

		byte[] b = new byte[2048];
		int length;

		while ((length = is.read(b)) != -1) {
			os.write(b, 0, length);
		}

		is.close();
		os.close();
	}
	
	protected void typeOneProcessing() {
		paginationURL = null;
		detailsPageURL = null;
		String pageHtml = null;
		String detailsPageHtml = null;
		String carURLHash = null;
		long carID;
		int errorDelay = initialErrorDelay;

		Matcher paginationMatcher;
		Matcher urlMatcher;
		HashSet<String> carURLs;

		mainLoop: for (int i = firstPageNumber; i <= lastPageNumber; i += pageIncrement) {
			paginationURL = incrementPartOneURL + formParam + formValue + pageNumberParam + i + incrementPartTwoURL;
			pageHtml = getHtml(paginationURL);
			
		//	System.out.println(pageHtml);

			if (pageHtml != null) {
				System.out.println("-Pagination page: " + paginationURL);
				errorCount = 0;
				errorDelay = initialErrorDelay;
				urlMatcher = detailsPagePattern.matcher(pageHtml);
				carURLs = new HashSet<String>();
				while (urlMatcher.find()) {
					detailsPageURL = urlMatcher.group(1);
					if (!detailsPageURL.startsWith("http:")) {
						detailsPageURL = baseURL + detailsPageURL;
					}

					detailsPageURL = fixURL(detailsPageURL);
					System.out.println("\t"+ detailsPageURL);
					carURLHash = Sha1Hash.SHA1(detailsPageURL);
					
					if(detUrls.contains("\"" + detailsPageURL + "\"")) {
						continue;
					}

					if (carURLs.contains(carURLHash)) {
						continue;
					} else {
						carURLs.add(carURLHash);
					}
					
					detailsPageURL = detailsPageURL.trim();
					
					int j = 1;
					while(j <= 5) {					
						detailsPageHtml = getHtml(detailsPageURL);
						//detailsPageHtml = getHtml("http://www.chemistwarehouse.com.au/buy/4776/Ferro-Gradumet-Tablets-30");
						//System.out.println(detailsPageHtml);
						
						if(detailsPageHtml == null) {
							j++;
							sleep(500);
						}
						else {
							pProc.addData(3, detailsPageURL);
							write(detailsPageHtml);
							break;						
						}
					}
					sleep(1000);		
				}
				paginationMatcher = paginationPattern.matcher(pageHtml);
				if (!paginationMatcher.find()) {
					break;
				}
			}
			
			sleep(500);
		}
	}
	
	public static void main(String[] args) {
		new Chemistwarehouse().run();
	}

}
