package bots;

import master.Master;
import util.*;
import java.util.regex.Pattern;
import java.util.*;

public class AlternativeTo extends Master {

	public AlternativeTo(Integer firstPage, Integer lastPage) {		
		this();
		firstPageNumber = firstPage;
		lastPageNumber = lastPage;
	}
	
	public AlternativeTo() {		
		pProc = new PatternProcessor();
		writter = new Writter("alternative.csv");
		writter.writeLine("Title,Short Description,Long Description,Tags,Categories,Website,AlternativeTo Link");
		
		pProc.addPattern(1, Pattern.compile("<h1 itemprop=\"name\">(.+?)<"));
		pProc.addPattern(2, Pattern.compile("</h1>\\s+<p>(.+?)<"));
		pProc.addPattern(3, Pattern.compile("<div itemprop=\"description\">\\s+(.+?)<(?:a|/)", Pattern.DOTALL));
		pProc.addReplacement(3, "<.+?>", "");
		pProc.addPattern(6, Pattern.compile("<a class=\"btn btn-success btn-small btn-item-page\" href=\"(.+?)\""));
	}	

	public static void main(String[] args) {
		if (args.length == 2) {
			new AlternativeTo(Integer.parseInt(args[0]), Integer.parseInt(args[1])).start();
		} else {
			new AlternativeTo().start();
		}
		
	}
	
	Pattern linkPattern = Pattern.compile("<loc>(.+?)</loc>");
	private int counter = 1;
	
	@Override
	public void run() {
		String fileData = Files.loadFileData("sitemap1.xml");
		ArrayList<String> links = findAllInString(fileData, linkPattern);
		
		System.out.println(links.size());
		
		for (String link : links) {
			System.out.println(counter++ + ". " + link);
			String pageHtml = fetchPageContent(link);
			
			write(pageHtml, link);
			sleep(1000);
		}
		
		writter.close();
		
	}
	
	private Pattern tagsWrapP = Pattern.compile("<h2>Tags</h2>\\s+(.+?)</ul>", Pattern.DOTALL);
	private Pattern tagP = Pattern.compile("<li><a.+?>(.+?)</a>");
	
	private Pattern categoryWrapP = Pattern.compile("<h2>\\s+Categor(?:y|ies)\\s+</h2>\\s+(.+?)\\s+</div>", Pattern.DOTALL);
	private Pattern categoryP = Pattern.compile("<a.+?>(.+?)</a>");

	public void write (String data, String link) {
		String tagsWrap = findInString(data, tagsWrapP);
		ArrayList<String> tags = findAllInString(tagsWrap, tagP);
		
		if (tags.size() > 0) {
			pProc.addData(4, Utils.joinStringFromArray(tags, ","));
		} else {
			pProc.addData(4, "");
		}
		
		
		String catWrap = findInString(data, categoryWrapP);
		ArrayList<String> categories = findAllInString(catWrap, categoryP);
		
		if (categories.size() > 0) {
			pProc.addData(5, Utils.joinStringFromArray(categories, ","));
		} else {
			pProc.addData(5, "");
		}
		
		pProc.addData(7, link);
		
		pProc.processPatterns(data, writter);
	}
	
}


