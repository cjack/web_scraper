package bots;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URLDecoder;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.GZIPInputStream;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.GetMethod;

import loaders.PropertiesLoader;
import master.Master;
import util.*;

public class FreeProxyLists extends Master {

	private Pattern ipPattern;
	HashSet<String> existingProxies = new HashSet<String>();

	public FreeProxyLists() {	
		
		loadExistingProxies();
		
		writter = new Writter("newproxies.txt");
		
		requestDelay = 2000;
		firstPageNumber = 1;
		pageIncrement = 1;
		
		incrementPartOneURL = "http://www.freeproxylists.net/?page=";
		paginationPattern = Pattern.compile(">Next");
		
		ipPattern = Pattern.compile("IPDecode\\(\"(.+?)\".+?center\">(\\d+)<");

	}		

	private void loadExistingProxies() {
		Connection con;			
		
		try {			
			Class.forName("com.mysql.jdbc.Driver");
			con = DriverManager.getConnection("jdbc:mysql://localhost/proxyworks?characterEncoding=UTF-8", "root", "root");
			PreparedStatement insertServer = con.prepareStatement("insert into proxy values (null, ?, ?, ?, ?, ?)");
			
			Statement st = con.createStatement();
			ResultSet rs = st.executeQuery("select * from proxyworks.proxy");
			while (rs.next()) {
				String address = rs.getString("address");
				int port = rs.getInt("port");
				
				String hash = address + "~"+ port;
				existingProxies.add(hash);
			}
			
			rs.close();
			st.close();
			con.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	public static void main(String[] args) {		
		new FreeProxyLists().start();
	}
	

	@Override
	public void run() {
		fetchFirstPage();
		for (int i = firstPageNumber; i <= lastPageNumber; i += pageIncrement) {
			paginationURL = incrementPartOneURL + i;
			System.out.println(paginationURL);
			String pageHtml = fetchPageContent(paginationURL);
			
			ArrayList<String[]> allGroups = findAllGroupsInString(pageHtml, ipPattern);
			for (String [] ipRow : allGroups) {
				String ip = URLDecoder.decode(ipRow[0]);
				String port = ipRow[1];
				
				String hash = ip + "~"+ port;
				if (!existingProxies.contains(hash)) {
					System.out.println(ip + ":" + port);
					existingProxies.add(hash);
					writter.writeLine(ip + ":" + port);
				} 
			}
			
			sleep(requestDelay);
		}
		
		writter.close();
		
	}
	
	@Override
	public void write (String data) {
		
	}
	
	public String fetchFirstPage() {
		try {
			if (httpClient == null) {
				httpClient = new HttpClient();
			}
			
			GetMethod get = new GetMethod("http://www.freeproxylists.net/");
			get.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0");
			get.setRequestHeader("Host", "www.freeproxylists.net");
			get.setRequestHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
			get.setRequestHeader("Accept-Encoding", "gzip, deflate");
			get.setRequestHeader("Accept-Language", "en-US,en;q=0.5");
			get.setRequestHeader("Connection", "keep-alive");
			
			httpClient.executeMethod(get);
			
			StringBuilder sb = new StringBuilder();
			String line;
			BufferedReader in = new BufferedReader(new InputStreamReader(new GZIPInputStream(get.getResponseBodyAsStream())));
			while ((line = in.readLine()) != null) {
				sb.append(line).append("\n");
			}
			
			in.close();
			get.releaseConnection();
			
			return sb.toString();			
		} catch (Exception e) {		
			e.printStackTrace();			
			return null;
		}
	}
	
	public String fetchPageContent(String fromPage) {
		try {
			if (httpClient == null) {
				httpClient = new HttpClient();
			}
			
			GetMethod get = new GetMethod(fromPage);
			get.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0");
			get.setRequestHeader("Host", "www.freeproxylists.net");
			get.setRequestHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
			get.setRequestHeader("Accept-Encoding", "gzip, deflate");
			get.setRequestHeader("Accept-Language", "en-US,en;q=0.5");
			get.setRequestHeader("Referer", "http://www.freeproxylists.net/");
			get.setRequestHeader("Connection", "keep-alive");
			
			httpClient.executeMethod(get);
			
			StringBuilder sb = new StringBuilder();
			String line;
			BufferedReader in = new BufferedReader(new InputStreamReader(new GZIPInputStream(get.getResponseBodyAsStream())));
			while ((line = in.readLine()) != null) {
				sb.append(line).append("\n");
			}
			
			in.close();
			get.releaseConnection();
			
			return sb.toString();			
		} catch (Exception e) {
			System.err.println("#### GREÅ KA ZA: " + fromPage + " ####");
			e.printStackTrace();			
			return null;
		}
	}
	
}


