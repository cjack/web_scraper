package bots;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.URL;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import util.Utils;

public class MojAutoPlain {	
	
	private Pattern deatailsLinkPattern;
	private Pattern pricePattern;
	private Pattern yearPattern;
	private Pattern imagePattern;
	private Pattern opremaWrapPattern;
	private Pattern opremaItemPattern;
	private BufferedWriter csvOut;

	public MojAutoPlain() {
		initPatterns();
		initWritters();
	}
	
	public void initPatterns() {
		deatailsLinkPattern = Pattern.compile("<a class=\"addTitle\" href=\"(/polovni-automobili/.+?)\"");
		
		pricePattern = Pattern.compile("<span class=\"spanPrice\">(.+?)</span>");
		yearPattern = Pattern.compile("<li>(\\d{4})\\s+godiste</li>");
		imagePattern = Pattern.compile("<img class=\"imgMainContain.+?src=\"(.+?)\"");
		opremaWrapPattern = Pattern.compile("Oprema</h1>(.+?)</ul>", Pattern.DOTALL);
		opremaItemPattern = Pattern.compile("<li>(.+?)</li>");
		
	}
	
	public void startCrawl() {
		
		String part1Url = "http://www.mojauto.rs/rezultat/status/automobili/vozilo_je/polovan/poredjaj-po/oglas_najnoviji/po_stranici/18/prikazi_kao/lista/stranica/";
		int pageNum = 1;
		int recordCount = 1;
		
		while(true) {
			String url = part1Url + pageNum;
			
			// ovde se nalazi ceo html od paginacione strane (strana koja sadrzi 18 automobila)
			String paginationHtml = fetchPage(url);
			
			// vadimo sve linkove ka detaljnim stranicama
			ArrayList<String> detailsLinks = findAllInString(paginationHtml, deatailsLinkPattern);
			
			for (String detailPageLink : detailsLinks) {
				
				// ceo link ka detaljnoj strani
				String detPageUrl = "http://www.mojauto.rs" + detailPageLink;
				System.out.println(recordCount + ". " + detPageUrl);
				
				String htmlDetaljneStrane = fetchPage(detPageUrl);
				
				String price = findInString(htmlDetaljneStrane, pricePattern).replaceAll("[^0-9]", "");
				String year = findInString(htmlDetaljneStrane, yearPattern);
				String image = "http://www.mojauto.rs" + findInString(htmlDetaljneStrane, imagePattern);
				String oprema = findInString(htmlDetaljneStrane, opremaWrapPattern);
				
				ArrayList<String> opremaItems = findAllInString(oprema, opremaItemPattern);
				
				StringBuilder output = new StringBuilder();
				output.append(formatValue(detailPageLink)).append(formatValue(price)).append(formatValue(year)).append(formatValue(image)).append(formatValue(Utils.joinStringFromArray(opremaItems, ",")));
				
				writeLine(output.toString());
				
				recordCount++;								
			}
			
			pageNum++;
			if (pageNum == 5) break;
		}
		
		
	}
	
	private void initWritters() {
		try {
			csvOut = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("mojauto.csv"), "UTF-8"));
			csvOut.write("Link,Cena,Godina,Slika,Oprema");
			csvOut.newLine();		
			
						
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	private void writeLine(String text) {
		try {
			csvOut.write(text);
			csvOut.newLine();
			csvOut.flush();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private String formatValue(String value) {
		value = value.replaceAll("\"", "'");
		return "\"" + value + "\",";
	}
	
	private String formatValueWithoutAppend(String value) {
		value = value.replaceAll("\"", "'");
		return "\"" + value + "\"";
	}
	
	private String fetchPage(String url) {		
		try {
			URL pageUrl = new URL(url);
			
			BufferedReader in = new BufferedReader(new InputStreamReader(pageUrl.openStream()));
			String line;
			StringBuilder pageHtml = new StringBuilder();
			
			while ((line = in.readLine()) != null) {
				pageHtml.append(line).append("\n");
			}
			
			in.close();			
			return pageHtml.toString();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	public ArrayList<String> findAllInString(String string, Pattern pattern) {
		ArrayList<String> list = new ArrayList<String>();
		
		Matcher m = pattern.matcher(string);
		while (m.find()) {
			String value = m.group(1);
			list.add(value);
		}
		
		return list;
		
		
	}

	public String findInString(String string, Pattern pattern) {
		Matcher m = pattern.matcher(string);
		while (m.find()) {
			String value = m.group(1);
			return value;
		}
		return "";
	}
	
	public static void main(String[] args) {
		new MojAutoPlain().startCrawl();
	}

}
