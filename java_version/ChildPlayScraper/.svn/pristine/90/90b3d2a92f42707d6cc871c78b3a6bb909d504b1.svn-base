package bots;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.URL;
import java.sql.DriverManager;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.GZIPInputStream;

import org.apache.commons.httpclient.Header;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.protocol.Protocol;
import org.apache.commons.lang.StringEscapeUtils;

import loaders.PropertiesLoader;
import master.Master;
import util.DBWorks;
import util.MySSLSocketFactory;
import util.PatternProcessor;
import util.Sha1Hash;
import util.Utils;
import util.Writter;
import util.Files;

public class HBSupplies extends Master {
	
	private PrintWriter csvOut;
	
	private HttpClient client = null;

	
	private String cookie;

	private Pattern idpattern;

	private Pattern imagePattern;

	private Pattern skuPattern;
	
	private HashSet<String> idsDone = new HashSet<String>();

	private ArrayList<String> idsList;

	private PostMethod post;

	private int counter;

	private Pattern manufacturerPattern;

	private Pattern groupPattern;

	private Pattern datePattern;

	private SimpleDateFormat dateFormat;

	private Date date;

	private Pattern descriptionPattern;

	public HBSupplies()	{		
	//	PropertiesLoader.init("sambro.txt");
	//	initDatabase();
	//	initWritters();
	//	loadIDsDone();
	//	DBWorks.init("psytoday");
		
		dateFormat = new SimpleDateFormat("yyyy/MM/dd");
		date = new Date();
		//System.out.println(dateFormat.format(date));
		
		pProc = new PatternProcessor();
		writter = new Writter("hbsupplies.csv");
		writter.writeLine("Manufacturer,Description,Nav ID,In Stock,Price,RRP,Group,Barcode,Image URL,New/Back In Stock");
		
		firefoxMask = true;
		recordCount = 1;
		requestDelay = 2000;
		
		idpattern = Pattern.compile("id=\\\\\"product-(\\d+)\\\\\".+?<td>(.+?)<.+?code\\\\\">(.+?)<.+?\\.\\d{2}<\\\\/span>(.+?)<input", Pattern.DOTALL);
		manufacturerPattern = Pattern.compile("id=\\\\\"product-\\d+\\\\\".+?class.+?><td>(.+?)<", Pattern.DOTALL);
		groupPattern = Pattern.compile(">([\\w\\s]+)<");
		datePattern = Pattern.compile("New as of(.+?)<");
		descriptionPattern =  Pattern.compile("<h2>(.+?)<");
		imagePattern = Pattern.compile("img src=\"(.+?)\"");
		
		pProc.addPattern(3,	Pattern.compile("Code:.+?(\\d+)<"));
		pProc.addPattern(4, Pattern.compile("Units Available:.+?>(.+?)<", Pattern.DOTALL));
		pProc.addPattern(5, Pattern.compile("Price:.+?>.+?u00a3(.+?)&", Pattern.DOTALL));
		pProc.addPattern(6, Pattern.compile("RRP:.+?u00a3(.+?)&"));
		pProc.addPattern(8, Pattern.compile("Barcode:.+?>(.+?)<"));
		
		pProc.addReplacement(1, "\\\\u00e9", "e");
		pProc.addReplacement(2, "\\\\u00e9", "e");
		
		idsList = new ArrayList<>();
		
		login();

	}
	
	/*private void loadIDsDone() {
		try {			
			BufferedReader in = new BufferedReader(new FileReader("input.txt"));
			String line = null;
			
			while ((line = in.readLine()) != null) {
				
				String parts [] = line.split(",");
				parts[0] = parts[0].replaceAll("\"", "");
				idsDone.add(parts[0]);
			}
			
			in.close();
		} catch (Exception e) {
			// TODO: handle exception
		}
		
	}*/

	private void login() {
		try {
		//	Protocol.registerProtocol("https", 	new Protocol("https", new MySSLSocketFactory(), 443));
			
			client = new HttpClient();
			System.out.print("Loginig in... ");
			
			
						
		//	GetMethod get = new GetMethod("https://www.sambro.co.uk/customer/account/login/");
			
		//	get.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:31.0) Gecko/20100101 Firefox/31.0");
		//	client.executeMethod(get);
			
			
			post = new PostMethod("http://www.hbsupplies.co.uk/login-process.php");
			post.setFollowRedirects(false);
			post.setParameter("password", "audio");
			post.setParameter("email_address", "princejames11@gmail.com");
			post.setParameter("language", "en");
			post.setParameter("login_button", "Login");
			
			post.setRequestHeader("Host", "www.hbsupplies.co.uk");
			post.setRequestHeader("Referer", "http://www.hbsupplies.co.uk/login.php");
						
			client.executeMethod(post);		
			
			System.out.println(" done.");
			
//			for (Header h : post.getResponseHeaders()) {
//			//	System.out.println(h.getName() + " - " + h.getValue());
//				if (h.getValue().contains("frontend")) {
//					cookie = h.getValue() + "; currency=GBP";
//				}
//			}
			
//			for (Header h : post.getResponseHeaders()) {
//			System.out.println(h.getName() + " - " + h.getValue());
//		}
			
			post = new PostMethod("http://www.hbsupplies.co.uk/my-account/price-list/ajax-load-price-list.php");
			
			client.executeMethod(post);
					
			//System.out.println(getData(post));
		    idsList = findAllInString(getData(post), idpattern);
		    
		    //System.out.println(idsList);
			
			counter = 1;
			
			for (String id : idsList) {
				
				String parts[] = id.split("~");
				
//				if (!parts[0].equals("10696")) {
//					continue;
//				}
				
			//	post = new PostMethod("http://www.hbsupplies.co.uk/my-account/price-list/ajax-load-price-list.php");
				
			//	client.executeMethod(post);
				
			//	String html = getData(post);
				
			//	System.out.println(html);
											
				String group = findInString(parts[3], groupPattern);
				pProc.addData(7, group);
				
				
				
				pProc.addData(1, parts[1]);	
				
				if (idsDone.contains(parts[2])) {
					continue;
				}
				
				System.out.println(counter++);
				post = new PostMethod("http://www.hbsupplies.co.uk/my-account/price-list/ajax-product-info.php");
				post.addParameter("product_id", parts[0]);
				
				client.executeMethod(post);
				
				String data = getData(post);
				
				write(data);
			}
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
	}
	
	public ArrayList<String> findAllInString(String string, Pattern pattern) {
		ArrayList<String> list = new ArrayList<String>();
		
		Matcher m = pattern.matcher(string);
		while (m.find()) {
			String value = m.group(1).trim() + "~" + m.group(2).trim() + "~" + m.group(3).trim() + "~" + m.group(4);
			list.add(value);
		}
		
		return list;
			
	}
	
	private String getData(PostMethod post) {
		try {
			BufferedReader in = new BufferedReader(new InputStreamReader(post.getResponseBodyAsStream(), "UTF-8"));
			String line;
			StringBuilder sb = new StringBuilder();
			
			while ((line = in.readLine()) != null) {
				sb.append(line);
			}
			
			//System.out.println(sb.toString());
			return sb.toString();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}

/*	private void initWritters() {
		try {
			csvOut = new PrintWriter(new OutputStreamWriter(new FileOutputStream("hbsuplies.csv"), "UTF-8"));
			csvOut.print("SKU,Product Code,Image");
			csvOut.print("\n");		
						
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	private void writeLine(PrintWriter out, String text) {
		try {
			
			out.println(text);
		//	out.print("\n");
			out.flush();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private void writeLine(BufferedWriter out, String text) {
		try {
			out.write(text);
			out.newLine();
			out.flush();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private void writeSpecs(String doctor, ArrayList<String> specs, BufferedWriter out) {
		for (String spec : specs) {
			writeLine(out, formatValue(doctor) + formatValueWithoutAppend(spec));
		}
	}*/

	public void write(String data) {
		
//		data = data.replaceAll("\\\\", "");
		
//		System.out.println(data);
		
		/*String imageUrl = findInString(data, imagePattern);
		String [] parts = findGroupsInString(data, skuPattern, 2);
		
		StringBuilder sb = new StringBuilder();
		sb.append(formatValue(parts[0])).append(formatValue(parts[1])).append(formatValue(imageUrl.replaceAll("\\\\", "")));
		writeLine(csvOut, sb.toString());*/
		
		String description = findInString(data, descriptionPattern);
		
		description = description.replaceAll("&amp;", "&");
	//	description = StringEscapeUtils.unescapeJava(description);
		pProc.addData(2, description);
		
		String image = findInString(data, imagePattern);
		
		if(!image.equals("")) {
//			image = image.replaceAll("\\", "");
			pProc.addData(9, image);
		}
		else {
			pProc.addData(9, "");
		}
		
		String datum = findInString(data, datePattern);
		
		if(!datum.equals("")) {
			pProc.addData(10, datum);
		} else {
			String datum2 = dateFormat.format(date).toString();
			pProc.addData(10, datum2);
		}
		
		pProc.processPatterns(data, writter);
	}
	
	public static void main(String[] args) {
		
		new HBSupplies();
	}
	
	public String fetchPageContent(String fromPage) {
		try {
			
			GetMethod get = new GetMethod(fromPage);
			client.executeMethod(get);
			
			StringBuilder sb = new StringBuilder();
			String line;
			BufferedReader in = new BufferedReader(new InputStreamReader(get.getResponseBodyAsStream(), "UTF-8"));
			while ((line = in.readLine()) != null) {
				sb.append(line).append("\n");
			}
			
			in.close();
			get.releaseConnection();
			
			return sb.toString();			
		} catch (Exception e) {
			System.err.println("#### GREŠKA ZA: " + fromPage + " ####");
			e.printStackTrace();			
			return null;
		}
	}

	
	public void processingEnd() {
		try {
			csvOut.close();
			
		//	copyFileUsingStream(new File("sambro.csv"), new File("../sambro.csv"));
		//	copyFileUsingStream(new File("channelmax-ftp-jamesutility.txt"), new File("../channelmax-ftp-jamesutility.txt"));
		} catch (Exception e) {
			// TODO: handle exception
		}
		System.out.println("Crawl finished!");
	}
	
/*	private static void copyFileUsingStream(File source, File dest) throws IOException {
	    InputStream is = null;
	    OutputStream os = null;
	    try {
	        is = new FileInputStream(source);
	        os = new FileOutputStream(dest);
	        byte[] buffer = new byte[1024];
	        int length;
	        while ((length = is.read(buffer)) > 0) {
	            os.write(buffer, 0, length);
	        }
	    } finally {
	        is.close();
	        os.close();
	    }
	}*/
	
		
}


