package bots;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.regex.Pattern;

import util.Files;
import util.PatternProcessor;
import util.Writter;
import master.Master;

public class ParentDirect extends Master{

	private String text;
	private Pattern categoryPattern;
	private ArrayList<String> catList;
	private String html;
	private Pattern detailPagePattern;
	private ArrayList<String[]> details;
	private String detHtml;
	private Pattern imagePattern;
	private ArrayList<String> images;
	private int i;
	private String imagesText;
	private Pattern codePattern;
	private String code;
	public ParentDirect() {
		
		writter = new Writter("parentdirect.csv");
		writter.writeLine("Detail Page URL,Name,Browse,Brand,Price,Code,Description,Images");
		
		pProc = new PatternProcessor();
		
		categoryPattern = Pattern.compile("<a.+?href=\"(.+?)\"");
		detailPagePattern = Pattern.compile("<div class=\"catItemDetail\".+?data-item=\"(.+?)\" data-alias=\"(.+?)\"");
		
		text = Files.loadFileData("inputParentDirect.txt");
		
		imagePattern = Pattern.compile("<a.+?href=\"(/resources/.+?)\" class=\"highslide image\"");
		codePattern = Pattern.compile("<div class=\"item-code\">\\s*<p.+?>(.+?)<");
		
		pProc.addPattern(2, Pattern.compile("<div class=\"PageTitle\">\\s*<h1.+?>\\s*(.+?)\\s*</h1>"));
		pProc.addPattern(3, Pattern.compile("<p class=\"item-cat-links\">\\s*<a.+?>Browse</a>.*?&gt;\\s*<a.+?>(.+?)<"));
		pProc.addPattern(4, Pattern.compile("<p class=\"item-cat-links\">\\s*<a.+?>Brands</a>.*?&gt;\\s*<a.+?>(.+?)<"));
		pProc.addPattern(5, Pattern.compile("<div class=\"catPriceDetail\">.+?>\\s*(.+?)<", Pattern.DOTALL));
		pProc.addPattern(6, Pattern.compile("<div class=\"item-code\">\\s*<p.+?>(.+?)<"));
		pProc.addPattern(7, Pattern.compile("id=\"item-description\">.+?<div class=\"item-text\">(.+?)</div>", Pattern.DOTALL));
		
		pProc.addReplacement(7, "<.+?>", "");
		pProc.addReplacement(7, "\\s+", " ");
	}
	
	public void run() {
		
		catList = findAllInString(text, categoryPattern);
		
		for(String cat : catList) {
			
			cat = cat.replaceAll("&amp;", "&");
			html = fetchPageContent("http://www.parentdirect.com.au" + cat);
			
			details = findAllGroupsInString(html, detailPagePattern);
			
			for(String[] det : details) {
				
				if(!det[1].equals("DON25") && !det[1].equals("DON50")) {
					
					detHtml = fetchPageContent("http://www.parentdirect.com.au/product?KEY_ITEM=" + det[0] + "&KEY_ALIAS=" + det[1]);
					pProc.addData(1, "http://www.parentdirect.com.au/product?KEY_ITEM=" + det[0] + "&KEY_ALIAS=" + det[1]);
					System.out.println("http://www.parentdirect.com.au/product?KEY_ITEM=" + det[0] + "&KEY_ALIAS=" + det[1]);
					write(detHtml);
					
					sleep(5000);					
				}
				
			}
		}
		
	}
	
	public void write(String data) {
		
		code = findInString(data, codePattern);
		images = findAllInString(data, imagePattern);
		
		if(!images.isEmpty()) {
			
			i = 1;
			imagesText = "";
			
			for(String image : images) {
				
				try {	
					File f = new File ("imagesParentDirect/");
					if (!f.exists()) {
						f.mkdirs();
					}
					saveImage("http://www.parentdirect.com.au/" + image , "imagesParentDirect/" + code + "_" + i + ".jpg");
					imagesText += code + "_" + i + ".jpg" + ",";
				} catch (IOException e2) {
					e2.printStackTrace();							
				}	
				
				i++;
	
			}
			
			if(!imagesText.equals("")) {
				imagesText = imagesText.substring(0, imagesText.lastIndexOf(","));
			}
			
			pProc.addData(8, imagesText);
			
		}
		else {
			pProc.addData(8, "");
		}	
		
		pProc.processPatterns(data, writter);
		
	}
	
	public static void saveImage(String imageUrl, String destinationFile) throws IOException {
		URL url = new URL(imageUrl);
		InputStream is = url.openStream();		
		OutputStream os = new FileOutputStream(destinationFile);

		byte[] b = new byte[2048];
		int length;

		while ((length = is.read(b)) != -1) {
			os.write(b, 0, length);
		}

		is.close();
		os.close();
	}
	
	public static void main(String[] args) {
		
		new ParentDirect().run();

	}

}
