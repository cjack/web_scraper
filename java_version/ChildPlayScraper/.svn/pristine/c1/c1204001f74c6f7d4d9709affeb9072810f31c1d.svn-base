package bots;

import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import proxy.MultithreadedProxyFetcher;
import proxy.ProxyFetcher;

import util.PatternProcessor;
import util.Sha1Hash;
import util.Writter;

import master.Master;

public class YellowPages extends Master {

	private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	ProxyFetcher proxyFetcher;
	private String [] states;
	private String [] categories;
	private boolean allOnProxies;
	private boolean multithreaded;
	private Pattern titlePattern;
	private Pattern postCodePattern;
	
	private MultithreadedProxyFetcher mpFetcher;
	
	public YellowPages() {	
		
		Properties properties = new Properties();
		try {
			properties.load(new FileReader("yellProps.txt"));
			states = properties.getProperty("states").split(",");
			categories = properties.getProperty("categories").split(",");
			firstPageNumber = Integer.parseInt(properties.getProperty("firstPage"));
			allOnProxies = Boolean.parseBoolean(properties.getProperty("fullOnProxies"));
			multithreaded = Boolean.parseBoolean(properties.getProperty("multithreaded"));
		} catch (Exception e) {
			e.printStackTrace();
		}
				
		proxyFetcher = new ProxyFetcher();
		pProc = new PatternProcessor();
//		writter = new Writter("yellowout.csv");
		
		baseURL = "http://www.yellowpages.com";
		
		firefoxMask = true;
		
	//	firstPageNumber = 93;
		pageIncrement = 1;
		requestDelay = 1000;
		
	//	lastPageNumber = 1;
		
		pProc.addPattern(1, Pattern.compile("<h1 itemprop=\"name\">(.+?)<"));
		pProc.addPattern(2, Pattern.compile("<p class=\"street-address\">(.+?),"));
		postCodePattern = Pattern.compile("<p class=\"city-state\">(.+?),\\s+(\\w{2})\\s+(\\d+)</");
		pProc.addPattern(6, Pattern.compile("<p class=\"phone\">(.+?)</"));
		pProc.addPattern(7, Pattern.compile("href=\"mailto:(.+?)\""));
		pProc.addPattern(8, Pattern.compile("\"target\":\"website\".+?\"dku\":\"(.+?)\""));
		pProc.addPattern(9, Pattern.compile("\"search_terms\":\"(.+?)\""));
		
		titlePattern = Pattern.compile("<title>(.+?)</title>");
		
	//	incrementPartOneURL = "http://www.yellowpages.com/search?search_terms=Home%20Builders&geo_location_terms="+states[0]+"&s=relevance&page=";
		
		detailsPagePattern = Pattern.compile("<a href=\"(/[^<^>]+)\" data-analytics='\\{\"target\":\"name\"");
		paginationPattern = Pattern.compile(">Next</a>");
		
	}
	
	protected void typeOneProcessing() {
		paginationURL = null;
		detailsPageURL = null;
		String pageHtml = null;
		String detailsPageHtml = null;
		String carURLHash = null;
		int errorDelay = initialErrorDelay;

		Matcher paginationMatcher;
		Matcher urlMatcher;
		HashSet<String> carURLs = new HashSet<String>();

		mainLoop: for (int i = firstPageNumber; i <= lastPageNumber; i += pageIncrement) {
			paginationURL = incrementPartOneURL + formParam + formValue + pageNumberParam + i + incrementPartTwoURL;			
			
			pageHtml = proxyFetcher.getHtmlWithProxy(paginationURL, "YP.com");
			
			
			if (pageHtml != null) {
				String title = findInString(pageHtml, titlePattern);
				if (!title.contains("YP.com")) {			
					pageHtml = null;
				}
			}
			
			int duplicateCount=0;
			
		//	System.out.println(pageHtml);

			if (pageHtml != null) {				
				System.out.println("-Pagination page: " + paginationURL);
				errorCount = 0;
				errorDelay = initialErrorDelay;
				urlMatcher = detailsPagePattern.matcher(pageHtml);
				
				while (urlMatcher.find()) {
					
					if (multithreaded) {
						while (true) {
							String html = mpFetcher.getHtml();
							if (html == null || html.equals("")) break;
							
							write(html);
						}
					}
					
					detailsPageURL = urlMatcher.group(1);
					if (!detailsPageURL.startsWith("http:")) {
						detailsPageURL = baseURL + detailsPageURL;
					}

					detailsPageURL = fixURL(detailsPageURL);
					System.out.println("\t"+ detailsPageURL);
					carURLHash = Sha1Hash.SHA1(detailsPageURL);

					if (carURLs.contains(carURLHash)) {
						System.out.println("Contains " + detailsPageURL);
						duplicateCount++;
						if (duplicateCount > 25) {
							break mainLoop;
						}
						continue;
					} else {						
						carURLs.add(carURLHash);
					}
					
					if (allOnProxies) {
						if (multithreaded) {
							mpFetcher.addUrl(detailsPageURL);
							continue;
						} else {
							detailsPageHtml = proxyFetcher.getHtmlWithProxy(detailsPageURL, "YP.com");
						}
					} else {
						detailsPageHtml = getHtml(detailsPageURL);
					}
					

					if (detailsPageHtml != null) {
						write(detailsPageHtml);
						recordCount++;
						newRecordsCount++;						
					}
					
					
					sleep(requestDelay);
				}
				paginationMatcher = paginationPattern.matcher(pageHtml);
				if (!paginationMatcher.find()) {
					break;					
				}
			} 
		}		

	}
	
	private Pattern worHoursWrapP = Pattern.compile(">Regular Hours</span>(.+?)</div></p>", Pattern.DOTALL);
	private Pattern workHoursPattern = Pattern.compile("class=\"day-label\">(.+?)</span><span class=\"day-hours\">(.+?)<");
		
	public void write(String pageHtml) {
		String parts[] = findGroupsInString(pageHtml, postCodePattern, 3);
		
		if (parts == null) {
			parts = new String[] {"", "", ""};
		}
		
		pProc.addData(3, parts[0]);
		pProc.addData(4, parts[1]);
		pProc.addData(5, parts[2]);
		
		// workhours
		String workHoursWrap = findInString(pageHtml, worHoursWrapP);
				
		ArrayList<String []> workHours = findAllGroupsInString(workHoursWrap, workHoursPattern);
		StringBuilder whs = new StringBuilder();
		for (String [] workHour : workHours) {
			whs.append(workHour[0]).append(" ").append(workHour[1]).append(", ");
		}
		
		if (whs.length() > 1) {
			whs.delete(whs.length() - 2, whs.length() - 1);
		}
		
		
		pProc.addData(10, whs.toString());
		
		pProc.processPatterns(pageHtml, writter);
	}
	
	public static void main(String[] args) {		
		new YellowPages().run();
	}
	
	
	
	public void run() {
	//	writter = new Writter("yellow_chichago_massage.csv");
		for (String state : states) {
			
			if (multithreaded) {
				mpFetcher = new MultithreadedProxyFetcher(pProc, writter, proxyFetcher);
				mpFetcher.start();
			}
			
			writter = new Writter("yellow_massage.csv");
			for (String category : categories) {
				System.out.println("Category: " + category + ", State: " + state);
				
				
			//	firstPageNumber = 1;
				incrementPartOneURL = "http://www.yellowpages.com/search?search_terms="+category+"&geo_location_terms="+state.trim()+"&s=relevance&page=";
				
				typeOneProcessing();
			}
			if (multithreaded) {
				mpFetcher.paginationsDone();
				while (true) {
					String html = mpFetcher.getHtml();
					if (html == null) break;
					if (html.equals("")) {
						sleep(3000);
						continue;
					}
					
					write(html);
				}
				
			} 
			
		//	writter.close();
			
			firstPageNumber = 1;
		}
		
		writter.close();
		processingEnd();
		
	}

}
