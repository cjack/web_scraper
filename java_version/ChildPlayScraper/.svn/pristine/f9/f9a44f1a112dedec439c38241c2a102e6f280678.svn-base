package bots;

import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import sun.security.krb5.internal.PAEncTSEnc;
import util.Utils;

import com.sun.org.apache.bcel.internal.generic.FNEG;

import master.Master;

public class Flippa extends Master {
	
	private BufferedWriter csvOut;
	private Pattern namePattern;
	private Pattern saleCategoryPattern1;
	//private Pattern saleCategoryPattern2;
	private Pattern saleTypePattern;
	private Pattern googlePRPattern;
	private Pattern siteTypePattern;
	private Pattern platformPattern;
	private Pattern agePattern1;
	//private Pattern agePattern2;
	private Pattern pageViewsPattern;
	private Pattern uniquesPattern;
	private Pattern grossPattern;
	private Pattern netPattern;
	private Pattern pagesSessionPattern;
	private Pattern avgSessionPattern;
	private Pattern bounceRatePattern;
	private Pattern adSensePattern;
	private Pattern oldViewsArrayPattern1;
	private Pattern oldViewsArrayPattern2;
	private Pattern topChannelsPattern1;
	private Pattern topChannelsPattern2;
	private Pattern countriesPattern1;
	private Pattern countriesPattern2;
	private Pattern financePattern1;
	private Pattern financePattern2;
	private Pattern sellersNotePattern;
	private Pattern siteEstablishedPattern;
	private Pattern builtWithPattern;
	private Pattern googleAnalyticsPattern;
	private Pattern contentUniquePattern;
	private Pattern siteUniquePattern;
	private Pattern linksInGooglePattern;
	private Pattern pagesInGooglePattern;
	private Pattern majesticPattern;
	private Pattern seoMOZPattern;
	private Pattern alexaPattern;
	private Pattern statusPattern;
	private Pattern sellerPattern;
	private Pattern feedbackPattern;
	private Pattern priorPattern;
	private Pattern pricePattern;
	private Pattern dateListedPattern;
	private Pattern dateSoldPatter;
	private Pattern idPattern;
	private Pattern bidPattern;
	private Pattern saleCategoryPattern2;
	private Pattern namePattern2;
	private Pattern agePattern2;
	private Pattern pricePattern2;
	
	private int recCount = 0; 
  	private int filePart = 1;

	public Flippa() {
		
		baseURL = "https://flippa.com";
		
		initWriters();
		
		
		firstPageNumber = 8101;
		pageIncrement = 1;
	//	lastPageNumber = 8100;
		requestDelay = 400;
		
		incrementPartOneURL = "https://flippa.com/buy/search?q=&listing_format=&status=all&age_min=&age_max=&revenue_min=&revenue_max=&profit_min=&profit_max=&type=&price_min=&price_max=&hits_min=&hits_max=&uniques_min=&uniques_max=&googlelinks_min=&googlelinks_max=&pagerank=&alexa=&downloads_min=&downloads_max=&tld=&sort_col=relevance&sort_dir=asc&search=Search%2BListings&page=";
		
		paginationPattern = Pattern.compile("rel=\"next\">Next");
		detailsPagePattern = Pattern.compile("<div class=\"largetitle\">.+?<a href=\"(.+?)\"", Pattern.DOTALL);
		namePattern = Pattern.compile("data-property=\"(.+?)\"", Pattern.DOTALL);
		namePattern2 = Pattern.compile("<title>(.+?)\\s-\\s");
		saleCategoryPattern1 = Pattern.compile("<div class=\"ListingHero-propertyType ListingHero-propertyType--.+?>.+?>(.+?)</h4>", Pattern.DOTALL);
		saleCategoryPattern2 = Pattern.compile("<p class=\"Hero-description\">(.+?)</p>", Pattern.DOTALL);
		saleTypePattern = Pattern.compile("<i class=\"ListingHero-supplementaryLabelIcon.+?ListingHero-supplementaryLabelIcon--.+?</i>\\s+(.+?)\\s+<", Pattern.DOTALL);
		googlePRPattern = Pattern.compile("<div id=\"google_pr\".+?>\\s+(.+?)</div>", Pattern.DOTALL);
		siteTypePattern = Pattern.compile("site_type.+?>(.+?)</div>", Pattern.DOTALL);
		platformPattern = Pattern.compile("<div id=\"platform.+?>(.+?)</div>", Pattern.DOTALL);
		agePattern1 = Pattern.compile("site_age.+?>(.+?)</div>", Pattern.DOTALL);
		agePattern2 = Pattern.compile("Date Registered:</strong></th>\\s+.+?datetime\\s+\">.+?,\\s+(.+?)\\s00");
		pageViewsPattern = Pattern.compile("page_views.+?>(.+?)</div>", Pattern.DOTALL);
		uniquesPattern = Pattern.compile("unique_visits.+?>(.+?)</div>", Pattern.DOTALL);
		grossPattern = Pattern.compile("gross_revenue.+?\\$(.+?)</div>", Pattern.DOTALL);
		netPattern = Pattern.compile("net_profit.+?\\$(.+?)</div>", Pattern.DOTALL);
		adSensePattern = Pattern.compile("ad_sense_revenue.+?\\$(.+?)</div>", Pattern.DOTALL);
		pagesSessionPattern = Pattern.compile("pages_/_session.+?>(.+?)</div>", Pattern.DOTALL);
		avgSessionPattern = Pattern.compile("avg._session_duration.+?>(.+?)</div>", Pattern.DOTALL);
		bounceRatePattern = Pattern.compile("bounce_rate.+?>(.+?)</div>", Pattern.DOTALL);
		oldViewsArrayPattern1 = Pattern.compile("<th class=\"Table-headerCell\">Uniques</th>.+?<tbody>(.+?)</tbody>", Pattern.DOTALL);
		oldViewsArrayPattern2 = Pattern.compile("<td class=\"Table-cell--number\">(.+?)</td>", Pattern.DOTALL);
		topChannelsPattern1 = Pattern.compile("<th class=\"Table-headerCell\">% of Total.+?<tbody>(.+?)</tbody>", Pattern.DOTALL);
		topChannelsPattern2 = Pattern.compile("<td>(.+?)</td>.+?>(.+?)</td>", Pattern.DOTALL);
		//topChannelsPattern2 = Pattern.compile("<td>\s+(.+?)\s+</td>.+?>\s+(.+?)\s+<", Pattern.DOTALL);
		//countriesPattern1 = Pattern.compile("<th></th>\\s+<th class=\"Table-headerCell\">Page Views</th>\\s+</tr>\\s+</thead>\\s+<tbody>(.+?)</tbody>", Pattern.DOTALL);
		countriesPattern1 = Pattern.compile("<th></th>\\s+<th class=\"Table-headerCell\">Page Views</th>\\s+</tr>.+?<tbody>(.+?)</tbody>", Pattern.DOTALL);
		countriesPattern2 = Pattern.compile("<td>(.+?)</td>\\s+<td.+?>(.+?)<", Pattern.DOTALL);
		financePattern1 = Pattern.compile("<strong>Revenue.+?<tbody>(.+?)</tbody>", Pattern.DOTALL);
		financePattern2 = Pattern.compile("<strong>(.+?)<.+?<td.+?>(.+?)<.+?<td.+?>(.+?)<.+?<td.+?>(.+?)<", Pattern.DOTALL);
		sellersNotePattern = Pattern.compile("<div class=\"Listing-siteDescription\">\\s+(.+?)</div>", Pattern.DOTALL);
		siteEstablishedPattern = Pattern.compile("Site Established.+?</td>\\s+<td>(.+?)</td>", Pattern.DOTALL);
		builtWithPattern = Pattern.compile("Built With.+?<td>(.+?)<", Pattern.DOTALL);
		googleAnalyticsPattern = Pattern.compile("Google Analytics Detected.+?<td>(.+?)<", Pattern.DOTALL);
		contentUniquePattern = Pattern.compile("Content Unique.+?<td>(.+?)<", Pattern.DOTALL);
		siteUniquePattern = Pattern.compile("Design Unique.+?<td>(.+?)<", Pattern.DOTALL);
		linksInGooglePattern = Pattern.compile("Links In Google.+?</td>\\s+<td>(.*?)</td>", Pattern.DOTALL);
		pagesInGooglePattern = Pattern.compile("Pages In Google.+?<td>(.*?)<", Pattern.DOTALL);
		majesticPattern = Pattern.compile("MajesticSEO Inbound Links.+?</td>\\s+<td>(.*?)</td>", Pattern.DOTALL);
		seoMOZPattern = Pattern.compile("SEOmoz mozRank.+?<td>(.+?)<", Pattern.DOTALL);
		alexaPattern = Pattern.compile("<td>\\s+Alexa Rank.+?<td>(.+?)<", Pattern.DOTALL);
		statusPattern = Pattern.compile("<div class=\"ListingStatus-status ListingStatus-status--.+?>\\s+(.+?)<", Pattern.DOTALL);
		pricePattern = Pattern.compile("ListingStatus-price.+?\\s+\">\\s+\\$(.+?)<", Pattern.DOTALL);
		pricePattern2 = Pattern.compile("Buy It Now for \\$(.+?)<");
		sellerPattern = Pattern.compile("The Seller.+?<span.+?<a.+?>(.+?)<", Pattern.DOTALL);
		feedbackPattern = Pattern.compile("The Seller.+?<div class=\"Feedback Feedback--good Feedback--listingSidebar\">(.+?)f", Pattern.DOTALL);
		priorPattern = Pattern.compile("<div class=\"UserProfile-transactionsSummary UserProfile-transactionsSummary--listingSidebar\">(.+?)</div>", Pattern.DOTALL);
		dateListedPattern = Pattern.compile("Started:</strong>.+?,\\s(.+?)\\sUTC");
		dateSoldPatter = Pattern.compile("Completed:</strong>.+?,\\s(.+?)\\sUTC");
		idPattern = Pattern.compile("https://flippa.com/(.+?)-");
		bidPattern = Pattern.compile("(<div class=\"ListingStatus-bidsAndOffers\">)", Pattern.DOTALL);
	}
	
	
  public void write(String pageHtml) {
	  
		StringBuilder sb = new StringBuilder();
		ArrayList<String> row = new ArrayList<String>();
		
		String name = findInString(pageHtml, namePattern);
		if(name.equals("")) {
			name = findInString(pageHtml, namePattern2);
		}
		row.add(name);
		
		String saleCategory = findInString(pageHtml, saleCategoryPattern1);
		if(saleCategory.equals("")) {
			saleCategory = findInString(pageHtml, saleCategoryPattern2);
		}
		row.add(saleCategory.replace("&rsquo;", "'").replaceAll("<.+?>", "").replaceAll("\\s+", " "));
		
		String saleType = findInString(pageHtml, saleTypePattern).replaceAll("\\s+", " ");
		row.add(saleType);
		
		
		String googlePR = findInString(pageHtml, googlePRPattern);
		if (googlePR.startsWith("&")) {
			row.add("");
		}
		else {
			row.add(googlePR);
		}	
		String siteType = findInString(pageHtml, siteTypePattern);
		if(siteType.startsWith("&")) {
			row.add("");
		}else {
			row.add(siteType);
		}
	
		String platform = findInString(pageHtml, platformPattern);
		if(platform.startsWith("&")) {
			row.add("");
		}else {
			String pravi = "";
			if(platform.startsWith("W")) {
				
				String[] s2 = platform.split(" ");
				
				if (s2.length>1) {
					pravi = "WordPress" + " " + s2[1];
				} else {
					pravi = platform;
				}
				
				platform = pravi;
				
			}
			row.add(platform);
		}
		
		
		String siteAge = findInString(pageHtml, agePattern1);
		if (siteAge.equals("")) {
			siteAge = findInString(pageHtml, agePattern2);
		}
		row.add(siteAge);
		
		String pageViews = findInString(pageHtml, pageViewsPattern);
		row.add(pageViews);
		
		String unique = findInString(pageHtml, uniquesPattern);
		row.add(unique);
		
		String gross = findInString(pageHtml, grossPattern);
		row.add(gross);
		
		String net = findInString(pageHtml, netPattern);
		row.add(net);
		
		String adSense = findInString(pageHtml, adSensePattern);
		row.add(adSense);
		
		String pagesSession = findInString(pageHtml, pagesSessionPattern);
		row.add(pagesSession);
		
		String avgSession = findInString(pageHtml, avgSessionPattern);
		row.add(avgSession);
		
		String bounceRate = findInString(pageHtml, bounceRatePattern);
		row.add(bounceRate);
		
		String oldView = findInString(pageHtml, oldViewsArrayPattern1);
		String oldViews = findGroupInString(oldView, oldViewsArrayPattern2, 1);
		row.add(oldViews);
		
		String topChannel = findInString(pageHtml, topChannelsPattern1);
		String topChannels = findGroupInString(topChannel, topChannelsPattern2, 2);
		row.add(topChannels);
		
		String country = findInString(pageHtml, countriesPattern1);
		String countries = findGroupInString(country, countriesPattern2, 2);
		row.add(countries);
		
		String finance = findInString(pageHtml, financePattern1);
		String finance2 = findGroupInString(finance, financePattern2, 4);
		row.add(finance2);
		
		String sellerNote = findInString(pageHtml, sellersNotePattern);
		sellerNote = sellerNote.replaceAll("<.+?>", "");
		sellerNote = sellerNote.replaceAll("[  ]{2,}", " ");
		row.add(sellerNote);
		
		String siteEstablished = findInString(pageHtml, siteEstablishedPattern);
		if(siteEstablished.startsWith("&")) {
			row.add("");
		}else {
			row.add(siteEstablished);
		}
		
		String builtWith = findInString(pageHtml, builtWithPattern);
		if(builtWith.startsWith("&")) {
			row.add("");
		}else {
			row.add(builtWith);
		}
		
		row.add(findInString(pageHtml, googleAnalyticsPattern));
		row.add(findInString(pageHtml, contentUniquePattern));
		row.add(findInString(pageHtml, siteUniquePattern));
		row.add(findInString(pageHtml, linksInGooglePattern));
		row.add(findInString(pageHtml, pagesInGooglePattern));
		row.add(findInString(pageHtml, majesticPattern));
		row.add(findInString(pageHtml, seoMOZPattern));
		row.add(findInString(pageHtml, alexaPattern));
		row.add(findInString(pageHtml, statusPattern));
		
		String price = findInString(pageHtml, pricePattern);
		if (price.equals("")) {
			price = findInString(pageHtml, pricePattern2);
		}
		
		row.add(price);
		row.add(findInString(pageHtml, sellerPattern));
		row.add(findInString(pageHtml, feedbackPattern));
		
		String prior = findInString(pageHtml, priorPattern).replaceAll("\\s+", " ");
		row.add(prior);
		
		String bid = findInString(pageHtml, bidPattern);
		//System.out.println("Bid:" + bid);
		
		if(!(bid.equals(""))) {
			String link = findInString(detailsPageURL, idPattern);
			
			String[] dates = getStartAndEndTime(link);
			
			if(dates != null) {
				row.add(dates[0]);
				row.add(dates[1]);
			}
		}
		writeRow(row);
	}
  
	public void writeRow(ArrayList<String> list) {
		StringBuilder sb = new StringBuilder();
		for (String item : list) {
			sb.append(formatValue(item));
		}
		
		writeLine(sb.toString());
		recCount++;
		
		if (recCount % 50000 == 0) {
			try {
				csvOut.flush();
				csvOut.close();
				
				filePart++;
				initWriters();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	public void initWriters() {		
		try {
			csvOut = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("flippa"+filePart+".csv"), "UTF-8"));
			csvOut.write("Name, SaleCategory, SaleType, GooglePR, SiteType, Platform, " +
						"Age, PageView, Uniques, Gross, Net, Adsense, Pages/Session, " +
						"AvgSession, BounceRate, OldViewsArray, TopChannels, Countries, " +
						"Finance, Sellers notes, Established, Builtwith, GoogleAnalytics, " +
						"ContentUnique, SiteUnique, LinksInGoogle, PagesInGoogle, Majestic, " +
						"SEOMOZ, Alexa, Status, Price, Seller, Feedback, Prior, DateListed, DateSold");
			csvOut.newLine();
			csvOut.flush();
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	private void writeLine(String text) {
		
		try {
			csvOut.write(text);
			csvOut.newLine();
			csvOut.flush();
		}catch(Exception e) {
			e.printStackTrace();
		}	
	}
	
	public String findGroupInString(String string, Pattern pattern, int groups) {
		//String [] parts = new String[groups];
		
		StringBuilder sb = new StringBuilder();
		Matcher m = pattern.matcher(string);
		
		while (m.find()) {
			for (int curGroup = 0; curGroup < groups; curGroup++) {
				sb.append(m.group(curGroup+1).trim()).append(";");
				//parts[curGroup] = m.group(curGroup+1).trim();
			}
			
			
			//return parts;
		}
		return sb.toString();
	}
	
	private Pattern bidTimePattern = Pattern.compile("class=\"sitepoint-datetime \">.+?,\\s(.+?)\\sUTC");
	
	private String[] getStartAndEndTime(String id) {
		String url = "https://flippa.com/auctions/" + id + "/bids";
		String pageHtml = getHtml(url);
		String parts [] = new String[2];
		parts[0] = findInString(pageHtml, dateListedPattern);
		parts[1] = findInString(pageHtml, dateSoldPatter);
		
		if (parts[0].equals("")) {
			ArrayList<String> dates = findAllInString(pageHtml, bidTimePattern);
			if (dates.size() > 0) {
				parts[0] = dates.get(dates.size()-1);
			}
		}		
		
		return parts;
	}
	
	public void run() {
		
		typeOneProcessing();
		processingEnd();
		
	}
	
	public static void main(String[] args) {
		
		new Flippa().run();
	}

}
