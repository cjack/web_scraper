package bots;

import master.Master;
import util.*;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.*;

import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;

public class Appa extends Master {

	public Appa(Integer firstPage, Integer lastPage) {		
		this();
		firstPageNumber = firstPage;
		lastPageNumber = lastPage;
	}
	
	public Appa() {		
		pProc = new PatternProcessor();
		writter = new Writter("appa.csv");
		
		pProc.addPattern(8, Pattern.compile("Phone:\\s*(.+?)\\s*<br>"));
		pProc.addPattern(9, Pattern.compile("Fax:\\s*(.+?)\\s*<br>"));
		pProc.addPattern(10, Pattern.compile("<A HREF=\"mailto:(.+?)\""));
		
	}	

	public static void main(String[] args) {
		if (args.length == 2) {
			new Appa(Integer.parseInt(args[0]), Integer.parseInt(args[1])).start();
		} else {
			new Appa().start();
		}
		
	}

	@Override
	public void run() {
		fetchPageContent("http://www.appa.org/login.cfm?ResultPage=%2FMembership%2FMembershipDirectory%2Findex%2Ecfm");
		
		login();
		
		fetchPageContent("http://www.appa.org/Membership/MembershipDirectory/index.cfm");
		
		PostMethod post = new PostMethod("http://www.appa.org/Membership/MembershipDirectory/dir_search_results.cfm");
		post.setParameter("CountrySearch", "1");
		post.setParameter("FTE", "");
		post.setParameter("LNSearch", "");
		post.setParameter("School", "");
		post.setParameter("State", "");
		
		try {
			httpClient.executeMethod(new GetMethod("http://www.appa.org/Membership/MembershipDirectory/random.cfm"));
			httpClient.executeMethod(post);
		//	System.out.println(Utils.getResponseString(post.getResponseBodyAsStream()));
		//	Utils.printHeaders(post.getResponseHeaders());
		//	System.out.println();
		//	Utils.printHeaders(post.getRequestHeaders());
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		firstPageNumber = 1;
		pageIncrement = 10;
		lastPageNumber = 2021;
		
		incrementPartOneURL = "http://www.appa.org/Membership/MembershipDirectory/dir_search_results.cfm?Start=";
		
		detailsPagePattern = Pattern.compile("<A HREF=\"(.+?)\">");
		baseURL = "http://www.appa.org/Membership/MembershipDirectory/";
		
		typeOneProcessing();
		
		
	}
	
	protected void typeOneProcessing() {
		paginationURL = null;
		detailsPageURL = null;
		String pageHtml = null;
		String detailsPageHtml = null;

		Matcher urlMatcher;

		for (int i = firstPageNumber; i <= lastPageNumber; i += pageIncrement) {
			paginationURL = incrementPartOneURL + formParam + formValue + pageNumberParam + i + incrementPartTwoURL;
			pageHtml = fetchPageContent(paginationURL);
			
		//	System.out.println(pageHtml);

			if (pageHtml != null) {
				System.out.println("-Pagination page: " + paginationURL);

				urlMatcher = detailsPagePattern.matcher(pageHtml);
				while (urlMatcher.find()) {
					detailsPageURL = urlMatcher.group(1);
					if (!detailsPageURL.startsWith("http:")) {
						detailsPageURL = baseURL + detailsPageURL;
					}

					detailsPageURL = fixURL(detailsPageURL);
					System.out.println("\t"+ detailsPageURL);
					
					pProc.addData(12, detailsPageURL);

					detailsPageHtml = getHtml(detailsPageURL);
				//	System.out.println(detailsPageHtml);

					if (detailsPageHtml != null) {
						write(detailsPageHtml);
						recordCount++;
						newRecordsCount++;
					}
					
					sleep(1000);
				}				
			} 
		}
	}
	
	
	private void login() {
		try {
			PostMethod post = new PostMethod("http://www.appa.org/validate.cfm");
			
			post.setParameter("ResultPage", "/Membership/MembershipDirectory/index.cfm");
			post.setParameter("ScreenHeight", "567");
			post.setParameter("ScreenWidth", "800");
			post.setParameter("password", "Dewey24!");
			post.setParameter("username", "bill.sones@daymarkllc.com");
			
			int code = httpClient.executeMethod(post);
		//	System.out.println(code);
			
		//	Utils.printHeaders(post.getResponseHeaders());
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	private Pattern titlePattern = Pattern.compile("<b>(.+?)</b>");
	private Pattern namePattern = Pattern.compile("<h2.+?>(.+?),\\s+(.+?)</h2>");
	private Pattern addressPattern = Pattern.compile("<br>\\s+([\\w\\s\\.]+),\\s*(\\w{2}),\\s*(\\d{5})");
	private Pattern wrapPattern = Pattern.compile("(<h2 style=\"margin-bottom:0px;\">.+?)\\s+(?:<LI>|</UL>)", Pattern.DOTALL);

	@Override
	public void write (String data) {
		
		String title = findInString(data, titlePattern);
		pProc.addData(3, title);
		Pattern positionP = Pattern.compile(title+"<br>\\s+(.+?)<br>");
		 
		ArrayList<String> wraps = findAllInString(data, wrapPattern);
		
		for (String wrap : wraps) {
			String [] nameParts = findGroupsInString(wrap, namePattern, 2);
			if (nameParts != null) {
				pProc.addData(1, nameParts[0]);
				pProc.addData(2, nameParts[1]);
			} else {
				pProc.addData(1, "");
				pProc.addData(2, "");
			}
						
			pProc.addData(4, findInString(wrap, positionP));
			
			String addressParts[] = findGroupsInString(wrap, addressPattern, 3);
			
			if (addressParts != null) {
				pProc.addData(5, addressParts[0]);
				pProc.addData(6, addressParts[1]);
				pProc.addData(7, addressParts[2]);
			} else {
				pProc.addData(5, "");
				pProc.addData(6, "");
				pProc.addData(7, "");	
			}			
			
			pProc.addData(11, wrap);
			pProc.processPatterns(wrap, writter);
		}		
		
	}
	
}


