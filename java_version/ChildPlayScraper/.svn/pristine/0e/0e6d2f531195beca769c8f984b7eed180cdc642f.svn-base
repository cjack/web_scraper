package bots;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.GZIPInputStream;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpMethod;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;

import util.PatternProcessor;
import util.Sha1Hash;
import util.Writter;
import master.Master;

public class PropertyGuru extends Master {

	private Pattern searchFormWraperPattern;
	private Pattern searchPattern;
	private ArrayList<String> searchList;
	private Pattern columnACKPattern;
	private String[] ack;
	private Pattern addressPattern;
	private String[] address;
	private Pattern facilitiesWrapPattern;
	private Pattern facilitiesPattern;
	private String facilitiesWraper;
	private ArrayList<String> facilities;
	private ArrayList<String> listaSlova;
	private Pattern srcGaPattern;
	private String srcGa;
	private Pattern gaPIDPattern;
	private PostMethod post;
	private Pattern normalnoIliNePattern;
	private Pattern longitudePattern;
	private Pattern latitudePattern;
	private String longitude;
	private String latitude;
	
	public PropertyGuru() {
		
		writter = new Writter("propertyGuruCondos.csv");
		writter.writeLine("Property type,Property Sub Type,Property Name,Address,Postal Code,Tenure,Completion Year,No of Units,No of Floors,Developer,District,Facilities,Longitude,Latitude,URL");
		
		pProc = new PatternProcessor();
		
		listaSlova = new ArrayList<String>();
		
		listaSlova.add("0-9");
						
		for(char c = 'A'; c <= 'Z'; c++) {
			String s = Character.toString(c);
			listaSlova.add(s);
		}
		
		paginationPattern = Pattern.compile(">Next</a>");
		detailsPagePattern = Pattern.compile("<a class=\"bluelink\" href=\"(.+?)\"");
		searchFormWraperPattern = Pattern.compile("<div id=\"condosearchform\">(.+?)</table>", Pattern.DOTALL);
		searchPattern = Pattern.compile("<td.+?href=\"(.+?)\"");
		
		columnACKPattern = Pattern.compile("div id=\"breadcrumbs\">.+?a class.+?>Home<.+?a class.+?>(.+?)<.+?a class.+?>(.+?)<.+?span id.+?>(.+?)<", Pattern.DOTALL);
		addressPattern = Pattern.compile("Address:\\s*</b>(.+?) (\\d{4,})");
		facilitiesWrapPattern = Pattern.compile("<h2>Condo Facilities</h2>(.+?)</table>", Pattern.DOTALL);
		facilitiesPattern = Pattern.compile("<li>(.+?)</li>");
		longitudePattern = Pattern.compile("longitude':(.+?)\\s*}");
		latitudePattern =  Pattern.compile("latitude':(.+?),");
		
		srcGaPattern = Pattern.compile("src=\"(.+?)\"");
		gaPIDPattern = Pattern.compile(",\"(/ga.+?PID.+?)\"");
		
		normalnoIliNePattern = Pattern.compile("(<!DOCTYPE html>\\s*<head>\\s*<META NAME)");
		
		pProc.addPattern(6, Pattern.compile("Tenure:\\s*</b>.+?>(.+?)<"));
		pProc.addPattern(2, Pattern.compile("Property Type:</td><td><b>(.+?)<"));
		pProc.addPattern(7, Pattern.compile("Completion Year:</td><td><b>(.+?)<"));
		pProc.addPattern(8, Pattern.compile("# of Units:</td><td><b>(.+?)<"));
		pProc.addPattern(9, Pattern.compile("# of Floors:</td><td><b>(.+?)<"));
		pProc.addPattern(10, Pattern.compile("Developer:</td><td><b>(.+?)<"));
		pProc.addPattern(13, Pattern.compile("longitude':(.+?)\\s*}"));
		pProc.addPattern(14, Pattern.compile("latitude':(.+?),"));
		
				
		baseURL = "http://www.propertyguru.com.sg";
				
	}
	
	public void run() {
			
		for(String search : listaSlova) {
			
			firstPageNumber = 1;
			pageIncrement = 1;
			
			incrementPartOneURL = "http://www.propertyguru.com.sg/condo-directory/search/name/" +  search + "/";
			
			typeOneProcessing();
			
		}		
	}
	
	public void write(String data) {
		
		//System.out.println(data);
		
		ack = findGroupsInString(data, columnACKPattern, 3);
		
		if(ack != null) {
			pProc.addData(1, ack[0]);
			pProc.addData(3, ack[2]);
			pProc.addData(11, ack[1]);
		}
		else {
			pProc.addData(1, "");
			pProc.addData(3, "");
			pProc.addData(11, "");
		}

		address = findGroupsInString(data, addressPattern, 2);
		
		if(address != null) {
			pProc.addData(4, address[0]);
			pProc.addData(5, address[1]);
		}
		else {
			pProc.addData(4, "");
			pProc.addData(5, "");
		}
		
		facilitiesWraper = findInString(data, facilitiesWrapPattern);
		facilities = findAllInString(facilitiesWraper, facilitiesPattern);
		
		String facilitiesData = "";
		
		for(String facility : facilities) {
			facilitiesData += facility + ", ";
		}
		
		facilitiesData = facilitiesData.trim();
		if(!facilitiesData.equals("")) {
			facilitiesData = skloniZarezSaKraja(facilitiesData);
		}
		
		
		pProc.addData(12, facilitiesData);
		
/*		longitude = findInString(data, longitudePattern);
		latitude = findInString(data, latitudePattern);*/
		
		pProc.processPatterns(data, writter);
	}
	
	private String skloniZarezSaKraja(String niska) {
		
		int duzinaNiske = niska.length();
		
		int posZarez = niska.lastIndexOf(",");
		
		if(duzinaNiske-1 == posZarez) {
			niska = niska.substring(0, niska.length()-1);
		}
		
		return niska;
	}
	
	protected void typeOneProcessing() {
		paginationURL = null;
		detailsPageURL = null;
		String pageHtml = null;
		String detailsPageHtml = null;
		String carURLHash = null;
		long carID;
		int errorDelay = initialErrorDelay;

		Matcher paginationMatcher;
		Matcher urlMatcher;
		HashSet<String> carURLs;

		mainLoop: for (int i = firstPageNumber; i <= lastPageNumber; i += pageIncrement) {
			paginationURL = incrementPartOneURL + formParam + formValue + pageNumberParam + i + incrementPartTwoURL;
			pageHtml = fetchPageContent(paginationURL);
			
			String normalnoIliNe = findInString(pageHtml, normalnoIliNePattern);
			
			if(normalnoIliNe.equals("")) {
				//System.out.println(pageHtml);
			}
			else {
				//System.out.println(pageHtml);
				
				srcGa = findInString(pageHtml, srcGaPattern);
				
				String srcGaUrl = "http://www.propertyguru.com.sg" + srcGa;
				String srcGaHtml = fetchPageContent(srcGaUrl);
				
				String gaPiD = findInString(srcGaHtml, gaPIDPattern);
				String gaPIDUrl = "http://www.propertyguru.com.sg" + gaPiD;
				
				httpClient = new HttpClient();
				
				post = new PostMethod(gaPIDUrl);
				
				post.setRequestHeader("Host", "www.propertyguru.com.sg");
				post.setRequestHeader("Referer", "http://www.propertyguru.com.sg/condo-directory");
				post.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:37.0) Gecko/20100101 Firefox/37.0");
				post.setRequestHeader("X-Distil-Ajax", "zwuravfwdwuwartdwescs");
				
				try {
					httpClient.executeMethod(post);
				} catch (HttpException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				String postPost = getData(post, false);
		
			}
			
			if (pageHtml != null) {
				System.out.println("-Pagination page: " + paginationURL);
				errorCount = 0;
				errorDelay = initialErrorDelay;
				urlMatcher = detailsPagePattern.matcher(pageHtml);
				carURLs = new HashSet<String>();
				while (urlMatcher.find()) {
					detailsPageURL = urlMatcher.group(1);
					
					
					if (!detailsPageURL.startsWith("http:")) {
						detailsPageURL = baseURL + detailsPageURL;
						//System.out.println(detailsPageURL);
					}

					detailsPageURL = fixURL(detailsPageURL);
					pProc.addData(15, detailsPageURL);
					System.out.println("\t"+ detailsPageURL);
					carURLHash = Sha1Hash.SHA1(detailsPageURL);

					if (carURLs.contains(carURLHash)) {
						continue;
					} else {
						carURLs.add(carURLHash);
					}
					
					// test for duplicate url
//					if (1 == 1 + 0) {
//					//	DBWorksOnline.updateTime(carID, countryDescription.getCode());
//						recordCount++;
//						updatedRecordsCount++;
//						continue;
//					}

					detailsPageHtml = fetchPageContent(detailsPageURL);
					//System.out.println("Ovde");
					//da se obrise
					//System.out.println(detailsPageHtml);

					if (detailsPageHtml != null) {
						//System.out.println("Usao");
						write(detailsPageHtml);
						recordCount++;
						newRecordsCount++;
					}
					
					sleep(2000);
				}
				paginationMatcher = paginationPattern.matcher(pageHtml);
				if (!paginationMatcher.find()) {
					break;
				}
			} else {
				errorCount++;
				if (errorCount == 5) {
					break;
				}
				i -= pageIncrement;
				
				sleep(errorDelay);
				errorDelay *= 5;				
			}
			if (stopped) {
				break;
			}
		}
	}
	
	private String getData(HttpMethod post, boolean gZip) {
		try {
			BufferedReader in;
			if (gZip) {
				in = new BufferedReader(new InputStreamReader(new GZIPInputStream(post.getResponseBodyAsStream())));
			} else {
				in = new BufferedReader(new InputStreamReader(post.getResponseBodyAsStream()));
			}
			
			
			String line;
			StringBuilder sb = new StringBuilder();
			
			while ((line = in.readLine()) != null) {
				sb.append(line);
			}
			
			//System.out.println(sb.toString());
			return sb.toString();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	public String fetchPageContent(String fromPage) {
		try {
			if (httpClient == null) {
				httpClient = new HttpClient();
			}
			
			GetMethod get = new GetMethod(fromPage);
			
			get.setRequestHeader("Host", "www.propertyguru.com.sg");
			get.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:37.0) Gecko/20100101 Firefox/37.0");
			get.setRequestHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
			get.setRequestHeader("Connection", "keep-alive");
			get.setRequestHeader("Accept-Language", "en-US,en;q=0.5");
			get.setRequestHeader("Accept-Encoding", "gzip, deflate");
//			get.setRequestHeader("", "");
			
			httpClient.executeMethod(get);
			
			StringBuilder sb = new StringBuilder();
			String line;
			BufferedReader in = new BufferedReader(new InputStreamReader(new GZIPInputStream(get.getResponseBodyAsStream())));
			while ((line = in.readLine()) != null) {
				sb.append(line).append("\n");
			}
			
			in.close();
			get.releaseConnection();
			
			return sb.toString();			
		} catch (Exception e) {
			System.err.println("#### GREŠKA ZA: " + fromPage + " ####");
			e.printStackTrace();			
			return null;
		}
	}
	
	public static void main(String[] args) {
		
		new PropertyGuru().run();

	}

}
