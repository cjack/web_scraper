package bots;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Properties;
import java.util.regex.Pattern;
import java.util.zip.GZIPInputStream;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpMethod;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;

import com.mysql.jdbc.PreparedStatement;

import util.Files;
import util.MailSender;
import util.Writter;

import loaders.PropertiesLoader;
import master.Master;

public class SgHammer extends Master {

	private Connection con;
	private Pattern mainWrapperPattern;
	private Pattern dayWrapperPattern;
	private Pattern sentenceWrapperPattern;
	private Pattern infoPattern1;
	private Pattern infoPattern2;
	private Pattern modelPattern1;
	private Pattern modelPattern3;
	private Pattern modelPattern2;
	private Pattern modelPattern4;
	private ArrayList<String[]> sentenceList;
	private String[] info1;
	private String[] info2;
	private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
	private MailSender mailSender;
	private Properties properties;
	private Pattern swPattern;
	private String sw;
	private ArrayList<String> inputFile;
	private HashSet<String> setInputFile;
	private String dataToBeInsert;
	private String dataToCheck;
	private Pattern pattern;
	private Pattern dataToSendPattern;
	private String dataToSend;
	private Pattern modelPattern5;
	private Pattern modelPattern6;
	private Writter writter1;
	private Pattern modelPattern7;
	private Pattern modelPattern8;
	
	private long checkInterval = 5;
	private String workFrom = "";
	private String workUntil = "";
	
	private String username = "";
	private String password = "";

	public SgHammer() {
		
		try {
			Class.forName("com.mysql.jdbc.Driver");
			PropertiesLoader.init("properties.properties");
			con = DriverManager.getConnection("jdbc:mysql://"+ PropertiesLoader.readBaseLocation +"/"+PropertiesLoader.dbname+"?characterEncoding=UTF-8", 
					PropertiesLoader.username, PropertiesLoader.password);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		mainWrapperPattern = Pattern.compile("Time shown is the time the Signal can(.+?)5 minute Delineator",Pattern.DOTALL);
		dayWrapperPattern = Pattern.compile("<B>(.+?):");
		sentenceWrapperPattern = Pattern.compile("(<p style=\"line-height:100%; margin-top:0; margin-bottom:0;\">(?:<B>|)(\\d+:\\d+).+?</p>)",Pattern.DOTALL);
		infoPattern1 = Pattern.compile("early enter (.+?) signal issued.+?;(\\d+\\.\\d+),.+?target (\\d+\\.?\\d+).+?, SW(.+?),(.+?)<",Pattern.DOTALL);
		infoPattern2 = Pattern.compile("(\\d+:\\d+)\\s*.+?(?:</B>|)\\s*[Ee]nter (.+?) confirmed.+?;(.+?), target(.+?), stop\\s*(\\d+\\.\\d+)\\.(.+?)<", Pattern.DOTALL);
		modelPattern1 = Pattern.compile("(Model will avoid)");
		modelPattern2 = Pattern.compile("(Model can't take)");
		modelPattern3 = Pattern.compile("(Model won't take)");
		modelPattern4 = Pattern.compile("(Model will avoid the signal)");
		modelPattern5 = Pattern.compile("(Model wont' take)");
		modelPattern6 = Pattern.compile("(Model wont take)");
		modelPattern7 = Pattern.compile("(Model cannot take)");
		modelPattern8 = Pattern.compile("(Model can not take)");
		swPattern = Pattern.compile("SW (?:\\+|-)(\\d+)\\.?\\,?");
		dataToSendPattern = Pattern.compile("<p.+?>(.+?)</p>");
		
	    properties = new Properties();
		try {
			properties.load(new FileReader("properties.txt"));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		checkInterval = Long.parseLong(properties.getProperty("check_interval"));
		
		try {
			String workHours [] = properties.getProperty("working_hours").split("-");
			
			workFrom = workHours[0];
			workUntil = workHours[1];
		} catch (Exception e) {
			System.err.println("Invalid working_hours value! Should be something like 15:30-22:00");
		}

		username = properties.getProperty("username");
		password = properties.getProperty("password");		
		
		mailSender = MailSender.getInstance(properties);
		
		setInputFile = new HashSet<String>();
			
		inputFile = Files.loadListFromFile("inputSgHammer.txt");
		
		for(String input : inputFile) {
			if(!setInputFile.contains(input)) {
				setInputFile.add(input);
			}
		}		
		
	}
	
	public void run() {
		
		httpClient = new HttpClient();
		PostMethod post = new PostMethod("http://www.sghammer.com/mm2/control_panel.php");
		
		post.setParameter("email_address", username);
		post.setParameter("login", "Login >>");
		post.setParameter("pass", password);
		post.setParameter("redirect", "/users/journal/index.html?");
		
		post.setRequestHeader("Host", "www.sghammer.com");
		post.setRequestHeader("Referer", "http://www.sghammer.com/mm2/control_panel.php?redirect=/users/journal/index.html%3f");
		post.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0");
		
		try {
			httpClient.executeMethod(post);
		} catch (HttpException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		while (true) {
			
			if (!checkTime()) {
				System.out.println("It is not working time so we are sleeping. Work time is " + workFrom + "-" + workUntil );				
				sleep();
				continue;
			}
			
			System.out.println("Checking the page for changes...");
		
			GetMethod get = new GetMethod("http://www.sghammer.com/users/journal/index.html?");
		
			get.setRequestHeader("Host", "www.sghammer.com");
			get.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0");
			
			try {
				httpClient.executeMethod(get);
			} catch (HttpException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			String html = getData(get, false);
			
			write(html);
			
			writter1 = new Writter("outputHtml.txt");
			writter1.write(html);
			
			sleep();
		}
	}
	
	private boolean checkTime() {
		
		Calendar cal = Calendar.getInstance();
		
		int day = cal.get(Calendar.DAY_OF_WEEK);
		
		// ako je vikend onda jok
		if (day == Calendar.SATURDAY || day == Calendar.SUNDAY) {
			return false;
		}
		
	//	Date dateFrom = new Date();
		String workFromParts [] = workFrom.split(":");
		Calendar dateFrom = Calendar.getInstance();
		dateFrom.set(Calendar.HOUR_OF_DAY, Integer.parseInt(workFromParts[0]));
		dateFrom.set(Calendar.MINUTE, Integer.parseInt(workFromParts[1]));
		dateFrom.set(Calendar.SECOND, 0);
	//	System.out.println(dateFrom.getTime());
		
		String workUntilParts [] = workUntil.split(":");
		Calendar dateUntil = Calendar.getInstance();
		dateUntil.set(Calendar.HOUR_OF_DAY, Integer.parseInt(workUntilParts[0]));
		dateUntil.set(Calendar.MINUTE, Integer.parseInt(workUntilParts[1]));
		dateUntil.set(Calendar.SECOND, 0);
	//	System.out.println(dateUntil.getTime());
		
		Date now = new Date();
		
		if (now.after(dateFrom.getTime()) && now.before(dateUntil.getTime())) {
			return true;
		}
		
		return false;
	}

	private void sleep() {
		try {
			System.out.println("Sleeping for " + checkInterval + " minutes");
			Thread.sleep(checkInterval * 60000);
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	/* (non-Javadoc)
	 * @see master.Master#write(java.lang.String)
	 */
	public void write(String data){
		
		writter = new Writter("inputSgHammer.txt");
				
		String mainWraper = findInString(data, mainWrapperPattern);
		
		ArrayList<String> dayHtmls = getDayParts(mainWraper);
		
		int i = 0;
		
		for(String dayHtml : dayHtmls) {
			String [] lines = dayHtml.split("\n");
			
			String twoLines = lines[0] + lines[1];
			
			String date = findInString(twoLines, dayWrapperPattern);
			date = date.replaceAll("\\s+", " ");
			
			String model = "";
			
					
			sentenceList = findAllGroupsInString(dayHtml, sentenceWrapperPattern);
			
			for(String[] sentence : sentenceList) {
							
				dataToBeInsert = sentence[0].replaceAll("\\n", " ");
				dataToBeInsert = dataToBeInsert.replaceAll("\\s+", " ");
				
				if(setInputFile.contains(dataToBeInsert)) {
					writter.writeLine(dataToBeInsert);
				}
				else {
					setInputFile.add(dataToBeInsert);
					writter.writeLine(dataToBeInsert);
					
					info1 = findGroupsInString(sentence[0], infoPattern1, 5);
					info2 = findGroupsInString(sentence[0], infoPattern2, 6);
					
					if(info1 != null) {
						
						System.out.println("Found first signal.");
						
						info1[4] = info1[4].replaceAll("\\n", " ");
						info1[4] = info1[4].replaceAll("\\s+", " ");
						
						//System.out.println(info1[4]);
											
						String model1 = findInString(info1[4], modelPattern1);
						if (!model1.equals("")) {
							model = "false";
						}
						else  {
							model = "true";
							String model2 = findInString(info1[4], modelPattern2);
							if (!model2.equals("")) {
								model = "false";
							}						
							else {
								model = "true";
								String model3 = findInString(info1[4], modelPattern3);
								if (!model3.equals("")) {
									model = "false";
								}
								else{
									model = "true";
									String model4 = findInString(info1[4], modelPattern4);
									if (!model4.equals("")) {
										model = "false";
									}
									else{
										model = "true";
										String model5 = findInString(info1[4], modelPattern5);
										if (!model5.equals("")) {
											model = "false";
										}
										else{
											model = "true";
											String model6 = findInString(info1[4], modelPattern6);
											if (!model6.equals("")) {
												model = "false";
											}
											else{
												model = "true";
												String model7 = findInString(info1[4], modelPattern7);
												if (!model7.equals("")) {
													model = "false";
												}
												else{
													model = "true";
													String model8 = findInString(info1[4], modelPattern8);
													if (!model8.equals("")) {
														model = "false";
													}
												}
											}
										}
									}
									
								}
							}
							
						}
								
						try {	
							String upit = "insert into info values (\"" + sentence[1] + "\", \"" + "early" + "\", \"" + info1[1].replaceAll("<.+?>", "") + "\", \"" + info1[2] + "\", \"" + "" + "\", \"" + info1[3] +
									"\", \"" + sdf.format(new Date()) + "\", \"" + info1[0] + "\", \"" + date + "\", \"" + model  + "\")";
							
							dataToSend = findInString(dataToBeInsert, dataToSendPattern);
							Statement st = con.createStatement();
							st.executeUpdate(upit, PreparedStatement.RETURN_GENERATED_KEYS);
							dataToSend = dataToSend.replaceAll("<.+?>", "");
							dataToSend = dataToSend.replaceAll("&nbsp;", " ");
							dataToSend = dataToSend.replaceAll("\\(.+?\\)", "");
							mailSender.sendMail("New Signal Inserted", dataToSend, properties);
						} catch (SQLException e) {
							e.printStackTrace();
						}
					}
					
					if(info2 != null) {
						
						System.out.println("Found second signal.");
						
						sw = findInString(info2[5], swPattern);
						
						try {	
							String upit = "insert into info values (\"" + sentence[1] + "\", \"" + "confirmed" + "\", \"" + info2[2].replaceAll("<.+?>", "") + "\", \"" + info2[3] + "\", \"" + info2[4] + "\", \"" + sw +
									"\", \"" + sdf.format(new Date()) + "\", \"" + info2[1] + "\", \"" + date + "\", \"" + ""  + "\")";
							
							dataToSend = findInString(dataToBeInsert, dataToSendPattern);
							Statement st = con.createStatement();
							st.executeUpdate(upit, PreparedStatement.RETURN_GENERATED_KEYS);
							dataToSend = dataToSend.replaceAll("<.+?>", "");
							dataToSend = dataToSend.replaceAll("&nbsp;", " ");
							dataToSend = dataToSend.replaceAll("\\(.+?\\)", "");
							mailSender.sendMail("New Singal Inserted", dataToSend, properties);
						} catch (SQLException e) {
							e.printStackTrace();
						}
					}
				}
										
			}			
			
		}
		
		writter.close();
		
	}
	
	private ArrayList<String> getDayParts(String mainWraper) {
		
		String [] lines = mainWraper.split("\n");
		
		ArrayList<String> toReturn = new ArrayList<String>();
		StringBuilder sb = new StringBuilder();
		boolean foundFirst = false;
		
		for (String line : lines) {
			
			if (Pattern.matches("\\s+<p style=\"line-height:100%; margin-top:0; margin-bottom:0;\"><B>[A-Za-z]+\\s+", line)) {
				
				if (sb.length() > 0 && foundFirst) {
					toReturn.add(sb.toString());
				}
				sb = new StringBuilder();
				foundFirst = true;
			}
			
			if (foundFirst) {
				sb.append(line).append("\n");
			}
		}
		
		if (sb.length() > 0 && foundFirst) {
			toReturn.add(sb.toString());
		}
		
		return toReturn;
	}

	private String getData(HttpMethod post, boolean gZip) {
		try {
			BufferedReader in;
			if (gZip) {
				in = new BufferedReader(new InputStreamReader(new GZIPInputStream(post.getResponseBodyAsStream()), "utf-8"));
			} else {
				in = new BufferedReader(new InputStreamReader(post.getResponseBodyAsStream(), "utf-8"));
			}
			
			
			String line;
			StringBuilder sb = new StringBuilder();
			
			while ((line = in.readLine()) != null) {
				sb.append(line).append("\n");
			}
			
			//System.out.println(sb.toString());
			return sb.toString();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	public static void main(String[] args) {
		 
		new SgHammer().run();			
		
	}
}
