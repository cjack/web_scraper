package util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.HashMap;

import com.mysql.jdbc.PreparedStatement;

import loaders.PropertiesLoader;

public class DBWorks {

	private static Connection con;
	private static String carTableName;
	private static Statement insertIntoCars;
	private static StringBuilder insIntoCars;
	private static int buffCarsCounter;
	private static boolean createCarTable;
	
	private static HashMap<String, Integer> carHashMap;
	
	public static void init(String tableName) {
		try {
			
			createCarTable = false;
			
			Class.forName("com.mysql.jdbc.Driver");
			con = DriverManager.getConnection("jdbc:mysql://"+ PropertiesLoader.readBaseLocation +"/"+PropertiesLoader.dbname+"?characterEncoding=UTF-8", 
					PropertiesLoader.username, PropertiesLoader.password);

			carTableName = tableName;
		
			buffCarsCounter = 0;
			insertIntoCars = con.createStatement();
					
			Statement statement = con.createStatement();
			ResultSet rs = statement.executeQuery("show tables like '" + carTableName + "'" );
			if (rs.first()) {
				System.out.println("Table " + carTableName + " already exists.");
			//	statement.executeUpdate("drop table " + carTableName);
			//	statement.executeUpdate("update " + carTableName + " set active = 0");
				createCarTable = false;
			}
			
			String query;
			
			if (createCarTable) {
				query = "CREATE TABLE "+carTableName+" (" +
					"  id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT," +
					"  IDCarOnSite VARCHAR(45) NOT NULL," +
					"  title VARCHAR(200) NOT NULL," +
					"  dealer VARCHAR(200)," +					
					"  make VARCHAR(45) NOT NULL," +
					"  model VARCHAR(45) NOT NULL," +
					"  kilometers INT(11)," +
					"  year INT(11)," +
					"  price INT(11)," +
					"  bodytype VARCHAR(20)," +
					"  trim VARCHAR(50)," +
					"  engine VARCHAR(50)," +	
					"  cylinders VARCHAR(50)," +
					"  stockNum VARCHAR(50)," +
					"  drivetrain VARCHAR(50)," +
					"  safetyRating VARCHAR(11)," +
					"  transmission VARCHAR(50)," +
					"  exteriorColour VARCHAR(20)," +
					"  interiorColour VARCHAR(20)," +
					"  passangers VARCHAR(11)," +
					"  doors VARCHAR(11)," +
					"  fueltype VARCHAR(50)," +
					"  cityFuelEconomy VARCHAR(20)," +
					"  highwayFuelEconomy VARCHAR(20)," +
					"  reviewNr INT(11)," +
					"  userRating VARCHAR(11)," +
					"  phoneNum VARCHAR(20)," +
							
					"  description TEXT NOT NULL," +
					"  pageurl VARCHAR(1500) NOT NULL," +
					"  imageUrlsNum INT(11)," +
					
					"  optionsShown TINYINT(1)," +
					"  sunroof TINYINT(1)," +
					"  moonroof TINYINT(1)," +
					"  leather TINYINT(1)," +
					"  dvd TINYINT(1)," +
					"  navigation TINYINT(1)," +
					"  carProofLink TEXT," +
					"  vin VARCHAR(30)," +
					"  hash CHAR(40)," +
					
					"  timeFirstSeen DATETIME NOT NULL," +
					"  timeLastSeen DATETIME NOT NULL," +
					"  active TINYINT(1)," +
					"  PRIMARY KEY (id)" +
					")ENGINE = MyISAM DEFAULT CHARSET=utf8;";
			
				statement.executeUpdate(query);
			}
			
			loadHashMaps();
			
		} catch (Exception e) {
			e.printStackTrace();
		} 
		
	}
	
	public static boolean containsUrl(String hash) {		
		return carHashMap.containsKey(hash);
	}

	private static void loadHashMaps() {
		try {
			carHashMap = new HashMap<String, Integer>();
			Statement statement = con.createStatement();
			ResultSet rs = statement.executeQuery("select hash, id from " + carTableName );
			while (rs.next()) {
				carHashMap.put(rs.getString("hash"), rs.getInt("id"));
			}
			rs.close();
			statement.close();
			
			System.out.println(carHashMap.keySet().size());
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	public static void addResultToBase(String insertStatement, String hash) {
		try {
		//	System.out.println(insIntoCars);
			insertStatement = "insert into " + carTableName + " values (" + insertStatement + ")";
			insertIntoCars.executeUpdate(insertStatement, PreparedStatement.RETURN_GENERATED_KEYS);
			
			ResultSet rs = insertIntoCars.getGeneratedKeys();
			int retId = -1;
			while (rs.next()) {
				retId = rs.getInt(1);
			}
			
			carHashMap.put(hash, retId);
			
		} catch (Exception e) {
			e.printStackTrace();
			System.err.println("Statement: " + insertStatement);
		}		
	}

	public static void updateTime(String hash) {		
		try {
			Statement st = con.createStatement();			
			
			st.executeUpdate("update " + carTableName + " set active = 1, timeLastSeen = '" +
				 new Timestamp(new java.util.Date().getTime()) + "' where id = " + carHashMap.get(hash));
			 			
			st.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
//	public static void finalize (String siteName) {
//		try {
//			Statement st = con.createStatement();
//			
//			// uzimamo datum od pre tri dana
//			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
//			String timeLimit = sdf.format(new Date(new Date().getTime() - (1000 * 60 * 60 * 24 * 3)));
//			
//			// prvo obrisemo sve iz duplikata koji su stariji od tri dana
//			st.executeUpdate("delete from " + duplicatesTableName + " where timeofgrab < '" + timeLimit + "'");
//			
//			// onda pokupimo sve automobile koji nisu updateovani
//			// tj imaju vreme dovlacenja vece od tri dana
//			ResultSet rs = st.executeQuery("SELECT hash, mothersite FROM " + carTableName + " where timeofgrab < '" + timeLimit + "'");
//			
//			// zatim pokupimo sve duplikate sa zadatog sajta
//			HashMap<String, Duplicate> duplicates = new HashMap<String, Duplicate>();
//			ResultSet rsd = con.createStatement().executeQuery("select IDDuplicate, hash, mothersite, pageurl, timeofgrab from " + duplicatesTableName + " where mothersite like '" + siteName + "'");
//			
//			String hash;
//			int counter = 0;
//			while (rsd.next()) {
//				
//				hash = rsd.getString("hash");
//				if (!duplicates.containsKey(hash)) {
//					duplicates.put(hash, new Duplicate(rsd.getInt("IDDuplicate"), hash,
//							rsd.getString("mothersite"), rsd.getString("pageurl"), rsd.getTimestamp("timeofgrab")));
//				//	System.out.println(duplicates.get(hash).getTimeOfGrab());
//					counter++;
//				}
//			}
//		//	System.out.println(counter);
//			Statement stat = con.createStatement();
//			
//			counter = 0;
//			Duplicate dup;
//			while (rs.next()) {
//				hash = rs.getString("hash");
//				if (duplicates.containsKey(hash)) {
//					counter++;
//					dup = duplicates.get(hash);
//					if (rs.getString("mothersite").equals(dup.getMotherSite())) {
//						stat.executeUpdate("update " + carTableName + " set pageurl = \"" +
//							dup.getPageUrl() + "\", timeofgrab = \"" + dup.getTimeOfGrab() + "\" where hash like \"" + hash + "\"" );
//					} else {
//						stat.executeUpdate("update " + carTableName + " set pageurl = \"" +
//							dup.getPageUrl() + "\", timeofgrab = \"" + dup.getTimeOfGrab() +
//							"\", mothersite = \"" + dup.getMotherSite() + "\" where hash like \"" + hash + "\"" );
//					}
//					stat.executeUpdate("delete from " + duplicatesTableName + " where IDDuplicate = " + dup.getIDDuplicate());
//				//	System.out.println(counter + ". Updated - " + hash);
//				}
//			}
//			
//			stat.executeUpdate("delete from " + carTableName + " where mothersite like '" + siteName + "' and timeofgrab < '" + timeLimit + "'");
//			stat.executeUpdate("delete from " + duplicatesTableName + " where mothersite like '" + siteName + "' and timeofgrab < '" + timeLimit + "'");
//			
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//	}
	
	public static void main(String[] args) {
		init("ie");
	}

	public static void writeRest() {
		if(insIntoCars == null)
			return;
		
		insIntoCars.deleteCharAt(insIntoCars.length() - 1);
		try {
		//	System.out.println(insIntoCars);
			insertIntoCars.executeUpdate(insIntoCars.toString());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}


}
