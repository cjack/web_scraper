package bots;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.GZIPInputStream;

import org.apache.commons.httpclient.Header;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpMethod;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;

import util.PatternProcessor;
import util.Writter;
import master.Master;

public class Fotball {

	private PatternProcessor pProc;
	private Writter writter;
	private HttpClient httpClient;
	private String bazniUrl;
	private String detailUrl;
	private Pattern detailPattern;
	private Pattern areaPattern;
	private Pattern areaWrapPattern;
	private ArrayList<String[]> areaList;
	private Pattern klubbPattern;
	private ArrayList<String> clubIdList;
	private String preDetailUrl;
	private Pattern areaIdPattern;
	private Pattern paginationPattern;
	private Pattern viewstatePattern;
	private Pattern eventtargetPattern;
	private Pattern eventargumentPattern;
	private String paginationHtml;
	private Pattern nestoPattern;
	private Pattern viewStateGeneratorPattern;
	private String cookie;
	private Pattern ctlHiddenPattern;
	private Pattern paginationWrapPattern;
	private String paginationWraper;
	private ArrayList<String> paginationLinks;
	private Object areaId;

	public Fotball() {
		
		pProc = new PatternProcessor();
		writter = new Writter("fotball.csv");
		writter.writeLine("");
			
		detailPattern = Pattern.compile("<a href='.+?/Lag/Hjem/\\?fiksId=(.+?)'");
		
		areaWrapPattern = Pattern.compile("<h3>Krets</h3>(.+?)</div>", Pattern.DOTALL);
		areaPattern = Pattern.compile("<a.+?href=\"(.+?districtId=(.+?))\">(.+?)</a>", Pattern.DOTALL);
	
		klubbPattern = Pattern.compile("<a.+?href=\"/fotballdata/Klubber1/Home/\\?fiksId=(.+?)\"", Pattern.DOTALL);
				
		paginationWrapPattern = Pattern.compile("<div class=\"pagination\"(.+?)</div>", Pattern.DOTALL);
		paginationPattern = Pattern.compile("doPostBack\\(.+?;(.+?)&.+?>\\d+", Pattern.DOTALL);
		
		viewstatePattern = Pattern.compile("id=\"__VIEWSTATE\".+?value=\"(.+?)\"", Pattern.DOTALL);
		eventargumentPattern = Pattern.compile("id=\"__EVENTARGUMENT\".+?value=\"(.+?)\"", Pattern.DOTALL);
		viewStateGeneratorPattern = Pattern.compile("id=\"__VIEWSTATEGENERATOR\".+?value=\"(.+?)\"", Pattern.DOTALL);
		ctlHiddenPattern = Pattern.compile("ctl00_sm_HiddenField.+?TSM_CombinedScripts_=(.+?)\"", Pattern.DOTALL);
		
	}
	
	public void run() {
		
		bazniUrl = "http://www.fotball.no/System-pages/Kretser-og-klubber/Klubber_og_lag/";

		String bazniHtml = fetchPage(bazniUrl);

		String areaWraper = findInString(bazniHtml, areaWrapPattern);
		
		areaList = findAllGroupsInString(areaWraper, areaPattern);
		
		/*for(String[] list : areaList) {
			System.out.println(list[0] + list[1] + list[2]);
		}*/
		
		for(String[] areaArray : areaList) {
			
		//	if (areaArray[1].equals("19")) continue;
			
			areaArray[0] = areaArray[0].replaceAll("&amp;", "&");
			
			httpClient = new HttpClient();
			
			GetMethod getFirst = new GetMethod("http://www.fotball.no" + areaArray[0]);
			try {
				httpClient.executeMethod(getFirst);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
		//	String paginationUrl = "http://www.fotball.no" + areaArray[0];
			paginationHtml = getData(getFirst, false);
			
			Header [] headers = getFirst.getResponseHeaders();
			for (Header h : headers) {
//				System.out.println(h.getValue());
				if (h.getValue().contains("ASP.NET_SessionId")) {
					cookie = h.getValue();
				}			
			}		
			
			System.out.println("=========================================");
			
			System.out.println("Response headers:");
			headers = getFirst.getResponseHeaders();
			for (Header h : headers) {
				System.out.println(h.getName() + ": " + h.getValue());
			}
			
			processPage(paginationHtml);
					
			paginationWraper = findInString(paginationHtml, paginationWrapPattern);
			paginationLinks = findAllInString(paginationWraper, paginationPattern);
			
			System.out.println(paginationLinks);
			
			for(String paginationLink : paginationLinks) {
				
				System.out.println("Usao");
								
				PostMethod post = new PostMethod("http://www.fotball.no" + areaArray[0]);
				
				String nesto = findInString(paginationHtml, ctlHiddenPattern);
				
				String result = null;
				try {
					result = java.net.URLDecoder.decode(nesto, "UTF-8");
				} catch (UnsupportedEncodingException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}				
				
				post.setFollowRedirects(false);
				post.setParameter("districtId", areaArray[1]);
				post.setParameter("districtName", areaArray[2]);
				post.setParameter("__ASYNCPOST", "true");
				post.setParameter("__EVENTARGUMENT", findInString(paginationHtml, eventargumentPattern));
				post.setParameter("__EVENTTARGET", paginationLink);
				post.setParameter("__VIEWSTATE", findInString(paginationHtml, viewstatePattern));
				post.setParameter("__VIEWSTATEGENERATOR", findInString(paginationHtml, viewStateGeneratorPattern));
				post.setParameter("ctl00_sm_HiddenField", result);
				post.setParameter("ctl00$sm", "ctl00$mainContentRegion$upResults|" + paginationLink);
					
				String districtName = areaArray[2].replaceAll(" ", "+");
			
				post.setRequestHeader("Host", "www.fotball.no");
				post.setRequestHeader("Referer", "http://www.fotball.no/System-pages/Kretser-og-klubber/Klubber_og_lag/?districtName=" + districtName + "&districtId=" + areaArray[1]);
				post.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:36.0) Gecko/20100101 Firefox/36.0");
				post.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");
				post.setRequestHeader("X-MicrosoftAjax", "Delta=true");
				post.setRequestHeader("X-Requested-With", "XMLHttpRequest");
				post.setRequestHeader("Pragma", "no-cache");
				post.setRequestHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
				post.setRequestHeader("Accept-Encoding", "gzip, deflate");				
				post.setRequestHeader("Accept-Language", "en-US,en;q=0.5");
				post.setRequestHeader("Cache-Control", "no-cache");
				post.setRequestHeader("Connection", "keep-alive");
				post.setRequestHeader("Cookie", cookie);
				
				try {
					httpClient.executeMethod(post);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}	
								
				paginationHtml = getData(post, true);
				
				System.out.println("Request headers:");
				headers = post.getRequestHeaders();
				for (Header h : headers) {
					System.out.println(h.getName() + ": " + h.getValue());
				}
				
				System.out.println("=========================================");
				
				System.out.println("Response headers:");
				headers = post.getResponseHeaders();
				for (Header h : headers) {
					System.out.println(h.getName() + ": " + h.getValue());
				}
							
				System.out.println(paginationHtml);
			}
	
		}
	
	}
	
	private void processPage(String html) {
		
		clubIdList = findAllInString(html, klubbPattern);
		
		for(String clubId : clubIdList) {
			preDetailUrl = "http://www.fotball.no/fotballdata/Klubber1/Lag/?fiksId=" + clubId;
			//System.out.println(preDetailUrl);
			//String preDetailHtml = fetchPage(preDetailUrl);
			
			
		}
		
	}

	public static void main(String[] args) {
		new Fotball().run();

	}

	private String fetchPage(String url) {		
		try {
			URL pageUrl = new URL(url);
			
			BufferedReader in = new BufferedReader(new InputStreamReader(pageUrl.openStream()));
			String line;
			StringBuilder pageHtml = new StringBuilder();
			
			while ((line = in.readLine()) != null) {
				pageHtml.append(line).append("\n");
			}
			
			in.close();			
			return pageHtml.toString();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	public ArrayList<String> findAllInString(String string, Pattern pattern) {
		ArrayList<String> list = new ArrayList<String>();
		
		Matcher m = pattern.matcher(string);
		while (m.find()) {
			String value = m.group(1).trim();
			list.add(value);
		}
		
		return list;
		
		
	}

	public String [] findGroupsInString(String string, Pattern pattern, int groups) {
		String [] parts = new String[groups];
		
		Matcher m = pattern.matcher(string);
		while (m.find()) {
			for (int curGroup = 0; curGroup < groups; curGroup++) {
				parts[curGroup] = m.group(curGroup+1).trim();
			}
			
			return parts;
		}
		return null;
	}
	
	public ArrayList<String []> findAllGroupsInString(String string, Pattern pattern) {
		ArrayList<String []> parts = new ArrayList<String[]>();
		
		Matcher m = pattern.matcher(string);
		while (m.find()) {
			String groups[] = new String[m.groupCount()]; 
			for (int curGroup = 0; curGroup < m.groupCount(); curGroup++) {
				groups[curGroup] = m.group(curGroup+1).trim();
			}
			
			parts.add(groups);
		}
		return parts;
	}
	
	public String findInString(String string, Pattern pattern) {
		Matcher m = pattern.matcher(string);
		while (m.find()) {
			String value = m.group(1).trim();
		//	System.out.println(value);
			return value;
		}
		return "";
	}
	
	private String getData(HttpMethod post, boolean gZip) {
		try {
			BufferedReader in;
			if (gZip) {
				in = new BufferedReader(new InputStreamReader(new GZIPInputStream(post.getResponseBodyAsStream())));
			} else {
				in = new BufferedReader(new InputStreamReader(post.getResponseBodyAsStream()));
			}
			
			
			String line;
			StringBuilder sb = new StringBuilder();
			
			while ((line = in.readLine()) != null) {
				sb.append(line);
			}
			
			//System.out.println(sb.toString());
			return sb.toString();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}

}
