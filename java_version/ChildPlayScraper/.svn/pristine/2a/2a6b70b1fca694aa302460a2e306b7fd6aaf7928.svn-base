package bots;

import util.*;

import java.util.regex.Pattern;
import java.util.*;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;

public class CaseyEvents {
	
	private HttpClient client;
	private String viewState;
	private Pattern viewStateP = Pattern.compile("id=\"__SEAMLESSVIEWSTATE\" value=\"(.+?)\"");
	private Pattern titleLinkPattern = Pattern.compile("<h4><a href=\"(.+?)\" title=\"(.+?)\">");
	private HashSet<String> linkHash = new HashSet<String>();
	private boolean done = false;
	
	private Writter writer;
	private PatternProcessor pProc;

	public CaseyEvents() {		
		client = new HttpClient();
		pProc = new PatternProcessor();
		writer = new Writter("events.csv");
	}	

	public static void main(String[] args) {
		new CaseyEvents().start();
		
	}

	public void start () {
		GetMethod get = new GetMethod("http://www.casey.vic.gov.au/arts-leisure/calendar-of-events");
		try {
			client.executeMethod(get);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		String firstPage = Utils.getHtml(get);
		viewState = Patterns.findInString(firstPage, viewStateP);
		
		
		HashMap<String, String> params = Utils.loadParamsFromFile("properties/casey_props.txt");
		
		for (int page = 1; page <= Integer.MAX_VALUE; page++) {
			
			if (done) {
				System.out.println("Ended");
				writer.close();
				break;
			}
			
			System.out.println("Doing page " + page);
			
			PostMethod post = new PostMethod("http://www.casey.vic.gov.au/arts-leisure/calendar-of-events");
			for (String key : params.keySet()) {
				post.setParameter(key, params.get(key));
			}
			post.setParameter("__SEAMLESSVIEWSTATE", viewState);
			post.setParameter("__EVENTARGUMENT", Integer.toString(page));
			
			String pageHtml = executePost(post);
			write(pageHtml);
			sleep(1000);
		}
		
	}
	
	private String executePost(PostMethod post) {
		try {
			client.executeMethod(post);
			String html = Utils.getResponseString(post.getResponseBodyAsStream());
			viewState = Patterns.findInString(html, viewStateP);
		//	System.out.println(html);
			return html;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public void write (String data) {
		ArrayList<String []> lines = Patterns.findAllGroupsInString(data, titleLinkPattern);
		System.out.println("\tFound " + lines.size() + " records");
		
		if (lines.size() == 0) {
			done = true;
			return;
		}
		
		for (String [] parts : lines) {
			
			if (!linkHash.contains(parts[0])) {
				linkHash.add(parts[0]);
				
				pProc.addData(1, parts[0]);
				pProc.addData(2, parts[1]);
				
				pProc.processPatterns(data, writer);
			}
		}
		
	}
	
	public void sleep(long n) {
		try {
			Thread.sleep(n);
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
}


