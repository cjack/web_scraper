package proxy;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Iterator;

import org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;
import org.apache.commons.httpclient.DefaultMethodRetryHandler;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.params.HttpMethodParams;
import proxy.ProxyManager;
import proxy.ProxyServer;

public class ProxyFetcher {
	
	private HttpClient client;
	private ProxyManager pManager;
	private ProxyServer currentProxy;
	
	public ProxyFetcher() {
		client = new HttpClient();
		

		DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, true);
		client.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);
		
		client.getHttpConnectionManager().getParams().setConnectionTimeout(20000); 
		client.getHttpConnectionManager().getParams().setSoTimeout(20000);
		
	//	HttpClientParams p = new HttpClientParams();
	//	p.setSoTimeout(16000);
	//	client.setParams(p);
		
	//	client.setParams(params);
		
	
		
	//	client.setConnectionTimeout(16000);
		pManager = new ProxyManager();
	}
	
	public void getNextProxy() {
		this.currentProxy = pManager.getNextServer();
	//	this.currentProxy = new ProxyServer(1, "203.146.82.253", 3128, 1000);
	}
	
	public String getHtmlWithProxy(String fromUrl) {
		
	//	ProxyServer proxy = pManager.getNextServer();
		String toReturn = null;		
		
		System.out.print("Fecthing: " + fromUrl + " using " + currentProxy.getAddress() + "...");
		
		try {
			GetMethod get = new GetMethod(fromUrl);
			get.setFollowRedirects(false);
			get.setMethodRetryHandler(new DefaultMethodRetryHandler());
			client.getHostConfiguration().setProxy(currentProxy.getAddress(), currentProxy.getPort());
			
			long start = System.currentTimeMillis();
			
			System.out.print("executing...");
			int code = client.executeMethod(get);
			System.out.print(code + "...");
			
			if (code != 200) {
			//	proxyFailed();
				System.out.println(" failed");
				throw new Exception("Muda od labuda");				
			}
						
			StringBuilder sb = new StringBuilder();
			String line;
			BufferedReader in = new BufferedReader(new InputStreamReader(get.getResponseBodyAsStream()));
			while ((line = in.readLine()) != null) {
				sb.append(line).append("\n");
			}
			
			in.close();
			get.releaseConnection();
			
			long end = System.currentTimeMillis();
			
			currentProxy.updateSpeed(end-start);			
			
			System.out.println(" done");
						
			toReturn = sb.toString();
			get.releaseConnection();
			
		} catch (Exception e) {
			System.out.println("FETCH ERROR - retrying with another proxy");
			e.printStackTrace();
			
			proxyFailed();					
		}
		
		
		return toReturn;
	}
	
	public void returnProxy() {
		pManager.returnServerToList(currentProxy);
	}
	
	public String getPostData(String fromPage, HashMap<String, String> params) {
		
		String toReturn = null;
		
		System.out.print("Fecthing: " + fromPage + " using " + currentProxy.getAddress() + "...");
			
		try {
			PostMethod post = new PostMethod(fromPage);
			Iterator<String> iter = params.keySet().iterator();
			while (iter.hasNext()) {
				String key = iter.next();
				post.addParameter(key, params.get(key));
			}
			
			client.getHostConfiguration().setProxy(currentProxy.getAddress(), currentProxy.getPort());
			System.out.print("executing...");
			int code = client.executeMethod(post);
			System.out.print(code + "...");
			
			if (code == 403) {
				proxyFailed();
				System.out.println(" failed");
				return null;
			}
			
			System.out.println(" done");
			toReturn = post.getResponseBodyAsString();
			post.releaseConnection();
									
		} catch (Exception e) {
			e.printStackTrace();
			
			System.out.println("FETCH ERROR - retrying with another proxy");
			
			proxyFailed();
		}		
		
		return toReturn;
		
	}
	
	private void proxyFailed() {
		currentProxy.updateTimesFailed();
		
		if (currentProxy.getTimesFailed() >= 1) {
			pManager.setProxyStatus(currentProxy, "not working");	
		} else {
			pManager.returnServerToList(currentProxy);
		}
	}
	
}
