package bots;

import master.Master;
import util.*;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.regex.Pattern;
import java.util.*;

public class WhoScored extends Master {
	
	private Pattern gameIDPattern = Pattern.compile("\\[(\\d+),");
	private Writter pagesWriter;
	private Writter gamesWriter;
	
	private Connection con;
	
	HashSet<String> pagesProcessed = new HashSet<String>();

	public WhoScored(Integer firstPage, Integer lastPage) {		
		this();
		firstPageNumber = firstPage;
		lastPageNumber = lastPage;
	}
	
	public WhoScored() {		
	//	extractGameIDs();
	//	getGameHtmls();
		initDB();
		processHtmls();
		
		makeRankingsTable();
	}	
	
	private PreparedStatement insertMatch;
	private PreparedStatement insertRankings;
	private PreparedStatement insertRankingsHT;
	
	private void initDB() {
		try {
			con = DriverManager.getConnection("jdbc:mysql://localhost/footballstats?characterEncoding=UTF-8", "root", "root");
			insertMatch = con.prepareStatement("insert into matches values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
			insertRankings = con.prepareStatement("insert into rankings values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
			insertRankingsHT = con.prepareStatement("insert into rankings_ht values (null, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	Pattern detailsWrap = Pattern.compile("matchHeader.load\\(\\[(.+?)\\]");
	Pattern initialMatchWrap = Pattern.compile("initialMatchDataForScrappers = \\[(.+?)\\]\\]", Pattern.DOTALL);
	Pattern commentaryWrap = Pattern.compile(" commentaryUpdater.load\\((.+?)\\);", Pattern.DOTALL);

	Pattern commentPattern = Pattern.compile(",\\['\\d+.*?\\\\'','(.*?)','.*?','(.*?)',\\d+,(\\d+)\\]");
	Pattern homeEventPatt = Pattern.compile("\\[\\d+,\\[\\['(.+?)',.*?,'(.+?)',.*?,.*?,(\\d+)", Pattern.DOTALL);
	Pattern awayEventPatt = Pattern.compile("\\[\\d+,\\[\\],\\[\\['(.+?)',.*?,'(.+?)',.*?,.*?,(\\d+)", Pattern.DOTALL);
	
	Pattern seasonPattern = Pattern.compile("Premier League - 20\\d{2}/(20\\d{2})");
	
	private void processHtmls() {
		pProc = new PatternProcessor();
		writter = new Writter("whoscoreddata/games_stats.csv");
		
		File [] files = new File("whoscoreddata/htmls/").listFiles();
		for (File f : files) {
			String data = Files.loadFileData(f.getAbsolutePath());
			
			System.out.println("Processing " + f.getName());
		//	pProc.addData(1, "http://www.whoscored.com/Matches/" + f.getName().substring(0, f.getName().indexOf(".")) + "/LiveOld/");
		
			//String data = Files.loadFileData("whoscoreddata/htmls/505691.html");
		
			writeToDB(data);
		}
 	}

	private void getGameHtmls() {
		ArrayList<String> gameIDs = Files.loadListFromFile("whoscoreddata/game_ids.txt");
		
		int total = gameIDs.size();
		int current = 1;
		
		for (String gameID : gameIDs) {
			
			System.out.println(current++ + "/" + total);
			String html = fetchPageContent("http://www.whoscored.com/Matches/"+gameID+"/LiveOld/");
			
			Writter w = new Writter("whoscoreddata/htmls/" + gameID + ".html");
			w.writeLine(html);
			w.close();
			
			sleep(1000);
		}
		
	}

	private void extractGameIDs() {
		
		gamesWriter = new Writter("whoscoreddata/game_ids.txt");
		
		pagesProcessed.addAll(Files.loadListFromFile("whoscoreddata/pages_done.txt"));
		pagesWriter = new Writter("whoscoreddata/pages_done.txt");
		
		ArrayList<String> scrapeProperties = new ArrayList<String>();
	//	scrapeProperties.add("http://www.whoscored.com/tournamentsfeed/4345/Fixtures/~2010~32~72");
	//	scrapeProperties.add("http://www.whoscored.com/tournamentsfeed/5476/Fixtures/~2011~32~71");
	//	scrapeProperties.add("http://www.whoscored.com/tournamentsfeed/6531/Fixtures/~2012~33~72");
	//	scrapeProperties.add("http://www.whoscored.com/tournamentsfeed/7794/Fixtures/~2013~33~71");
		scrapeProperties.add("http://www.whoscored.com/tournamentsfeed/9155/Fixtures/~2014~33~59");
		
		for (String sProp : scrapeProperties) {
			String parts [] = sProp.split("~");
			
			int startWeek = Integer.parseInt(parts[2]);
			int endWeek = Integer.parseInt(parts[3]);
			
			for (int week = startWeek; week <= endWeek; week++) {
				String url = parts[0] + "?d=" + parts[1] + "W" + week + "&isAggregate=false";
				
				System.out.print("Processing " + url + "... ");
				
				if (pagesProcessed.contains(url)) {
					System.out.println("already done!");
					continue;
				}
				
				String pageData = fetchPageContent(url);
				ArrayList<String> gameIds = findAllInString(pageData, gameIDPattern);
				
				for (String gameID : gameIds) {
					gamesWriter.writeLine(gameID);
				}
				
				pagesProcessed.add(url);
				System.out.println("done.");
				
				Writter savePages = new Writter("whoscoreddata/pages_done.txt");
				for (String page : pagesProcessed) {
					savePages.writeLine(page);
				}
				
				sleep(4000);
				
			}
			
		}
		
	}

	public static void main(String[] args) {
		if (args.length == 2) {
			new WhoScored(Integer.parseInt(args[0]), Integer.parseInt(args[1])).start();
		} else {
			new WhoScored().start();
		}
		
	}

	@Override
	public void run() {
		
	}
	
	private SimpleDateFormat sdfIn = new SimpleDateFormat("MM/dd/yyyy");
	private SimpleDateFormat sdfOut = new SimpleDateFormat("dd.MM.yyyy");
	
	@Override
	public void write (String data) {
		
		String matchDeatails [] = findInString(data, detailsWrap).split(",");
		String startDate = matchDeatails[4].substring(0, matchDeatails[4].indexOf(" ")).replace("'", "");
		
		try {
			pProc.addData(2, sdfOut.format(sdfIn.parse(startDate)));
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		String homeTeam = matchDeatails[2].replace("'", "");
		String awayTeam = matchDeatails[3].replace("'", "");
		
		pProc.addData(3, homeTeam);
		pProc.addData(4, awayTeam);
		
		String halfTime [] = matchDeatails[8].split(":");
		String fullTime [] = matchDeatails[9].split(":");
		
		pProc.addData(5, halfTime[0].replace("'", "").trim());
		pProc.addData(6, halfTime[1].replace("'", "").trim());
		pProc.addData(7, fullTime[0].replace("'", "").trim());
		pProc.addData(8, fullTime[1].replace("'", "").trim());
		
		String commentsData = findInString(data, commentaryWrap);
		String shortMatchSumarry = findInString(data, initialMatchWrap);

		ArrayList<String[]> comments = findAllGroupsInString(commentsData, commentPattern);
		ArrayList<String[]> homeEvents = findAllGroupsInString(shortMatchSumarry, homeEventPatt);
		ArrayList<String[]> awayEvents = findAllGroupsInString(shortMatchSumarry, awayEventPatt);
		
		String firstCornerTeam = "";
		int firstCorner = 200;
		int firstCornerHome = 200;
		int firstCornerAway = 200;
		int homeCorners = 0;
		int awayCorners = 0;
		
		
		for (String [] comment : comments) {
			if (comment[0].equals("corner")) {
				int cTime = Integer.parseInt(comment[2]);
				
				if (cTime < firstCorner) {
					firstCorner = cTime;
					firstCornerTeam = comment[1];
				}
				
				// ako je korner za domacu ekipu
				if (comment[1].equals("home")) {
					homeCorners++;
					if (cTime < firstCornerHome) {
						firstCornerHome = cTime;
					}
				} else {
					awayCorners++;
					if (cTime < firstCornerAway) {
						firstCornerAway = cTime;
					}
				}
			}
		}
		
		if (!firstCornerTeam.equals("")) {
			if(firstCornerTeam.equals("home")) {
				firstCornerTeam = homeTeam;
			} else {
				firstCornerTeam = awayTeam;
			}
		} 
		
		if (firstCornerHome == 200) {
			firstCornerHome = -1;
		}
		
		if (firstCornerAway == 200) {
			firstCornerAway = -1;
		}
		
		pProc.addData(9, Integer.toString(homeCorners));
		pProc.addData(10, Integer.toString(awayCorners));
		pProc.addData(11, firstCornerTeam);
		pProc.addData(12, Integer.toString(firstCornerHome));
		pProc.addData(13, Integer.toString(firstCornerAway));
		
		
		int homeYellow = 0;
		int homeRed = 0;
		int awayYellow = 0;
		int awayRed = 0;
		StringBuilder homeGoals = new StringBuilder();
		StringBuilder awayGoals = new StringBuilder();
		
		for (String [] event : homeEvents) {
			if (event[1].contains("goal")) {
				homeGoals.append(event[2] + "," + event[0] + ";");
			}
			if (event[1].equals("yellow")) {
				homeYellow++;
			}
			if (event[1].equals("red")) {
				homeRed++;
			}
		}
		
		for (String [] event : awayEvents) {
			if (event[1].contains("goal")) {
				awayGoals.append(event[2] + "," + event[0] + ";");
			}
			if (event[1].equals("yellow")) {
				awayYellow++;
			}
			if (event[1].equals("red")) {
				awayRed++;
			}
		}
		
		pProc.addData(14, Integer.toString(homeYellow));
		pProc.addData(15, Integer.toString(awayYellow));
		pProc.addData(16, Integer.toString(homeRed));
		pProc.addData(17, Integer.toString(awayRed));
		pProc.addData(18, homeGoals.toString());
		pProc.addData(19, awayGoals.toString());
		
		pProc.processPatterns(data, writter);
		
	}
	
	public void writeToDB (String data) {		
		
		try {
		String matchDeatails [] = findInString(data, detailsWrap).split(",");
		String startDate = matchDeatails[4].substring(0, matchDeatails[4].indexOf(" ")).replace("'", "");
		
		insertMatch.setTimestamp(17, new Timestamp(sdfIn.parse(startDate).getTime()));
		
		String homeTeam = matchDeatails[2].replace("'", "");
		String awayTeam = matchDeatails[3].replace("'", "");
		
		insertMatch.setString(1, homeTeam);
		insertMatch.setString(2, awayTeam);
		
		String halfTime [] = matchDeatails[8].split(":");
		String fullTime [] = matchDeatails[9].split(":");
		
		insertMatch.setInt(3, Integer.parseInt(halfTime[0].replace("'", "").trim()));
		insertMatch.setInt(4, Integer.parseInt(halfTime[1].replace("'", "").trim()));
		insertMatch.setInt(5, Integer.parseInt(fullTime[0].replace("'", "").trim()));
		insertMatch.setInt(6, Integer.parseInt(fullTime[1].replace("'", "").trim()));
		
		String commentsData = findInString(data, commentaryWrap);
		String shortMatchSumarry = findInString(data, initialMatchWrap);

		ArrayList<String[]> comments = findAllGroupsInString(commentsData, commentPattern);
		ArrayList<String[]> homeEvents = findAllGroupsInString(shortMatchSumarry, homeEventPatt);
		ArrayList<String[]> awayEvents = findAllGroupsInString(shortMatchSumarry, awayEventPatt);
		
		String firstCornerTeam = "";
		int firstCorner = 200;
		int firstCornerHome = 200;
		int firstCornerAway = 200;
		int homeCorners = 0;
		int awayCorners = 0;
		
		
		for (String [] comment : comments) {
			if (comment[0].equals("corner")) {
				int cTime = Integer.parseInt(comment[2]);
				
				if (cTime < firstCorner) {
					firstCorner = cTime;
					firstCornerTeam = comment[1];
				}
				
				// ako je korner za domacu ekipu
				if (comment[1].equals("home")) {
					homeCorners++;
					if (cTime < firstCornerHome) {
						firstCornerHome = cTime;
					}
				} else {
					awayCorners++;
					if (cTime < firstCornerAway) {
						firstCornerAway = cTime;
					}
				}
			}
		}
		
		if (!firstCornerTeam.equals("")) {
			if(firstCornerTeam.equals("home")) {
				firstCornerTeam = homeTeam;
			} else {
				firstCornerTeam = awayTeam;
			}
		} 
		
		if (firstCornerHome == 200) {
			firstCornerHome = -1;
		}
		
		if (firstCornerAway == 200) {
			firstCornerAway = -1;
		}
		
		insertMatch.setInt(7, homeCorners);
		insertMatch.setInt(8, awayCorners);
		
		insertMatch.setInt(9, firstCornerHome);
		insertMatch.setInt(10, firstCornerAway);		
		
		int homeYellow = 0;
		int homeRed = 0;
		int awayYellow = 0;
		int awayRed = 0;
		StringBuilder homeGoals = new StringBuilder();
		StringBuilder awayGoals = new StringBuilder();
		
		for (String [] event : homeEvents) {
			if (event[1].contains("goal")) {
				homeGoals.append(event[2] + "," + event[0] + ";");
			}
			if (event[1].equals("yellow")) {
				homeYellow++;
			}
			if (event[1].equals("red")) {
				homeRed++;
			}
		}
		
		for (String [] event : awayEvents) {
			if (event[1].contains("goal")) {
				awayGoals.append(event[2] + "," + event[0] + ";");
			}
			if (event[1].equals("yellow")) {
				awayYellow++;
			}
			if (event[1].equals("red")) {
				awayRed++;
			}
		}
		
		insertMatch.setInt(11, homeYellow);
		insertMatch.setInt(12, awayYellow);
		insertMatch.setInt(13, homeRed);
		insertMatch.setInt(14, awayRed);
		insertMatch.setString(15, homeGoals.toString());
		insertMatch.setString(16, awayGoals.toString());
		
		String season = findInString(data, seasonPattern);
		insertMatch.setInt(18, Integer.parseInt(season));
		
		insertMatch.executeUpdate();
		
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	private void makeRankingsTable() {
		try {
			Statement st = con.createStatement();
			ResultSet rs = st.executeQuery("select * from matches where season = 2015");
						
			HashMap<String, TeamStats> teamStats = new HashMap<String, TeamStats>();
			
			while (rs.next()) {
				String homeTeam = rs.getString("home_team");
				String awayTeam = rs.getString("away_team");
				int homeHalf = rs.getInt("home_goals_ht");
				int homeFull = rs.getInt("home_goals_ft");
				int awayHalf = rs.getInt("away_goals_ht");
				int awayFull = rs.getInt("away_goals_ft");
				
				if (!teamStats.containsKey(homeTeam)) {
					teamStats.put(homeTeam, new TeamStats(homeTeam));
				}
				if (!teamStats.containsKey(awayTeam)) {
					teamStats.put(awayTeam, new TeamStats(awayTeam));
				}
				
				TeamStats homeTeamS = teamStats.get(homeTeam);
				TeamStats awayTeamS = teamStats.get(awayTeam);
				
				homeTeamS.addGF(homeFull);
				homeTeamS.addGA(awayFull);
				homeTeamS.addPlayed(1);
				
				awayTeamS.addGF(awayFull);
				awayTeamS.addGA(homeFull);
				awayTeamS.addPlayed(1);
				
				if (homeFull > awayFull) { // pobedio domacin
					homeTeamS.addWon(1);
					awayTeamS.addLost(1);
					homeTeamS.addPts(3);					
				} else if (homeFull < awayFull) { // pobedio gost
					homeTeamS.addLost(1);
					awayTeamS.addWon(1);
					awayTeamS.addPts(3);
				} else { // nereseno
					homeTeamS.addDraw(1);
					awayTeamS.addDraw(1);
					homeTeamS.addPts(1);
					awayTeamS.addPts(1);
				}
				
			}
			
			st.executeUpdate("truncate rankings");
			st.executeUpdate("truncate rankings_ht");
			rs.close();
			st.close();
			
			ArrayList<TeamStats> allStats = new ArrayList<TeamStats>(teamStats.values());
			Collections.sort(allStats, new StatsComparator());
			
			int position = 1;
			
			for (TeamStats ts : allStats) {
				insertRankings.setString(1, ts.getName());
				insertRankings.setInt(2, position++);
				insertRankings.setInt(3, ts.getPlayed());
				insertRankings.setInt(4, ts.getWon());
				insertRankings.setInt(5, ts.getDraw());
				insertRankings.setInt(6, ts.getLost());
				insertRankings.setInt(7, ts.getGF());
				insertRankings.setInt(8, ts.getGA());
				insertRankings.setInt(9, ts.getPts());
				
				insertRankings.executeUpdate();
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
}


