package bots.australia_jarris;

import master.Master;
import util.*;

import java.text.SimpleDateFormat;
import java.util.regex.Pattern;
import java.util.*;

public class Courts_NT extends Master {

	public Courts_NT(Integer firstPage, Integer lastPage) {		
		this();
		firstPageNumber = firstPage;
		lastPageNumber = lastPage;
	}
	
	public Courts_NT() {		
		pProc = new PatternProcessor();
//		writter = new Writter("courts_sa.csv");
//		
//		writter.writeLine("Date, Court, Court Room, Location, Judicial Officer, Participant, Complainant, Charge, Hearing Type, Case #");
		
		
	}	

	public static void main(String[] args) {
		if (args.length == 2) {
			new Courts_NT(Integer.parseInt(args[0]), Integer.parseInt(args[1])).start();
		} else {
			new Courts_NT().start();
		}
		
	}

	@Override
	public void run() {
		
		processAliceSprings();
		
		
		
	}
	
	private SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
	
	private void processAliceSprings() {
		writter = new Writter("courts_nt_alicesprings.csv");
		writter.writeLine("Date,Time,Type,Location,Crt Rm,Defendant,Crt Ref,Matter,Offence");
		
		pProc.addData(1, sdf.format(new Date()));
		pProc.addData(4, "Alice Springs");
		
		// get todays data for Alice Springs
		System.out.println("Processing Alice Springs today...");
		String pageData = fetchPageContent("http://www.nt.gov.au/justice/mctlist/today/crim/ras.html");
		extractDataFromText(pageData);
		
		// get tomorrows data for Alice Springs
		Date tomorrow = new Date();
		Calendar cal = Calendar.getInstance();
		cal.setTime(tomorrow);
		cal.add(Calendar.DAY_OF_YEAR, 1);
		tomorrow = cal.getTime();
		pProc.addData(1, sdf.format(tomorrow));
		System.out.println("Processing Alice Springs tomorrow...");
		pageData = fetchPageContent("http://www.nt.gov.au/justice/mctlist/tomorrow/crim/ras.html");
		extractDataFromText(pageData);
		
		writter.close();
		
		/* A sad malo Darvin*/
		
		writter = new Writter("courts_nt_darwin.csv");
		writter.writeLine("Date,Time,Type,Location,Crt Rm,Defendant,Crt Ref,Matter,Offence");
		
		pProc.addData(1, sdf.format(new Date()));
		pProc.addData(4, "Darwin");
		
		// get todays data for Darwin
		System.out.println("Processing Darwin today...");
		pageData = fetchPageContent("http://www.nt.gov.au/justice/mctlist/today/crim/rnp.html");
		extractDataFromText(pageData);
		
		// get tomorrows data for Darwin
		tomorrow = new Date();
		cal = Calendar.getInstance();
		cal.setTime(tomorrow);
		cal.add(Calendar.DAY_OF_YEAR, 1);
		tomorrow = cal.getTime();
		pProc.addData(1, sdf.format(tomorrow));
		System.out.println("Processing Darwin tomorrow...");
		pageData = fetchPageContent("http://www.nt.gov.au/justice/mctlist/tomorrow/crim/rnp.html");
		extractDataFromText(pageData);
		
		writter.close();
		
		/* A sad malo Katherine*/
		
		writter = new Writter("courts_nt_katherine.csv");
		writter.writeLine("Date,Time,Type,Location,Crt Rm,Defendant,Crt Ref,Matter,Offence");
		
		pProc.addData(1, sdf.format(new Date()));
		pProc.addData(4, "Katherine");
		
		// get todays data for Katherine
		System.out.println("Processing Katherine today...");
		pageData = fetchPageContent("http://www.nt.gov.au/justice/mctlist/today/crim/rka.html");
		extractDataFromText(pageData);
		
		// get tomorrows data for Katherine
		tomorrow = new Date();
		cal = Calendar.getInstance();
		cal.setTime(tomorrow);
		cal.add(Calendar.DAY_OF_YEAR, 1);
		tomorrow = cal.getTime();
		pProc.addData(1, sdf.format(tomorrow));
		System.out.println("Processing Katherine tomorrow...");
		pageData = fetchPageContent("http://www.nt.gov.au/justice/mctlist/tomorrow/crim/rka.html");
		extractDataFromText(pageData);
		
		writter.close();
		
	}
	
	Pattern firstWordPat = Pattern.compile("(\\w+)");
	Pattern defendantPat = Pattern.compile("([A-Z]{2,}\\s.+?)\\s{3}");
	Pattern timePat = Pattern.compile("(\\d{8})\\s+(.+?(?:AM|PM|NOON))\\s+(.+?)\\s+");

	private void extractDataFromText(String text) {
		String lines [] = text.split("\n");
		String caseType = "";
		
		for (int i = 0; i < lines.length; i++) {
			String line = lines[i];
			
			if (line.contains("</pre>")) break;
			
			// ispod je ime tipa slucaja
			if (line.contains("==============================     ")) {
				caseType = lines[++i].trim();
				pProc.addData(3, caseType);
				pProc.addData(8, "");
				i++;
				continue;
			}
			
			// teraj dok ne nadjes prvi tip slucaja
			if (caseType.equals("")) continue;
			
			if (line.trim().equals("")) continue;
			
			if (caseType.equals("Domestic Violence")) {
				if (line.contains("Applicant") || line.contains("Protected Person")) {
					String firstWord = findInString(line, firstWordPat);
					if(firstWord.matches(".*\\d.*")){
						pProc.addData(5, firstWord);
					} else{
						pProc.addData(5, "");
					}					
					
					line = lines[++i];
					String defendant = findInString(line, defendantPat);
					pProc.addData(6, defendant);
					
					line = lines[++i];
					String [] parts = findGroupsInString(line, timePat, 3);
					pProc.addData(2, parts[1]);
					pProc.addData(7, parts[0]);
					pProc.addData(8, parts[2]);
					
					pProc.processPatterns("", writter); 
					writter.writeLine("");
					continue;
				}
			}
			
			if (caseType.equals("Criminal")) {
				
				String firstWord = findInString(line, firstWordPat);
				if(firstWord.matches(".*\\d.*")){
					pProc.addData(5, firstWord);
				} else{
					pProc.addData(5, "");
				}
				
				String defendant = "";
				if (line.matches(".*\\d{8}.*")) { // nema imena
					
				} else {
					defendant = findInString(line, defendantPat);
					line = lines[++i];
				}
				
				pProc.addData(6, defendant);				
				
				String [] parts = findGroupsInString(line, timePat, 3);
				pProc.addData(2, parts[1]);
				pProc.addData(7, parts[0]);
				pProc.addData(8, parts[2]);
				
				i+=2;
				line = lines[i];
				
				if (line.trim().length() > 0 && Character.isDigit(line.trim().charAt(0))) {
					StringBuilder sb = new StringBuilder();
					while (true) {
						sb.append(line.trim()).append(";");
												
						line = lines[++i];
						if (line.trim().equals("")) {
							sb.deleteCharAt(sb.length()-1);
							break;
						}
					}
					
					pProc.addData(8, sb.toString());
					pProc.processPatterns("", writter);
					
				} else {
					i -= 1;
					pProc.processPatterns("", writter);
					continue;
				}					
				
				writter.writeLine("");
				continue;
			}
			
			if (caseType.equals("Personal Violence")) {
				
				String firstWord = findInString(line, firstWordPat);
				if(firstWord.matches(".*\\d.*")){
					pProc.addData(5, firstWord);
				} else{
					pProc.addData(5, "");
				}
				
				String defendant = findInString(line, defendantPat);
				pProc.addData(6, defendant);
				
				line = lines[++i];
				String [] parts = findGroupsInString(line, timePat, 3);
				pProc.addData(2, parts[1]);
				pProc.addData(7, parts[0]);
				pProc.addData(8, parts[2]);
								
				pProc.processPatterns("", writter);				
				writter.writeLine("");
				continue;
			}
			
		}
		
	}

	@Override
	public void write (String data) {
		
	}
	
}


