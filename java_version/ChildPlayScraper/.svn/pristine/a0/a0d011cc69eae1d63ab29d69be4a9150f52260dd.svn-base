package bots;

import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import master.Master;
import util.*;

public class PaginasAmarillas extends Master {
	
	private ArrayList<String> categories = new ArrayList<String>();
	private String catLetter = "";
	private Pattern catPattern;
	private Pattern adWrapPattern;
	private Pattern localityPattern;
	private Pattern regionPattern;

	public PaginasAmarillas() {		
		
		Properties properties = new Properties();
		try {
			properties.load(new FileReader("props.txt"));
			catLetter = properties.getProperty("letter");
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		requestDelay = 1000;
		
		writter = new Writter("paginas" + catLetter + ".csv");
		writter.writeLine("Category,Name,Street,Post Code,City,Website,Phone,EMail");
		
		pProc = new PatternProcessor();
		
		firstPageNumber = 1;
		pageIncrement = 1;
		catPattern = Pattern.compile("<li><a onclick.+?href=\"(.+?)\"><span>(.+?)</");
		paginationPattern = Pattern.compile("<a class=\"a-siguiente\"");
		
		adWrapPattern = Pattern.compile("m-results-business-header(.+?)m-results-business-expanded", Pattern.DOTALL);
		
		pProc.addPattern(2, Pattern.compile("<span itemprop=\"name\">(.+?)<"));
		pProc.addPattern(3, Pattern.compile("<span itemprop=\"streetAddress\">(.+?)<"));
		pProc.addPattern(4, Pattern.compile("<span itemprop=\"postalCode\">(.+?)<"));
		localityPattern = Pattern.compile("<span itemprop=\"addressLocality\".*?>(.+?)<");
		regionPattern = Pattern.compile("<span class=\"region\">(.+?)<");
		pProc.addPattern(6, Pattern.compile("<a itemprop=\"url\".+?href=\"(.+?)\"", Pattern.DOTALL));
		pProc.addPattern(7, Pattern.compile("data-single-phone>(.+?)<"));
		pProc.addPattern(8, Pattern.compile("emailus\\?businessEmail=(.+?)\\&"));
		
		pProc.addReplacement(5, "&#xD1;", "Ã‘");
		pProc.addReplacement(8, "%40", "@");
		

	}		

	public static void main(String[] args) {		
		new PaginasAmarillas().start();
	}

	@Override
	public void run() {
		
		incrementPartOneURL = "http://www.paginasamarillas.es/az_"+catLetter+"_";
		typeOneProcessingSmall();
		
		paginationPattern = Pattern.compile("li class=\"last\"");
		
		int catNum = categories.size();
		int curCat = 1;
		
		for (String category : categories) {
			String parts[] = category.split("~");
			
			System.out.println(curCat++ + "/" + catNum + " - Category: " + parts[1]);
			
			incrementPartOneURL = parts[0];
			incrementPartTwoURL = "?od=comentarios";
			firstPageNumber = 1;
			pProc.addData(1, parts[1]);
			typeOneProcessing();
			
		}
		
		
	}
	
	protected void typeOneProcessingSmall() {
		paginationURL = null;
		detailsPageURL = null;
		String pageHtml = null;

		Matcher paginationMatcher;
		Matcher urlMatcher;

		mainLoop: for (int i = firstPageNumber; i <= lastPageNumber; i += pageIncrement) {
			paginationURL = incrementPartOneURL + formParam + formValue + pageNumberParam + i + incrementPartTwoURL;
			pageHtml = getHtml(paginationURL);
			
		//	System.out.println(pageHtml);

			if (pageHtml != null) {
				System.out.println("-Pagination page: " + paginationURL);
				errorCount = 0;
	
				urlMatcher = catPattern.matcher(pageHtml);
				while (urlMatcher.find()) {
					detailsPageURL = urlMatcher.group(1);
					if (!detailsPageURL.startsWith("http:")) {
						detailsPageURL = baseURL + detailsPageURL;
					}

					detailsPageURL = fixURL(detailsPageURL);
					
					categories.add(detailsPageURL.substring(0, detailsPageURL.length()-1) + "~" + urlMatcher.group(2));
										
					
				}
				
				sleep(requestDelay);
				
				paginationMatcher = paginationPattern.matcher(pageHtml);
				if (!paginationMatcher.find()) {
					if (paginationCheckTime != 0) {
					//	System.out.println("Last pagination check for " + webSiteID + " in progress ...");
						sleep(paginationCheckTime);

						pageHtml = getHtml(paginationURL);
						if (pageHtml == null) {
							break;
						}

						paginationMatcher = paginationPattern.matcher(pageHtml);
						if (!paginationMatcher.find()) {
							break;
						} else {
							i -= pageIncrement;
						}
					} else {
						break;
					}
				}
			}
		}
	}
	
	protected void typeOneProcessing() {
		paginationURL = null;
		detailsPageURL = null;
		String pageHtml = null;

		Matcher paginationMatcher;
		Matcher urlMatcher;

		mainLoop: for (int i = firstPageNumber; i <= lastPageNumber; i += pageIncrement) {
			paginationURL = incrementPartOneURL + formParam + formValue + pageNumberParam + i + incrementPartTwoURL;
			pageHtml = getHtml(paginationURL);
			
		//	System.out.println(pageHtml);

			if (pageHtml != null) {
				System.out.println("-Pagination page: " + paginationURL);
		
				urlMatcher = adWrapPattern.matcher(pageHtml);
				while (urlMatcher.find()) {
					
					String data = urlMatcher.group(1);
					
					write(data);
					
				}
				
				sleep(requestDelay);
				
				paginationMatcher = paginationPattern.matcher(pageHtml);
				if (!paginationMatcher.find()) {
					if (paginationCheckTime != 0) {
					//	System.out.println("Last pagination check for " + webSiteID + " in progress ...");
						sleep(paginationCheckTime);

						pageHtml = getHtml(paginationURL);
						if (pageHtml == null) {
							break;
						}

						paginationMatcher = paginationPattern.matcher(pageHtml);
						if (!paginationMatcher.find()) {
							break;
						} else {
							i -= pageIncrement;
						}
					} else {
						break;
					}
				}
			}
		}
	}
	
	
	
	@Override
	public void write (String data) {
		
		ArrayList<String> addresses = Patterns.findAllInString(data, localityPattern);
		String region = Patterns.findInString(data, regionPattern);
		
		String addRegion = Utils.joinStringFromArray(addresses, " ") + " " + region;
		pProc.addData(5, addRegion);
		
		pProc.processPatterns(data, writter);
	}
	
}


