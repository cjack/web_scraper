package bots;

import master.Master;
import util.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.*;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.GetMethod;

public class P4PShoes extends Master {

	private int addPrice;
	private Writter writter2;
	
	public P4PShoes(Integer firstPage, Integer lastPage) {		
		this();
		firstPageNumber = firstPage;
		lastPageNumber = lastPage;
	}
	
	public P4PShoes() {		
		loadPatike();
		writter = new Writter("shoes_output_temp.csv");
		//writter2 = new Writter("duplicates.csv");
	//	writter.writeLine("InventoryAction,Site,SellerSKU,Location,Location Priority,Title,Condition,Quantity,Price,Product ID,Product Type,ItemWeight,Group Name,Cost,Price (default),Price (floor),Price (ceiling),MAP Price,Price (retail),Pricing Name,Vendor Name,Model Number,Brand,Attribute1,MinListing Buffer,MaxListing Buffer");
		//writter2.writeLine("InventoryAction,Site,SellerSKU,Location,Location Priority,Title,Condition,Quantity,Price,Product ID,Product Type,ItemWeight,Group Name,Cost,Price (default),Price (floor),Price (ceiling),MAP Price,Price (retail),Pricing Name,Vendor Name,Model Number,Brand,Attribute1,MinListing Buffer,MaxListing Buffer");

		pProc = new PatternProcessor();
		firstPageNumber = 1;
		pageIncrement = 1;
		
		Properties props = new Properties();
		
		try {
			props.load(new FileReader("p4p_settings.txt"));		
			addPrice = Integer.parseInt(props.getProperty("addPrice"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		incrementPartOneURL = "http://p4pshoes.com/collections/all?page=";
		
		pProc.addData(1, "");
		pProc.addData(2, "");
		pProc.addData(4, "");
		pProc.addData(5, "");
		pProc.addData(7, "");		
		pProc.addData(10, "");
		pProc.addData(11, "");
		pProc.addData(12, "");
		pProc.addData(13, "");
		pProc.addData(15, "");
	}	
	
	private HashMap<String, CSVRecord> patikeMap = new HashMap<String, CSVRecord>();

	private void loadPatike() {
		try {
			Reader in = new FileReader("shoes_output.csv");
	    	Iterable<CSVRecord> records = CSVFormat.EXCEL.parse(in);
	    	int count = 0;
	    	for (CSVRecord record : records) {
	    		count++;
	    		if (count <= 1) continue;
	    	    String theCell = record.get(2);
	    	    patikeMap.put(theCell, record);	    			    	    
	    	}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	public static void main(String[] args) {
		if (args.length == 2) {
			new P4PShoes(Integer.parseInt(args[0]), Integer.parseInt(args[1])).start();
		} else {
			new P4PShoes().start();
		}
		
	}

	@Override
	public void run() {

		typeOneProcessing();
		writter.close();
		
		mergeCSVs();
		System.out.println("FINISHED");
		
	}
	
	private void mergeCSVs() {
		ArrayList<String> lines = Files.loadListFromFile("shoes_output_temp.csv");
		writter = new Writter("shoes_output.csv");		
		writter.writeLine("InventoryAction,Site,SellerSKU,Location,Location Priority,Title,Condition,Quantity,Price,Product ID,Product Type,ItemWeight,Group Name,Cost,Price (default),Price (floor),Price (ceiling),MAP Price,Price (retail),Pricing Name,Vendor Name,Model Number,Brand,Attribute1,MinListing Buffer,MaxListing Buffer");
		
		for (String line : lines) {
			writter.writeLine(line);
		}
				
		for (String key : patikeMap.keySet()) {
			CSVRecord rec = patikeMap.get(key);
			String title = rec.get(5);
			
			pProc.addData(3, key);
			pProc.addData(6, title);
			pProc.addData(8, "0");
			pProc.addData(9, rec.get(8));
			pProc.addData(14, rec.get(13));
			pProc.addData(16, rec.get(15));
			
			pProc.processPatterns("", writter);
		}
		
		writter.close();
	}

	private Pattern productWrpPat = Pattern.compile("<article class=\"category-article category-grid col-sm-4\">(.+?)</article>", Pattern.DOTALL);
	private Pattern productUrlPattern = Pattern.compile("<h2 ><a href=\"(.+?)\"");
	private Pattern namePattern = Pattern.compile("<div class=\"product-details\">\\s+<h1>(.+?)<");
	private Pattern variantsWrapPattern = Pattern.compile("\"variants\":(.+?}])");
	private Pattern productDetailsPattern = Pattern.compile("\"title\":\"(.+?)\",.+?price\":(.+?),.+?available\":(.+?),\"sku\":\"(.+?)\"");
	private Pattern descPattern = Pattern.compile("<div class=\"description\">(.+?)</div>",Pattern.DOTALL);
	
	protected void typeOneProcessing() {
		paginationURL = null;
		detailsPageURL = null;
		String pageHtml = null;
		String detailsPageHtml = null;

		int count = 1;
		
	//	HashSet<String> skuSet = new HashSet<String>();
		
		for (int i = firstPageNumber; i <= lastPageNumber; i += pageIncrement) {
			paginationURL = incrementPartOneURL + formParam + formValue + pageNumberParam + i + incrementPartTwoURL;
			pageHtml = fetchPageContent(paginationURL);
			
		//	System.out.println(pageHtml);

			if (pageHtml != null) {
				
				ArrayList<String> productsWraps = findAllInString(pageHtml, productWrpPat);
				
				if (productsWraps.size() < 2) break;
				System.out.println("Page " + i);
				
				for (String productWrap : productsWraps) {
					String pageUrl = findInString(productWrap, productUrlPattern);
					if (pageUrl.equals("")) continue;
					
					if (!productWrap.toLowerCase().contains("brand new")) {
						continue;
					}
					
					System.out.println("\t" + count++ + ". Fetching: " + "http://p4pshoes.com" + pageUrl);
					
					detailsPageHtml = fetchPageContent("http://p4pshoes.com" + pageUrl);
					
					String description = findInString(detailsPageHtml, descPattern);
					
					if (!description.toLowerCase().contains("brand new") || !description.toLowerCase().contains("original box")) {
						continue;
					}
					
					String productName = findInString(detailsPageHtml, namePattern);
					String variantsWrap = findInString(detailsPageHtml, variantsWrapPattern);
				//	System.out.println(variantsWrap);
				
					ArrayList<String []> variants = findAllGroupsInString(variantsWrap, productDetailsPattern);
					for (String variant[] : variants) {
						String title = productName + ", Size " + variant[0];
						String price = "0";
						if (variant[1].length() > 2) {
							price = variant[1].substring(0, variant[1].length() - 2);
						}
						String available = variant[2];
						String sku = variant[3];
						
//						if (skuSet.contains(sku)) {
//							
//							String first4 = title.substring(0, 4);
//							String last8 = title.substring(title.length() - 9);
//							
//							String newSku = sku + "-" + first4 + "-" + last8;
//							newSku = newSku.replaceAll("\\s+", "");
//							newSku = newSku.replaceAll(",", "");
//							
//							double priceD = Double.parseDouble(price);
//							String priceS = String.format("%.2f", priceD);
//							
//							double price40 = priceD * 1.4 + addPrice;
//							if (price40 == (double)addPrice) price40 = 0;
//							String price40S = String.format("%.2f", price40);
//							
//							pProc.addData(3, newSku);
//							pProc.addData(6, title);
//							pProc.addData(8, available.equals("true")?"1":"0");
//							pProc.addData(9, "="+price40S);
//							pProc.addData(14, "="+priceS);
//							pProc.addData(16, "="+price40S);
//							
//							pProc.processPatterns(detailsPageHtml, writter);
//							
//							continue;
//						}
//											
//						skuSet.add(sku);
						
						double priceD = Double.parseDouble(price);
						String priceS = String.format("%.2f", priceD);
						
						double price40 = priceD * 1.4 + addPrice;
						if (price40 == (double)addPrice) price40 = 0;
						String price40S = String.format("%.2f", price40);
						
//						pProc.addData(3, sku);
//						pProc.addData(6, title);
//						pProc.addData(8, available.equals("true")?"1":"0");
//						pProc.addData(9, "="+price40S);
//						pProc.addData(14, "="+priceS);
//						pProc.addData(16, "="+price40S);
//						
//						pProc.processPatterns(detailsPageHtml, writter);
						
						String first4 = title.substring(0, 4);
						String last8 = title.substring(title.length() - 9);
						
						String newSku = sku + "-" + first4 + "-" + last8;
						newSku = newSku.replaceAll("\\s+", "");
						newSku = newSku.replaceAll(",", "");
						newSku = newSku.replaceAll("'", "");
						
						pProc.addData(3, newSku);
						pProc.addData(6, title);
						pProc.addData(8, available.equals("true")?"1":"0");
						pProc.addData(9, "="+price40S);
						pProc.addData(14, "="+priceS);
						pProc.addData(16, "="+price40S);

						pProc.processPatterns(detailsPageHtml, writter);
						
						if (patikeMap.containsKey(newSku)) {
							patikeMap.remove(newSku);
						}
						
						
					}
					
					sleep(requestDelay);
					
				}
				
				sleep(requestDelay);
				
//				paginationMatcher = paginationPattern.matcher(pageHtml);
//				if (!paginationMatcher.find()) {
//					break;					
//				}
				
			} 
		}
	}
	
	public String fetchPageContent(String fromPage) {
		
		if (httpClient == null) {
			httpClient = new HttpClient();
			httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(60000); 
			httpClient.getHttpConnectionManager().getParams().setSoTimeout(60000);
		}
		
		int retryCount = 0;
			
		while (retryCount <= 5) {
			retryCount++;
			try {			
				GetMethod get = new GetMethod(fromPage);
				get.setRequestHeader("User-Agent", "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.0.8) Gecko/2009032712 Ubuntu/8.10 (intrepid) Firefox/3.0.8");
				httpClient.executeMethod(get);
				
				StringBuilder sb = new StringBuilder();
				String line;
				BufferedReader in = new BufferedReader(new InputStreamReader(get.getResponseBodyAsStream(), "utf-8"));
				while ((line = in.readLine()) != null) {
					sb.append(line).append("\n");
				}
				
				in.close();
				get.releaseConnection();
				
				return sb.toString();				
			} catch (Exception e) {
				sleep(5000);
				continue;
			}
		}
		
		return null;
	}
	
	@Override
	public void write (String data) {
		
	}
	
}


