package bots;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import master.Master;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.GetMethod;

import proxy.MultithreadedProxyFetcher;
import proxy.ProxyFetcher;
import util.PatternProcessor;
import util.Sha1Hash;
import util.Writter;

public class Yelp extends Master {

	private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	ProxyFetcher proxyFetcher;
	private String [] states;
	private String [] categories;
	private String [] subCategories;
	private boolean allOnProxies;
	private boolean multithreaded;
	private Pattern titlePattern;
	private Pattern postCodePattern;
	
	private MultithreadedProxyFetcher mpFetcher;
	
	public Yelp() {	
		
		Properties properties = new Properties();
		try {
			properties.load(new FileReader("yelpProps.txt"));
			states = properties.getProperty("states").split(",");
			categories = properties.getProperty("categories").split(",");
			subCategories = properties.getProperty("subcategories").split(",");
			firstPageNumber = Integer.parseInt(properties.getProperty("firstPage"));
			allOnProxies = Boolean.parseBoolean(properties.getProperty("fullOnProxies"));
			multithreaded = Boolean.parseBoolean(properties.getProperty("multithreaded"));
		} catch (Exception e) {
			e.printStackTrace();
		}
				
		proxyFetcher = new ProxyFetcher();
		pProc = new PatternProcessor();
//		writter = new Writter("yellowout.csv");
		
		baseURL = "http://www.yelp.com";
		
		firefoxMask = true;
		
		pageIncrement = 10;
		requestDelay = 1000;
		
		lastPageNumber = 1000;
		
		pProc.addPattern(1, Pattern.compile("<div class=\"media-title\">\\s+<a class=\"biz-name\".+?>(.+?)<"));
		pProc.addPattern(2, Pattern.compile("<span itemprop=\"streetAddress\">(.+?)<"));
		pProc.addPattern(3, Pattern.compile("<span class=\"neighborhood-str-list\">\\s+(.+?)\\s+<"));
		pProc.addPattern(4, Pattern.compile("<span itemprop=\"addressLocality\">(.+?)<"));
		pProc.addPattern(5, Pattern.compile("<span itemprop=\"addressRegion\">(.+?)<"));
		pProc.addPattern(6, Pattern.compile("<span itemprop=\"postalCode\">(.+?)<"));
		pProc.addPattern(7, Pattern.compile("itemprop=\"telephone\">\\s+(.+?)\\s+<"));		
		
		titlePattern = Pattern.compile("<title>(.+?)</title>");
				
		detailsPagePattern = Pattern.compile("class=\\\\\"biz-name\\\\\" href=\\\\\"(/biz/.+?)\\\\\"");
		paginationPattern = Pattern.compile("biz-name");
		
	}
	
	protected void typeOneProcessing() {
		paginationURL = null;
		detailsPageURL = null;
		String pageHtml = null;
		String detailsPageHtml = null;
		String carURLHash = null;
		int errorDelay = initialErrorDelay;

		Matcher paginationMatcher;
		Matcher urlMatcher;
		HashSet<String> carURLs = new HashSet<String>();

		mainLoop: for (int i = firstPageNumber; i <= lastPageNumber; i += pageIncrement) {
			paginationURL = incrementPartOneURL + formParam + formValue + pageNumberParam + i + incrementPartTwoURL;			
			
		//	pageHtml = fetchPageContent(paginationURL);
			pageHtml = proxyFetcher.getHtmlWithProxy(paginationURL, "search_results");
						
			int duplicateCount=0;
			
		//	System.out.println(pageHtml);

			if (pageHtml != null) {				
				System.out.println("-Pagination page: " + paginationURL);
				errorCount = 0;
				errorDelay = initialErrorDelay;
				urlMatcher = detailsPagePattern.matcher(pageHtml);
				
				while (urlMatcher.find()) {
					
					if (multithreaded) {
						while (true) {
							String html = mpFetcher.getHtml();
							if (html == null || html.equals("")) break;
							
							write(html);
						}
					}
					
					detailsPageURL = urlMatcher.group(1);
					if (!detailsPageURL.startsWith("http:")) {
						detailsPageURL = baseURL + detailsPageURL;
					}

					detailsPageURL = fixURL(detailsPageURL);
					System.out.println("\t"+ detailsPageURL);
					carURLHash = Sha1Hash.SHA1(detailsPageURL);

					if (carURLs.contains(carURLHash)) {
						System.out.println("Contains " + detailsPageURL);
						duplicateCount++;
						if (duplicateCount > 25) {
							break mainLoop;
						}
						continue;
					} else {						
						carURLs.add(carURLHash);
					}
					
					if (allOnProxies) {
						if (multithreaded) {
							mpFetcher.addUrl(detailsPageURL);
							continue;
						} else {
							detailsPageHtml = proxyFetcher.getHtmlWithProxy(detailsPageURL, "YP.com");
						}
					} else {
						detailsPageHtml = getHtml(detailsPageURL);
					}
					

					if (detailsPageHtml != null) {
						write(detailsPageHtml);
						recordCount++;
						newRecordsCount++;						
					}
					
					
					sleep(requestDelay);
				}
				paginationMatcher = paginationPattern.matcher(pageHtml);
				if (!paginationMatcher.find()) {
					break;					
				}
			} 
		}		

	}
	
	public String fetchPageContent(String fromPage) {
		try {
			if (httpClient == null) {
				httpClient = new HttpClient();
			}
			
			GetMethod get = new GetMethod(fromPage);
			
			get.setRequestHeader("Host", "www.yelp.com");
			get.setRequestHeader("Connection", "www.yelp.com");
			get.setRequestHeader("Accept-Encoding", "gzip, deflate");
			get.setRequestHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
			get.setRequestHeader("Accept-Language", "sr,sr-RS;q=0.8,sr-CS;q=0.6,en-US;q=0.4,en;q=0.2");
			get.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0");
			
			httpClient.executeMethod(get);
			
			StringBuilder sb = new StringBuilder();
			String line;
			BufferedReader in = new BufferedReader(new InputStreamReader(get.getResponseBodyAsStream(), "utf-8"));
			while ((line = in.readLine()) != null) {
				sb.append(line).append("\n");
			}
			
			in.close();
			get.releaseConnection();
			
			return sb.toString();			
		} catch (Exception e) {
			System.err.println("#### GREÅ KA ZA: " + fromPage + " ####");
			e.printStackTrace();			
			return null;
		}
	}
		
	public void write(String pageHtml) {		
		pProc.processPatterns(pageHtml, writter);
	}
	
	public static void main(String[] args) {		
		new Yelp().run();
	}
	
	
	
	public void run() {
	//	writter = new Writter("yellow_chichago_massage.csv");
		for (String state : states) {
			
			if (multithreaded) {
				mpFetcher = new MultithreadedProxyFetcher(pProc, writter, proxyFetcher);
				mpFetcher.start();
			}
			
			writter = new Writter("yelp_massage.csv");
			writter.writeLine("Name,Address Line 1,Address Line 2,City,State,Zip,Phone");
			
			for (String category : categories) {
				
				if (subCategories.length == 0) { // no subcategories
					System.out.println("Category: " + category + ", State: " + state);
										
					incrementPartOneURL = "http://www.yelp.com/search/snippet?find_desc="+category+"&find_loc="+state.trim()+"&start="; 
					incrementPartTwoURL = "&request_origin=user";
					
					typeOneProcessing();
				} else {
					for (String subCategory : subCategories) {
						System.out.println("Category: " + category + ", SubCategory: " + subCategory + ", State: " + state);
						
						incrementPartOneURL = "http://www.yelp.com/search/snippet?find_desc="+category+"&find_loc="+state.trim()+"&start=";
						incrementPartTwoURL = "&cflt="+subCategory+"&request_origin=user";
						
						typeOneProcessing();
					}					
				}				
			}
			if (multithreaded) {
				mpFetcher.paginationsDone();
				while (true) {
					String html = mpFetcher.getHtml();
					if (html == null) break;
					if (html.equals("")) {
						sleep(3000);
						continue;
					}
					
					write(html);
				}
				
			} 
			
		//	writter.close();
			
			firstPageNumber = 1;
		}
		
		writter.close();
		processingEnd();
		
	}

}
