package bots.australia_jarris;

import master.Master;
import util.*;

import java.io.FileReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.text.SimpleDateFormat;
import java.util.regex.Pattern;
import java.util.*;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.CSVRecord;

public class CourtsSA extends Master {

	private SimpleDateFormat sdfFrom = new SimpleDateFormat("EEEE d MMMM yyyy");
	private SimpleDateFormat sdfTo = new SimpleDateFormat("yyyy/MM/dd");
	
	public CourtsSA(Integer firstPage, Integer lastPage) {		
		this();
		firstPageNumber = firstPage;
		lastPageNumber = lastPage;
	}
	
	private Pattern datePartsPattern = Pattern.compile("(\\w+)\\s+(\\d+)(?:th|st|nd|rd)\\s+([\\w\\s]+\\d{4})");
	private Pattern datePattern = Pattern.compile("<strong>Date: </strong>(.+?)<");
	private Pattern participantPattern = Pattern.compile("<strong>Participant: </strong>(.+?)<");
	
	
	public CourtsSA() {		
		pProc = new PatternProcessor();
		writter = new Writter("courts_sa.csv");
		
		writter.writeLine("State,Date,Listing Type,Court,Location,Court Room,Case/Title/Party,Case/File,Additional Info");
		
		pProc.addData(1, "SA");
		pProc.addPattern(3, Pattern.compile("<strong>Hearing Type: </strong>(.+?)<"));		
		pProc.addPattern(4, Pattern.compile("<strong>Court: </strong>(.+?)<"));		
		pProc.addPattern(5, Pattern.compile("<strong>Location: </strong>(.+?)<"));
		pProc.addPattern(6, Pattern.compile("<strong>Court Room: </strong>(.+?)<"));
	//	pProc.addPattern(7, Pattern.compile("<strong>Participant: </strong>(.+?)<"));		
		pProc.addPattern(8, Pattern.compile("<strong>Case #: </strong>(.+?)<"));
		pProc.addPattern(9, Pattern.compile("<strong>Charge: </strong>(.+?)<"));
	}	

	public static void main(String[] args) {
		if (args.length == 2) {
			new CourtsSA(Integer.parseInt(args[0]), Integer.parseInt(args[1])).start();
		} else {
			new CourtsSA().start();
		}
		
	}
	
	private String [] toRemoveList = new String [] {"suppressed","pty","ltd","limited","corporation","body corp"};

	@Override
	public void run() {
		String html = fetchPageContent("http://www.courts.sa.gov.au/CaseLists/Pages/Criminal-Cases.aspx");
		
		ArrayList<String> allRecords = findAllInString(html, Pattern.compile("<a href='(lightbox.aspx.+?)'>"));
		
		int count = 1;
		
		mainFor:
		for (String record : allRecords) {
			String url = "http://www.courts.sa.gov.au/CaseLists/Pages/" + record;
			System.out.println(count++ + ". Processing " + url);
			
		//	if (count == 20) break;
			
			String pageHtml = fetchPageContent(url);
			
			String participant = findInString(pageHtml, participantPattern);
			
			for (String toRem : toRemoveList) {
				if (participant.contains(toRem)) {
					System.out.println("Contains: " + toRem + " - Ignoring case");
					continue mainFor;
				}
			}
			
			pProc.addData(7, participant);
			
			String date = findInString(pageHtml, datePattern);
			
			try {				
				String [] dateParts = findGroupsInString(date, datePartsPattern, 3);
				String newDate = dateParts[0] + " " + dateParts[1] + " " + dateParts[2];
				String formatedDate = sdfTo.format(sdfFrom.parse(newDate));
				pProc.addData(2, "'"+formatedDate);
			} catch (Exception e) {
				pProc.addData(2, date);
			}			
			
			pProc.processPatterns(pageHtml, writter);
		}
		
		writter.close();
		
		orderList();
	}	
	
	private void orderList() {
		ArrayList<CSVRecord> recordsList = new ArrayList<CSVRecord>();
		try {
			Reader in = new FileReader("courts_sa.csv");
	    	Iterable<CSVRecord> records = CSVFormat.EXCEL.parse(in);
	    	CSVRecord headline = null;
	    	int count = 0;
	    	
	    	
	    	for (CSVRecord record : records) {
	    		count++;
	    		
	    		if (count == 1) {
	    			headline = record;
	    			continue;
	    		}
	    		
	    	    recordsList.add(record);
	    	}
	    	
	    	Collections.sort(recordsList, new Comparator<CSVRecord>() {
	    	    public int compare(CSVRecord obj1, CSVRecord obj2) {
	    	        if (obj1.get(6).length() > obj2.get(6).length()) {
	    	        	return 1;
	    	        } else if (obj1.get(6).length() < obj2.get(6).length()) {
	    	        	return -1;
	    	        } else {
	    	        	return 0;
	    	        }
	    	    }
	    	});
	    	
	    	in.close();
	    	
	    	CSVPrinter printer = new CSVPrinter(
        		    new PrintWriter("courts_sa.csv"),
        		    CSVFormat.DEFAULT
        		);
	    	
	    	printer.printRecord(headline);
	    	for (CSVRecord rec : recordsList) {
	    		printer.printRecord(rec);
	    	}
	    	
	    	printer.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		
	}

	@Override
	public void write (String data) {
		
	}
	
}


