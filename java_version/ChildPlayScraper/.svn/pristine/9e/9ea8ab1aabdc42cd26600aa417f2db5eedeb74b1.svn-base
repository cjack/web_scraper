package bots;

import master.Master;
import util.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.util.regex.Pattern;
import java.util.*;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.cookie.CookiePolicy;
import org.apache.commons.httpclient.methods.GetMethod;

public class WhiteCanada441 extends Master {

	private String link;
	private String outputFile;
	
	public WhiteCanada441(Integer firstPage, Integer lastPage) {		
		this();
		firstPageNumber = firstPage;
		lastPageNumber = lastPage;
	}
	
	public WhiteCanada441() {		
		Properties properties = new Properties();
		try {
			properties.load(new FileReader("411.txt"));			
			firstPageNumber = Integer.parseInt(properties.getProperty("firstPage"));
			link = properties.getProperty("link");
			outputFile = properties.getProperty("outputFile");
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		writter = new Writter(outputFile);
		writter.writeLine("Name,Address,City,State,Zip Code,Telephone");
		
		pProc = new PatternProcessor();
		pProc.addPattern(2, Pattern.compile("<span itemprop=\"streetAddress\">(.+?)<"));
		pProc.addPattern(3, Pattern.compile("<span itemprop=\"addressLocality\">(.+?)<"));
		pProc.addPattern(4, Pattern.compile("<span itemprop=\"addressRegion\">(.+?)<"));
		pProc.addPattern(5, Pattern.compile("<span itemprop=\"postalCode\">(.+?)<"));
		pProc.addPattern(6, Pattern.compile("itemprop=\"telephone\">(.+?)<"));
	}	

	public static void main(String[] args) {
		if (args.length == 2) {
			new WhiteCanada441(Integer.parseInt(args[0]), Integer.parseInt(args[1])).start();
		} else {
			new WhiteCanada441().start();
		}
		
	}
	
	private Pattern namesWrappattern = Pattern.compile("class='drilldown_table_cities'.+?>(.+?)</table>", Pattern.DOTALL);
	private Pattern deepLinkPattern = Pattern.compile("<a href=\"(.+?)\">");
	private Pattern paginationPattern = Pattern.compile("itemprop=\"name\">\\s+<a class=\"styleGU\" href=\"(.+?)\"");

	@Override
	public void run() {
		
		if (link.endsWith("/")) {
			link = link + "p";
		} else {
			link = link + "/p";
		}
		
		while (true) {			
			String mainLinkURL = link + firstPageNumber++;
			System.out.println("Main Link: " + mainLinkURL);
			String mainLink = fetchPageContent(mainLinkURL);
			
			String lastNamesWrap = findInString(mainLink, namesWrappattern);
			
			ArrayList<String> deepLinksList = findAllInString(lastNamesWrap, deepLinkPattern);
			
			for (String deepLink : deepLinksList) {
				
				if (deepLink.endsWith("flname=")) continue;
				
				String url = "https://411.ca" + deepLink;
				System.out.println("\tDeep Link: " + url);
				
				int pageNum = 1;
				
				while (true) {
					String paginationPage = url + "&p=" + pageNum++;
					
					String paginationPageHtml = fetchPageContent(paginationPage);
					
					ArrayList<String> detailsUrls = findAllInString(paginationPageHtml, paginationPattern);
					
					for (String detailsPageLink : detailsUrls) {
						String detailsPage = "https://411.ca" + detailsPageLink;
						System.out.println("\t\tDetails Page Link: " + detailsPage);
						
						String detailsPageHtml = fetchPageContent(detailsPage);
						
						write(detailsPageHtml);
						
						sleep(500);
					}
					
					
					if (detailsUrls.size() < 25) break;
				}
				
				
			}
			
			if (deepLinksList.size() == 0) break;
		}
		
		System.out.println("FINISHED");
	}
	
//	@Override
//	public void run() {
//		
//		
//		if (link.endsWith("/")) {
//			link = link + "p";
//		} else {
//			link = link + "/p";
//		}
//		
//		String mainLinkURL = link + firstPageNumber++;
//		
//		String mainLink = fetchPageContent(mainLinkURL);
//		
//		String lastNamesWrap = findInString(mainLink, namesWrappattern);
//		
//		ArrayList<String> deepLinksList = findAllInString(lastNamesWrap, deepLinkPattern);
//		
//		String whatWeNeed = deepLinksList.get(0);		
//		
//		String url = "https://411.ca" + whatWeNeed;		
//		
//		int pageNum = 1;
//		
//		while (true) {
//			String paginationPage = url + "&p=" + pageNum++;
//			System.out.println("Pagination Page: " + paginationPage);
//			
//			String paginationPageHtml = fetchPageContent(paginationPage);
//			
//			ArrayList<String> detailsUrls = findAllInString(paginationPageHtml, paginationPattern);
//			
//			for (String detailsPageLink : detailsUrls) {
//				String detailsPage = "https://411.ca" + detailsPageLink;
//				System.out.println("\tDetails Page Link: " + detailsPage);
//				
//				String detailsPageHtml = fetchPageContent(detailsPage);
//				
//				write(detailsPageHtml);
//				
//				sleep(500);
//			}
//			
//			
//			if (detailsUrls.size() < 25) break;
//		}			
//		
//		System.out.println("FINISHED");
//	}
	
	public String fetchPageContent(String fromPage) {
		try {
			if (httpClient == null) {
				httpClient = new HttpClient();
				httpClient.getParams().setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);
			}			
			
			GetMethod get = new GetMethod(fromPage);
			get.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/36.0");
			httpClient.executeMethod(get);
			
			StringBuilder sb = new StringBuilder();
			String line;
			BufferedReader in = new BufferedReader(new InputStreamReader(get.getResponseBodyAsStream(), "utf-8"));
			while ((line = in.readLine()) != null) {
				sb.append(line).append("\n");
			}
			
			in.close();
			get.releaseConnection();
			
			return sb.toString();			
		} catch (Exception e) {
			System.err.println("#### GREÅ KA ZA: " + fromPage + " ####");
			e.printStackTrace();			
			return null;
		}
	}
	
	private Pattern firstNameP = Pattern.compile("<span itemprop=\"givenName\">(.+?)<");
	private Pattern lastNameP = Pattern.compile("<span itemprop=\"familyName\">(.+?)<");
	
	@Override
	public void write (String data) {
		String firstName = findInString(data, firstNameP);
		String lastName = findInString(data, lastNameP);
		
		pProc.addData(1, firstName + " " + lastName);
		
		pProc.processPatterns(data, writter);
	}
	
}


