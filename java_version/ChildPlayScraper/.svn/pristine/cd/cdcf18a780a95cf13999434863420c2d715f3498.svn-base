package bots;

import util.*;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.*;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;

public class Mychild extends Thread {

	private Pattern detailsWrapP = Pattern.compile("<div class=\"resultItem \">(.+?)</div>\\s+</li>", Pattern.DOTALL);
	private Writter writter;
	private PatternProcessor pProc;
	
	public Mychild() {		
		writter = new Writter("mychild.csv");
		writter.writeLine("URL,State,Name,Type,Address,Phone,Website,EMail");
		pProc = new PatternProcessor();
		
		pProc.addPattern(3, Pattern.compile("<a href=.+?>(.+?)<"));
		pProc.addPattern(4, Pattern.compile("<span class=\"resultItemServiceType\">(.+?)<"));
		pProc.addPattern(5, Pattern.compile("<div class=\"resultItemDetail\"><span>(.+?)<"));
		pProc.addPattern(6, Pattern.compile("<span class=\"resultItemPadded\">Phone:\\s+(.+?)<"));
		pProc.addPattern(7, Pattern.compile("<a class=\"resultItemPadded\" href=\"(http.+?)\""));
		pProc.addPattern(8, Pattern.compile("<a class=\"resultItemPadded\" href=\"mailto:(.+?)\""));
		
		pProc.addReplacement(2, "\\&amp;", "&");
		
		
	}	

	public static void main(String[] args) {
		new Mychild().start();		
		
	}
	
	private HttpClient httpClient;
	private int firstPageNumber;
	private int pageIncrement;
	private String incrementPartTwoURL;
	private String incrementPartOneURL;
	private String paginationURL;

	@Override
	public void run() {
		String [] states = new String [] {"ACT","NSW","NT","QLD","SA","TAS","VIC","WA"};
		httpClient = new HttpClient();
		
		fetchPageContent("http://ifp.mychild.gov.au/mvc/Search/Advanced");
			
		for (String state : states) {
			System.out.println("Doing state - " + state);
			pProc.addData(2, state);
			PostMethod post = new PostMethod("http://ifp.mychild.gov.au/mvc/Search/SearchChildcare");
			
			post.addParameter("ccAllServices", "true");
			post.addParameter("ccAllServices", "false");
			post.setParameter("ccFeeOnlyServices", "false");
			post.setParameter("ccLocation", state);
			post.setParameter("ccLocationId", "");
			post.setParameter("ccName", "");
			post.setParameter("ccSearchRadius", "0");
			post.setParameter("ccVacancyCasualCareType", "false");
			post.setParameter("ccVacancyPermanentCareType", "false");
			post.setParameter("ccVacancySelectedAgeType", "");
			
			try {
				httpClient.executeMethod(post);
				
//				GetMethod get2 = new GetMethod("http://ifp.mychild.gov.au/mvc/SearchResults/ShowChildCareResults/1/");
//				httpClient.executeMethod(get2);
//				System.out.println(get2.getResponseBodyAsString());
				
				firstPageNumber = 1;
				pageIncrement = 1;
				incrementPartOneURL = "http://ifp.mychild.gov.au/mvc/SearchResults/ShowChildCareResults/";
				incrementPartTwoURL = "/";
				
				typeOneProcessing();
			} catch (Exception e) {
				// TODO: handle exception
			}
			
		}

		
	}
	
	protected void typeOneProcessing() {
		paginationURL = null;
		String pageHtml = null;

		for (int i = firstPageNumber; i <= Integer.MAX_VALUE; i += pageIncrement) {
			paginationURL = incrementPartOneURL + i + incrementPartTwoURL;
			pageHtml = fetchPageContent(paginationURL);
		//	System.out.println();
			
			if (pageHtml != null) {
				ArrayList<String> detailsWraps = findAllInString(pageHtml, detailsWrapP);
				
				for (String detWrap : detailsWraps) {
					write(detWrap);
				}
				
				System.out.println("\t" + paginationURL + " Found Results = " + detailsWraps.size());
				if(detailsWraps.size() < 20) break;
			} else {
				i--;
				System.out.println("Timeout - Trying again");
				continue;				
			}
			
			sleep(2000);
		}
	}
	
	private Pattern urlPattern = Pattern.compile("<a href=\"(.+?)\"");	
	
	public void write (String data) {
		String url = "http://ifp.mychild.gov.au" + findInString(data, urlPattern);
		pProc.addData(1, url);
		
		pProc.processPatterns(data, writter);
	}
	
	public String fetchPageContent(String fromPage) {
		try {
			if (httpClient == null) {
				httpClient = new HttpClient();
				httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(60000); 
				httpClient.getHttpConnectionManager().getParams().setSoTimeout(60000);
			}
			
			GetMethod get = new GetMethod(fromPage);
			httpClient.executeMethod(get);
			
			StringBuilder sb = new StringBuilder();
			String line;
			BufferedReader in = new BufferedReader(new InputStreamReader(get.getResponseBodyAsStream(), "utf-8"));
			while ((line = in.readLine()) != null) {
				sb.append(line).append("\n");
			}
			
			in.close();
			get.releaseConnection();
			
			return sb.toString();			
		} catch (Exception e) {
			System.err.println("#### GREÅ KA ZA: " + fromPage + " ####");
			e.printStackTrace();			
			return null;
		}
	}
	
	public static ArrayList<String> findAllInString(String string, Pattern pattern) {
		ArrayList<String> list = new ArrayList<String>();
		
		Matcher m = pattern.matcher(string);
		while (m.find()) {
			String value = m.group(1).trim();
			list.add(value);
		}
		
		return list;		
	}
	
	public static String findInString(String string, Pattern pattern) {
		Matcher m = pattern.matcher(string);
		while (m.find()) {
			String value = m.group(1).trim();
			return value;
		}
		return "";
	}
	
	protected void sleep(int time) {
		try {
			Thread.sleep(time);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
}


