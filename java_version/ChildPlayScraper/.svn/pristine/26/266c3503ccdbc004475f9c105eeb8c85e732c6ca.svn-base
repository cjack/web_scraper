package bots;

import master.Master;
import util.*;

import java.util.regex.Pattern;
import java.util.*;

public class BarnoneDrinks extends Master {

	public BarnoneDrinks(Integer firstPage, Integer lastPage) {		
		this();
		firstPageNumber = firstPage;
		lastPageNumber = lastPage;
	}
	
	private ArrayList<String> categories;
	private ArrayList<String> listaSlova;
	
	public BarnoneDrinks() {		
		writter = new Writter("barnonedrinks.csv");
		pProc = new PatternProcessor();
		
		pProc.addPattern(1, Pattern.compile("<h1>(.+?)</h1>"));
		pProc.addReplacement(2, "<.+?>", "");
		pProc.addPattern(3, Pattern.compile("property=\"v:instructions\">(.+?)</div>"));
		pProc.addPattern(4, Pattern.compile("<h3>Drink Type:.+?>(.+?)</a>"));
		
		categories = new ArrayList<String>();
		categories.add("http://www.barnonedrinks.com/drinks/by_category/cocktails-2/");
		categories.add("http://www.barnonedrinks.com/drinks/by_category/hot-drinks-1/");
		categories.add("http://www.barnonedrinks.com/drinks/by_category/jello-shots-8/");
		categories.add("http://www.barnonedrinks.com/drinks/by_category/martinis-7/");
		categories.add("http://www.barnonedrinks.com/drinks/by_category/non-alcoholic-3/");
		categories.add("http://www.barnonedrinks.com/drinks/by_category/punches-4/");
		categories.add("http://www.barnonedrinks.com/drinks/by_category/shooters-5/");
		
		listaSlova = new ArrayList<String>();
		
		for(char c = 'a'; c <= 'z'; c++) {
			String s = Character.toString(c);
			listaSlova.add(s);
		}
		
		listaSlova.add("-");
		
		detailsPagePattern = Pattern.compile("<dt><b><a href=\"(.+?)\"");
		
	}	

	public static void main(String[] args) {
		if (args.length == 2) {
			new BarnoneDrinks(Integer.parseInt(args[0]), Integer.parseInt(args[1])).start();
		} else {
			new BarnoneDrinks().start();
		}
		
	}

	@Override
	public void run() {
		for (String category : categories) {
			
			for (String ch : listaSlova) {
				String pageHtml = fetchPageContent(category + ch + ".html");
				System.out.println("Pagination: " + category + ch + ".html");
				
				ArrayList<String> links = findAllInString(pageHtml, detailsPagePattern);
				
				if (links.size() > 0) {
					for (String link : links) {
						String detPageHtml = fetchPageContent("http://www.barnonedrinks.com" + link);
						System.out.println("\thttp://www.barnonedrinks.com" + link);
						
						write(detPageHtml);
						sleep(500);
					}
				}
			}
		}
	}
	
	private Pattern ingreedinetPattern = Pattern.compile("<span typeof=\"v:Ingredient\">(.+?</a>)");
	private Pattern subIngreedientP = Pattern.compile("<span property=\"v:name\">(.+?)</a>");
	
	@Override
	public void write (String data) {
		
		ArrayList<String> ingreedinets = findAllInString(data, ingreedinetPattern);
		pProc.addData(2, Utils.joinStringFromArray(ingreedinets, ","));
		
		
		for (int i = 5; i <= 15; i++) {
			pProc.addData(i, "");
		}
		
		int subInCont = 5;
		for (String ing : ingreedinets) {
			String subIng = findInString(ing, subIngreedientP);
			subIng = subIng.replaceAll("<.+?>", "");
			pProc.addData(subInCont++, subIng);
		}
		
		pProc.processPatterns(data, writter);
	}
	
}


