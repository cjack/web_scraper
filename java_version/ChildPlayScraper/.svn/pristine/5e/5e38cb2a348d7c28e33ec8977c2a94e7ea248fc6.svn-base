package bots;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.sql.DriverManager;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.GetMethod;

import loaders.PropertiesLoader;
import master.Master;
import util.DBWorks;
import util.Sha1Hash;
import util.Utils;

public class Psychologytoday extends Master {
	
	private Pattern namePattern;
	private Pattern aboutPattern;
	private Pattern firmNamePattern;
	private Pattern addressPattern;
	private Pattern address2Pattern;
	private Pattern cityPattern;
	private Pattern statePattern;
	private Pattern postCodePattern;
	private Pattern phonePattern;
	private Pattern schoolPattern;
	private Pattern licencePattern;
	private Pattern yearGradPattern;
	private Pattern yearsInPattern;
	private Pattern avgCostPattern;
	private Pattern slidingScalePattern;
	private Pattern paymentsPattern;
	private Pattern insurancesPattern;
	private Pattern liPattern;
	private Pattern allModalityPattern;
	private Pattern allTreatementPattern;
	private Pattern allCategoriesPattern;
	private Pattern allAgesPattern;
	private Pattern allSexualPattern;
	private Pattern allMentalPattern;
	private Pattern allIssuesPattern;
	private Pattern allSpecialtiesPattern;
	private Pattern treatmentPattern;
	
	private BufferedWriter psyOut;
	private BufferedWriter doctorOut;
	private BufferedWriter [] writers = new BufferedWriter [11];
	private Pattern titlesPattern;
	private Pattern titlePattern;
	private Pattern allEthnicityPattern;
	private Pattern allReligiousPattern;
	

	public Psychologytoday()	{
		super("psychologytoday");
		PropertiesLoader.init("psychologytoday.txt");
		initWritters();

		baseURL = "http://therapists.psychologytoday.com";
		
		firefoxMask = true;
		recordCount = 1;
		
		java.util.logging.Logger.getLogger("org.apache.http.wire").setLevel(java.util.logging.Level.FINEST);
		java.util.logging.Logger.getLogger("org.apache.http.headers").setLevel(java.util.logging.Level.FINEST);
		System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.SimpleLog");
		System.setProperty("org.apache.commons.logging.simplelog.showdatetime", "true");
		System.setProperty("org.apache.commons.logging.simplelog.log.httpclient.wire", "ERROR");
		System.setProperty("org.apache.commons.logging.simplelog.log.org.apache.http", "ERROR");
		System.setProperty("org.apache.commons.logging.simplelog.log.org.apache.http.headers", "ERROR");
		
		incrementPartOneURL = "http://therapists.psychologytoday.com/rms/prof_results.php?sid=1403551371.6548_3962&state=MN&rec_next=";
				
		pageIncrement = 20;
		firstPageNumber = 1;
		
		paginationPattern = Pattern.compile(">Next</a>");
		detailsPagePattern = Pattern.compile("data-profile-url=\"(.+?)\">");
		
		namePattern = Pattern.compile("class='section profile-name'>.+?>(.+?)<");
		aboutPattern = Pattern.compile("<div class=\"statementPara\">(.+?)</div>");
		firmNamePattern = Pattern.compile("PostalAddress\">\\s+(.+?)<br>");
		addressPattern = Pattern.compile("streetAddress'>(.+?)<");
		address2Pattern = Pattern.compile("streetAddress'>.+?>\\s+<br>([^<].+?)<br>");
		cityPattern = Pattern.compile("addressLocality\">(.+?)<");
		statePattern = Pattern.compile("addressRegion\">(.+?)<");
		postCodePattern = Pattern.compile("postalcode'>(.+?)<");
		phonePattern = Pattern.compile("telephone\">\\s+(.+?)\\s+<");
		titlesPattern = Pattern.compile("<div class=\"profile-title\">(.+?)</div>", Pattern.DOTALL);
		titlePattern = Pattern.compile("<span data-ui-type=\"glossary\".+?>(.+?)</span>", Pattern.DOTALL);
		
		yearsInPattern = Pattern.compile("Years in Practice:</strong>\\s*(.+?)\\s*<");
		schoolPattern = Pattern.compile("School:</strong>\\s*(.+?)\\s*<");
		yearGradPattern = Pattern.compile("Year Graduated:</strong>\\s*(.+?)\\s*<");
		licencePattern = Pattern.compile("License No\\. and State:</strong>\\s*(.+?)\\s*<");
		
		avgCostPattern = Pattern.compile("session\\):</strong>\\s*(.+?)\\s*<");
		slidingScalePattern = Pattern.compile("Sliding Scale:</strong>\\s*(.+?)\\s*<");
		paymentsPattern = Pattern.compile("Accepted Payment Methods:</strong>\\s*(.+?)\\s*<");
		insurancesPattern = Pattern.compile("Accepted Insurance Plans:</h3>(.+?)</div></div>", Pattern.DOTALL);
		liPattern = Pattern.compile("<li.*?>(.+?)</li>");
		
		allSpecialtiesPattern = Pattern.compile("<h2>Specialties</h2><div class='spec-list clearfix'><div(.+?)</div></div>", Pattern.DOTALL);
		allIssuesPattern = Pattern.compile("Issues:</h3>(.+?)</div></div>", Pattern.DOTALL);
		allMentalPattern = Pattern.compile("Mental Health:</h3>(.+?)</div></div>", Pattern.DOTALL);
		allSexualPattern = Pattern.compile("Sexuality:</h3>(.+?)</div></div>", Pattern.DOTALL);
		allAgesPattern = Pattern.compile("Age:</h3>(.+?)</div></div>", Pattern.DOTALL);
		allCategoriesPattern = Pattern.compile("Categories:</h3>(.+?)</div></div>", Pattern.DOTALL);
		allTreatementPattern = Pattern.compile("Treatment Orientation:</h3>(.+?)</div></div>", Pattern.DOTALL);
		allModalityPattern = Pattern.compile("Modality:</h3>(.+?)</div></div>", Pattern.DOTALL);
		allEthnicityPattern = Pattern.compile("Ethnicity:</strong>(.+?)</div>");
		allReligiousPattern = Pattern.compile("Religious Orientation:</strong>(.+?)</div>");
		treatmentPattern = Pattern.compile("<li>(?:<span data-ui-type=\"glossary\" data-glossary-id=\"\\d+\"\\s+>|)(.+?)</(?:span|li)>", Pattern.DOTALL);
		
	}
	
	private void initWritters() {
		try {
			psyOut = new BufferedWriter(new FileWriter("Psychologytoday.csv"));
			psyOut.write("First Name,Last Name,Full Name,About,Company,Address,City,State,Zip Code,Telephone,Qualifications,Finances,Specialities,Client Focus,Treatment Approach");
			psyOut.newLine();
			
			doctorOut = new BufferedWriter(new FileWriter("Doctor.csv"));
			doctorOut.write("First Name,Last Name,Full Name,URL,About,Company,Address,City,State,Zip Code,Telephone,Years in Practice,School,Year Graduated,License No. and State,Avg Cost (per session),Sliding Scale,Accepted Payment Methods,Insurance Plans");
			doctorOut.newLine();
			
			String [] fileNames = {"Specialties", "Issues", "Mental Health", "Sexuality", "Age", "Categories", "Treatement Orientation", "Modality", "Titles", "Ethnicity", "Religy"};
			String [] headers = {"First Name,Last Name,Full Name,Specialty", "First Name,Last Name,Name,Issues", "First Name,Last Name,Name,Mental Health", "First Name,Last Name,Name,Sexuality", "First Name,Last Name,Name,Age", "First Name,Last Name,Name,Categories", "First Name,Last Name,Name,Treatment Orientation", "First Name,Last Name,Name,Modality", "First Name,Last Name,Name,Title", "First Name,Last Name,Name,Ethnicity", "First Name,Last Name,Name,Religious Orientation"};
			
			for (int i = 0; i < 11; i++) {
				writers[i] = new BufferedWriter(new FileWriter(fileNames[i] + ".csv"));
				writers[i].write(headers[i]);
				writers[i].newLine();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	private void writeLine(BufferedWriter out, String text) {
		try {
			out.write(text);
			out.newLine();
			out.flush();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public String fetchPageContent(String fromPage) {
		try {
			if (httpClient == null) {
				httpClient = new HttpClient();
			}
			
			
			
			GetMethod get = new GetMethod(fromPage);
			get.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0");
			httpClient.executeMethod(get);
			
			StringBuilder sb = new StringBuilder();
			String line;
			BufferedReader in = new BufferedReader(new InputStreamReader(get.getResponseBodyAsStream()));
			while ((line = in.readLine()) != null) {
				sb.append(line).append("\n");
			}
			
			in.close();
			get.releaseConnection();
			
			return sb.toString();			
		} catch (Exception e) {
			System.err.println("#### GREÅ KA ZA: " + fromPage + " ####");
			e.printStackTrace();			
			return null;
		}
	}
	
	private void writeSpecs(String doctor, String [] nameParts, ArrayList<String> specs, BufferedWriter out) {
		for (String spec : specs) {
			writeLine(out, formatValue(nameParts[0]) + formatValue(nameParts[1]) +formatValue(doctor) + formatValueWithoutAppend(spec));
		}
	}
	
	private void writeSpec(String doctor, String [] nameParts, String spec, BufferedWriter out) {
		writeLine(out, formatValue(nameParts[0]) + formatValue(nameParts[1]) +formatValue(doctor) + formatValueWithoutAppend(spec));		
	}

	public void write(String pageHtml, String hash) {
		
		String name = findInString(pageHtml, namePattern).replace("&amp;", "&");
		
		String nameParts [] = analyzeName(name);
		
		ArrayList<String> abouts = findAllInString(pageHtml, aboutPattern);
		String about = Utils.joinStringFromArray(abouts, " ");
		
		ArrayList<String> titles = findAllInString(findInString(pageHtml, titlesPattern), titlePattern);
		
		String firm = findInString(pageHtml, firmNamePattern).replace("&amp;", "&");
		String address = findInString(pageHtml, addressPattern);
		String address2 = findInString(pageHtml, address2Pattern);
		String city = findInString(pageHtml, cityPattern);
		String state = findInString(pageHtml, statePattern);
		String postcode = findInString(pageHtml, postCodePattern);
		String phone = findInString(pageHtml, phonePattern).replaceAll("[^0-9-\\s]", " ").trim().replace("-", "").replaceAll("\\s+", "-");
		if (phone.length() > 10)
			phone = phone.substring(0, 11);
		
		String yearsInPractice = findInString(pageHtml, yearsInPattern);
		String school = findInString(pageHtml, schoolPattern);
		String yearGraduated = findInString(pageHtml, yearGradPattern);
		String licence = findInString(pageHtml, licencePattern).replace("&nbsp;", " ");
		
		String avgCost = findInString(pageHtml, avgCostPattern);
		String slidingScale = findInString(pageHtml, slidingScalePattern);
		String payments = findInString(pageHtml, paymentsPattern);
		String insuranceHtml = findInString(pageHtml, insurancesPattern);
		ArrayList<String> insurances = findAllInString(insuranceHtml, liPattern);
		
		String insurance = Utils.joinStringFromArray(insurances, ", ");
		
		ArrayList<String> specialties = findAllInString(findInString(pageHtml, allSpecialtiesPattern), liPattern);
		
		ArrayList<String> issuesGroups = findAllInString(pageHtml, allIssuesPattern);
		ArrayList<String> issues = new ArrayList<String>();
		for (String issueGroup : issuesGroups) {
			issues.addAll(findAllInString(issueGroup, liPattern));
		}
		
		
		ArrayList<String> mentals = findAllInString(findInString(pageHtml, allMentalPattern), liPattern);
		ArrayList<String> sexualities = findAllInString(findInString(pageHtml, allSexualPattern), liPattern);
		ArrayList<String> ages = findAllInString(findInString(pageHtml, allAgesPattern), liPattern);
		ArrayList<String> categories = findAllInString(findInString(pageHtml, allCategoriesPattern), liPattern);
		ArrayList<String> treatments = findAllInString(findInString(pageHtml, allTreatementPattern), treatmentPattern);
		ArrayList<String> modalities = findAllInString(findInString(pageHtml, allModalityPattern), liPattern);
		String ethnicities = findInString(pageHtml, allEthnicityPattern);
		String religions = findInString(pageHtml, allReligiousPattern);
		
		StringBuilder psyLine = new StringBuilder();
		psyLine.append(formatValue(nameParts[0])).append(formatValue(nameParts[1])).append(formatValue(name)).append(formatValue(about)).append(formatValue(firm)).append(formatValue(address + " " + address2)).append(formatValue(city)).append(formatValue(state)).append(formatValue(postcode)).append(formatValue(phone));
		
		StringBuilder qualifications = new StringBuilder();
		qualifications.append(yearsInPractice.equals("")?"":"Years in Practice: " + yearsInPractice + " ");
		qualifications.append(school.equals("")?"":"School: " + school + " ");
		qualifications.append(yearGraduated.equals("")?"":"Year Graduated: " + yearGraduated + " ");
		qualifications.append(licence.equals("")?"":"License No. and State: " + licence);
		
		psyLine.append(formatValue(qualifications.toString()));
		
		StringBuilder finances = new StringBuilder();
		finances.append(avgCost.equals("")?"":"Avg Cost (per session): " + avgCost + " ");
		finances.append(slidingScale.equals("")?"":"Sliding Scale: " + slidingScale + " ");
		finances.append(payments.equals("")?"":"Accepted Payment Methods: " + payments + " ");
		finances.append(insurances.size()==0?"":"Insurance Plans: " + insurance + " ");
		
		psyLine.append(formatValue(finances.toString()));
		
		StringBuilder specs = new StringBuilder();
		specs.append(Utils.joinStringFromArray(specialties, " "));
		specs.append(issues.size()==0?"":"Issues: " + Utils.joinStringFromArray(issues, " ") + " ");
		specs.append(mentals.size()==0?"":"Mental Health: " + Utils.joinStringFromArray(mentals, " ") + " ");
		specs.append(sexualities.size()==0?"":"Sexuality: " + Utils.joinStringFromArray(sexualities, " ") + " ");
		
		psyLine.append(formatValue(specs.toString()));
		
		StringBuilder clentFocus = new StringBuilder();
		clentFocus.append(ages.size()==0?"":"Age: " + Utils.joinStringFromArray(ages, " ") + " ");
		clentFocus.append(categories.size()==0?"":"Categories: " + Utils.joinStringFromArray(categories, " ") + " ");
		
		psyLine.append(formatValue(clentFocus.toString()));
		
		StringBuilder treatementA = new StringBuilder();
		treatementA.append(treatments.size()==0?"":"Treatment Orientation: " + Utils.joinStringFromArray(treatments, " ") + " ");
		treatementA.append(modalities.size()==0?"":"Modality: " + Utils.joinStringFromArray(modalities, " ") + " ");
		
		psyLine.append(formatValueWithoutAppend(treatementA.toString()));
		
		// writes tp Psycologytoday.csv
		writeLine(psyOut, psyLine.toString());
		
		StringBuilder doctrSB = new StringBuilder();
		doctrSB.append(formatValue(nameParts[0])).append(formatValue(nameParts[1])).append(formatValue(name)).append(formatValue(detailsPageURL)).append(formatValue(about)).append(formatValue(firm)).append(formatValue(address + " " + address2)).append(formatValue(city)).append(formatValue(state)).append(formatValue(postcode)).append(formatValue(phone));
		doctrSB.append(formatValue(yearsInPractice)).append(formatValue(school)).append(formatValue(yearGraduated)).append(formatValue(licence)).append(formatValue(avgCost)).append(formatValue(slidingScale)).append(formatValue(payments)).append(formatValueWithoutAppend(insurance));
		
		writeLine(doctorOut, doctrSB.toString());
		
		writeSpecs(name, nameParts, specialties, writers[0]);
		writeSpecs(name, nameParts, issues, writers[1]);
		writeSpecs(name, nameParts, mentals, writers[2]);
		writeSpecs(name, nameParts, sexualities, writers[3]);
		writeSpecs(name, nameParts, ages, writers[4]);
		writeSpecs(name, nameParts, categories, writers[5]);
		writeSpecs(name, nameParts, treatments, writers[6]);
		writeSpecs(name, nameParts, modalities, writers[7]);
		writeSpecs(name, nameParts, titles, writers[8]);
		writeSpec(name, nameParts, ethnicities, writers[9]);
		writeSpec(name, nameParts, religions, writers[10]);
		
		StringBuilder insertStatement = new StringBuilder();
		
//		insertStatement.append("null, ").append(formatValue(name)).append(formatValue(about)).append(formatValue(firm)).append(formatValue(address + " " + address2)).append(formatValue(city));
//		insertStatement.append(formatValue(state)).append(formatValue(postcode)).append(formatValue(phone)).append(formatValue(yearsInPractice)).append(formatValue(school)).append(formatValue(yearGraduated));
//		insertStatement.append(formatValue(licence)).append(formatValue(avgCost)).append(formatValue(slidingScale)).append(formatValue(payments)).append(formatValue(insurance));
//		insertStatement.append(formatValue(Utils.joinStringFromArray(specialties, "~")));
//		insertStatement.append(formatValue(Utils.joinStringFromArray(issues, "~")));
//		insertStatement.append(formatValue(Utils.joinStringFromArray(mentals, "~")));
//		insertStatement.append(formatValue(Utils.joinStringFromArray(sexualities, "~")));
//		insertStatement.append(formatValue(Utils.joinStringFromArray(ages, "~")));
//		insertStatement.append(formatValue(Utils.joinStringFromArray(categories, "~")));
//		insertStatement.append(formatValue(Utils.joinStringFromArray(treatments, "~")));
//		insertStatement.append(formatValue(Utils.joinStringFromArray(modalities, "~")));
//		insertStatement.append(formatValue(detailsPageURL)).append(formatValueWithoutAppend(hash));
		
		//insertStatement.delete(insertStatement.length()-2, insert);
		
		
		
	//	DBWorks.addResultToBase(insertStatement.toString(), hash);
		

	}
	
	private String[] analyzeName(String name) {
		String nameParts [] = new String [2];
		
		name = name.replaceAll("(?:Dr\\.*|Mrs\\.*|Mr\\.*|Ms\\.*)\\s+", "");
		if (name.contains(",")) {
			name = name.substring(0, name.indexOf(","));
		}
		
		String parts [] = name.split("\\s+");
		
		if (parts.length < 2) {
			nameParts[0] = parts[0];
			nameParts[1] = "";
			return nameParts;
		}
		
		if (parts.length == 2) {
			return parts;
		} 
		
		if (parts.length > 1) {
			if (parts[1].length() == 1) {
				nameParts [0] = parts[0];
				nameParts [1] = name.substring(name.indexOf(parts[1]+" ") + 2);
				return nameParts;
			}
			if (parts[1].length() == 2 && parts[1].charAt(1) == '.') {
				nameParts [0] = parts[0];
				nameParts [1] = name.substring(name.indexOf(parts[1]+" ") + 3);
				return nameParts;
			}
			
		}
		
		nameParts[0] = parts[0];
		nameParts[1] = parts[1];
		
		return nameParts;
	}

	protected void typeOneProcessing() {
		
		paginationURL = null;
		detailsPageURL = null;
		String pageHtml = null;
		String detailsPageHtml = null;
		String detailsPageHash = null;
		
		int errorDelay = initialErrorDelay;

		Matcher paginationMatcher;
		Matcher urlMatcher;
		HashSet<String> pageURLs;

		mainLoop: for (int i = firstPageNumber; i <= lastPageNumber; i += pageIncrement) {
			paginationURL = incrementPartOneURL + formParam + formValue + pageNumberParam + i + incrementPartTwoURL;
			pageHtml = fetchPageContent(paginationURL);
			
		//	System.out.println(pageHtml);

			if (pageHtml != null) {
				System.out.println("-Pagination page: " + paginationURL);
				errorCount = 0;
				errorDelay = initialErrorDelay;
				urlMatcher = detailsPagePattern.matcher(pageHtml);
				pageURLs = new HashSet<String>();
				while (urlMatcher.find()) {
					detailsPageURL = urlMatcher.group(1);
					detailsPageURL = detailsPageURL.toLowerCase();
					if (!detailsPageURL.startsWith("http:")) {
						detailsPageURL = baseURL + detailsPageURL;
					}

					detailsPageURL = fixURL(detailsPageURL);
									
					System.out.print("\t"+ recordCount + ". " + detailsPageURL);
					
					detailsPageHash = Sha1Hash.SHA1(detailsPageURL);

					if (pageURLs.contains(detailsPageHash)) {
						continue;
					} else {
						pageURLs.add(detailsPageHash);
					}
					
					// test for duplicate url
//					if (DBWorks.containsUrl(detailsPageHash)) {
//					//	DBWorks.updateTime(detailsPageHash);
//						System.out.println(" - UPDATED");
//						recordCount++;
//						updatedRecordsCount++;
//						continue;
//					}

					detailsPageHtml = fetchPageContent(detailsPageURL);
				//	detailsPageHtml = fetchPageContent("http://therapists.psychologytoday.com/rms/prof_detail.php?profid=181489");
					
					System.out.println(" - NEW");
					if (detailsPageHtml != null) {
						write(detailsPageHtml, detailsPageHash);
						recordCount++;
						newRecordsCount++;
					}
					
					sleep(requestDelay);
				}
				paginationMatcher = paginationPattern.matcher(pageHtml);
				if (!paginationMatcher.find()) {
					if (paginationCheckTime != 0) {
					//	System.out.println("Last pagination check for " + webSiteID + " in progress ...");
						sleep(paginationCheckTime);

						pageHtml = fetchPageContent(paginationURL);
						if (pageHtml == null) {
							break;
						}

						paginationMatcher = paginationPattern.matcher(pageHtml);
						if (!paginationMatcher.find()) {
							break;
						} else {
							i -= pageIncrement;
						}
					} else {
						break;
					}
				}
			} else {
				errorCount++;
				if (errorCount == 5) {
					break;
				}
				i -= pageIncrement;
				
				sleep(errorDelay);
				errorDelay *= 5;				
			}
			if (stopped) {
				break;
			}
		}
	}	

	public static void main(String[] args) {
		
		new Psychologytoday().run();
	}

	@Override
	public void run() {
		typeOneProcessing();
		
	//	detailsPageURL = "http://therapists.psychologytoday.com/rms/prof_detail.php?profid=165053";
	//	String html = fetchPageContent("http://therapists.psychologytoday.com/rms/prof_detail.php?profid=165053");
	//	write(html, "aaa");
		
		processingEnd();
	}
	
		

}


