package bots;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Properties;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.imageio.ImageIO;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ScrollPaneConstants;

import org.apache.commons.httpclient.Header;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.URI;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;

import master.Master;
import util.*;

public class BetFairOddTrack extends Master {
	
	private HttpClient client;
	private JFrame frame;
	private JTextField urlText;
	private JTextField nameText;
	private JTextField valueText;
	private JComboBox<String> comboValues;
	private static JButton startScrapeBtn;
	private JTextArea textArea;
	private Clip clip;
	private JPanel gamesPane;
	private JScrollPane scroll;
	private ArrayList<JButton> deleteButtons= new ArrayList<JButton>();
	
	private ArrayList<Game> gamesBeingMonitored = new  ArrayList<Game>();
	private MailSender mailSender;
	private Properties props;

	public BetFairOddTrack() {		
		try {
			client = new HttpClient();
			loadProperties();
			
			mailSender = MailSender.getInstance(props);
					    
		    frame = new JFrame("Bet Fair Checker");		    
		    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		    frame.setLayout(null);
		    frame.setSize(600, 750);
		    frame.setLocationRelativeTo(null);
		    
		    JLabel labelUrl = new JLabel("Enter game URL");
		    labelUrl.setLocation(10, 10);
		    labelUrl.setSize(100, 25);
		    
		    urlText = new JTextField();
		    urlText.setLocation(110, 10);
		    urlText.setSize(460, 25);
		    
		    JLabel labelName = new JLabel("Enter team name");
		    labelName.setLocation(10, 40);
		    labelName.setSize(100, 25);
		    
		    nameText = new JTextField();
		    nameText.setLocation(110, 40);
		    nameText.setSize(150, 25);
		    
		    comboValues = new JComboBox<String>(new String [] {"<=", ">="});
		    comboValues.setSize(50, 25);
		    comboValues.setLocation(110, 70);
		    
		    JLabel labelValue = new JLabel("Enter value");
		    labelValue.setLocation(10, 70);
		    labelValue.setSize(100, 25);
		    
		    valueText = new JTextField();
		    valueText.setLocation(170, 70);
		    valueText.setSize(90, 25);
		    
		    JLabel monitoringLabel = new JLabel("Games that are monitored for changes");
		    monitoringLabel.setLocation(190, 170);
		    monitoringLabel.setSize(250, 25);
		    
		    textArea = new JTextArea();
			textArea.setSize(460, 400);
			textArea.setLocation(20, 110);
			
			gamesPane = new JPanel(null);
			gamesPane.setBorder(BorderFactory.createEtchedBorder());
		//	gamesPane.setSize(500, 1000);
			gamesPane.setPreferredSize(new Dimension(500,1000));
		//	gamesPane.setLocation(20, 110);
			
//			JPanel test = new JPanel();
//			test.setPreferredSize(new Dimension( 2000,2000));
//			JScrollPane scrollFrame = new JScrollPane(test);
//			test.setAutoscrolls(true);
//			scrollFrame.setPreferredSize(new Dimension( 800,300));
//			this.add(scrollFrame);
			
			scroll = new JScrollPane(gamesPane);
		//	gamesPane.setAutoscrolls(true);
		//	scroll.setPreferredSize(new Dimension(550,290));
			scroll.setSize(550, 490);
			scroll.setLocation(20, 200);
			
	        scroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
	        
	        startScrapeBtn = new JButton("Add to monitoring");
			startScrapeBtn.setSize(150, 30);
			startScrapeBtn.setLocation(10, 110);
			startScrapeBtn.addActionListener(new ActionListener() {
				    @Override
					public void actionPerformed(ActionEvent arg0) {						
						addGameToMonitoring();
					}					
				});
		    
		    frame.add(labelUrl);
		    frame.add(labelName);
		    frame.add(labelValue);
		    frame.add(comboValues);
		    frame.add(urlText);
		    frame.add(nameText);
		    frame.add(valueText);
		    frame.add(startScrapeBtn);
		    frame.add(monitoringLabel);
		    frame.add(scroll);
		    
		    frame.setVisible(true);
		    
		   
		//    clip.start();		    

			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
	}
	
	private void loadProperties() {
		try {
			props = new Properties();
			props.load(new FileReader("properties/emailprops.txt"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	private void addGameToMonitoring() {
		String url = urlText.getText();
		String team = nameText.getText();
		String type = (String)comboValues.getSelectedItem();
		String value = valueText.getText();
		
		if (url.trim().equals("") || team.trim().equals("") || value.trim().equals("")) {
			JOptionPane.showMessageDialog(null, "All fields must be filled");
			return;
		}
		
		Game game = new Game(url, team, type, Float.parseFloat(value));
		gamesBeingMonitored.add(game);
		addTextToArea(team + " " + type + " " + value);
		
		urlText.setText("");
		nameText.setText("");
		valueText.setText("");
		
		repaintGames();
	}	

	private void repaintGames() {
		gamesPane.removeAll();		
		gamesPane.setPreferredSize(new Dimension(500, gamesBeingMonitored.size() * 30 + 20));
		scroll.setViewportView(gamesPane);
	//	System.out.println(new Dimension(500, gamesBeingMonitored.size() * 30 + 20));
		for (int i = 0; i < gamesBeingMonitored.size(); i++) {
			Game g = gamesBeingMonitored.get(i);
			JLabel label = new JLabel(g.getName() + " " + g.getType() + " " + g.getValue() + "   last check = " + (g.getLastCheck() == -2 ? "ERR" : g.getLastCheck()));
			label.setSize(270, 25);
			label.setLocation(10, 10 + i * 30);
			label.setOpaque(true);
			
			JTextField text = new JTextField(g.getNote());
			text.setSize(100, 25);
			text.setLocation(300, 10 + i * 30);
			text.addKeyListener(new MyKeyListener(text, g));
			
			JButton delButton =  new JButton("delete");
			delButton.setSize(100, 20);
			delButton.setLocation(420, 12 + i * 30);
			
			if (g.getLastCheck() != -1) {
				
				if (g.getType().equals("<=")) {
					if (g.getLastCheck() <= g.getValue()) {
						if (!g.isAlerted())	{
							playSound();
							mailSender.sendMail("Odds have reached set value", g.getUrl() + "\n\n" + "Set value: " + g.getValue() + "\nValue on site: " + g.getLastCheck(), props);							
						}
						g.setAlerted(true);						
						label.setBackground(Color.RED);						
					}
				} else {
					if (g.getLastCheck() >= g.getValue()) {		
						if (!g.isAlerted())	{
							playSound();
							mailSender.sendMail("Odds have reached set value", g.getUrl() + "\n\n" + "Set value: " + g.getValue() + "\nValue on site: " + g.getLastCheck(), props);							
						}
						g.setAlerted(true);	
						label.setBackground(Color.RED);						
					}
				}
			}
			
			delButton.addActionListener(new MyActionListener(gamesBeingMonitored, i, gamesPane, label, delButton, text));			
			
			gamesPane.add(text);
			gamesPane.add(label);
			gamesPane.add(delButton);			
		}
		
		gamesPane.repaint();
	//	scroll.repaint();
	}

	public static void main(String[] args) {
		BetFairOddTrack c = new BetFairOddTrack();
		c.start();		
	}	

	@Override
	public void run() {		
		while (true) {
			ArrayList<Game> toRemove = new ArrayList<Game>();
			
			for (int i = 0; i < gamesBeingMonitored.size(); i++) {
				Game g = gamesBeingMonitored.get(i);
							
				String pageData = fetchPageContent(g.getUrl());
				if (pageData == null) {
					toRemove.add(g);
					continue;
				}
				
				Pattern oddPattern = Pattern.compile(g.getName()+"</span>.+?odds lay.+?class=\"price\">\\s+(.+?)\\s+<", Pattern.DOTALL);
				
				String odd = findInString(pageData, oddPattern);
				
				// something is not right
				if (odd.trim().equals("")) {
					g.setLastCheck(-2);	
				} else {
					try {
						g.setLastCheck(Float.parseFloat(odd));	
					} catch (Exception e) {
						toRemove.add(g);
					}
					
				}														
				
			}
			
			gamesBeingMonitored.removeAll(toRemove);
			repaintGames();
			sleep(5000);
		}
		
	}
	
	@Override
	public void write (String data) {
		
	}
	
	private void addTextToArea(String text) {
		textArea.append(text);
		textArea.append("\n");
		textArea.setCaretPosition(textArea.getDocument().getLength());
	}
	
	private void playSound() {
		try {
			String soundName = "trumpet.wav";    
			AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File(soundName).getAbsoluteFile());
			clip = AudioSystem.getClip();
			clip.open(audioInputStream);
			clip.start();
		} catch (Exception e) {
			// TODO: handle exception
		}
		 
	}
	
}


