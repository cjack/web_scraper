package bots;

import master.Master;
import util.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Array;
import java.text.SimpleDateFormat;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.GZIPInputStream;
import java.util.*;

import org.apache.commons.httpclient.Header;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.StringRequestEntity;

public class Tipico extends Master {

	private PostMethod post;
	private Pattern allInOnePattern;
	private ArrayList<String[]> all;
	private Pattern idPattern;
	private ArrayList<String> procenti;
	
	private SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm");
	
	Pattern oddPattern = Pattern.compile("result_pk=\"\\d+\">(.+?)<");

	public Tipico(Integer firstPage, Integer lastPage) {		
		this();
		firstPageNumber = firstPage;
		lastPageNumber = lastPage;
	}
	
	public Tipico() {	
		
		firstPageNumber = 1;
		pageIncrement = 1;
		
		pProc = new PatternProcessor();
		
		paginationPattern = Pattern.compile(">Page \\d+</a>");
		
		idPattern = Pattern.compile("div style='width: (.+?)%");
		allInOnePattern = Pattern.compile("eventRow.update\\(this,(\\d+).*?\\)\">.+?<meta.+?content=\"(.+?) - (.+?)\".+?startDate\" content=\"(\\d{4}-\\d{2}-\\d{2}).+?</div>(.+?)<div class=\"clear\">", Pattern.DOTALL);
	}	

	public static void main(String[] args) {
		if (args.length == 2) {
			new Tipico(Integer.parseInt(args[0]), Integer.parseInt(args[1])).start();
		} else {
			new Tipico().start();
		}
		
	}
	
	private String dateToScrape;

	@Override
	public void run() {
		
		Properties p = new Properties();		
		try {
			p.load(new FileReader("input_date.txt"));
			dateToScrape = p.getProperty("dateToScrape");			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		writter = new Writter("tipico" + dateToScrape + ".csv");
		writter.writeLine("Team1,Team2,1,X,2,1 %,X %,2 %");
		
		String firstPageHtml = fetchPageContent("https://www.tipico.com/en/online-sports-betting/football/g1101/");
	//	System.out.println(firstPageHtml);		
		
		// first page
		PostMethod post = new PostMethod("https://www.tipico.com/spring/complete/www_tipico_com_en_online_sports_betting_football_g1101_30");
		
		post.setRequestHeader("Accept", "text/html, */*; q=0.01");
		post.setRequestHeader("Cache-Control", "no-cache");
		post.setRequestHeader("Connection", "keep-alive");
		post.setRequestHeader("Pragma", "no-cache");
		post.setRequestHeader("Accept-Encoding", "gzip, deflate");
		post.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
		post.setRequestHeader("Host", "www.tipico.com");
		post.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0");
		post.setRequestHeader("Referer", "https://www.tipico.com/en/online-sports-betting/football/g1101/");
		post.setRequestHeader("X-Requested-With", "XMLHttpRequest");
		post.setRequestHeader("Accept-Language", "sr,sr-rs;q=0.8,sr-cs;q=0.6,en-us;q=0.4,en;q=0.2");
		
		try {
			StringRequestEntity sre = new StringRequestEntity("_=/sports/selection/addAll%253FgroupId%253D1101%2526type%253DGROUP", "XMLHttpRequest", "utf-8");
			post.setRequestHeader("Content-Length", Long.toString(sre.getContentLength()));
			post.setRequestEntity(sre);
		
		
			httpClient.executeMethod(post);		
			String data = getDataFromStream(post.getResponseBodyAsStream(), true);
		//	System.out.println(data);
		} catch (Exception e) {
			// TODO: handle exception
		}
				
		postMethodProcessing();
		
		System.out.println("FINISHED");
	}
	
	@Override
	public void write (String data) {
		
	}
	
	private int pageNum = 1;
	
	protected void postMethodProcessing() {		
		String pageHtml = null;
		Matcher paginationMatcher;

		mainLoop: for (int i = firstPageNumber; i <= lastPageNumber; i += pageIncrement) {
			
			PostMethod post = new PostMethod("https://www.tipico.com/spring/complete/www_tipico_com_en_online_sports_betting_football_g1101_30");		
			
			post.setRequestHeader("Accept", "text/html, */*; q=0.01");
			post.setRequestHeader("Cache-Control", "no-cache");
			post.setRequestHeader("Connection", "keep-alive");
			post.setRequestHeader("Pragma", "no-cache");
			post.setRequestHeader("Accept-Encoding", "gzip, deflate");
			post.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
			post.setRequestHeader("Host", "www.tipico.com");
			post.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0");
			post.setRequestHeader("Referer", "https://www.tipico.com/en/online-sports-betting/football/g1101/");
			post.setRequestHeader("X-Requested-With", "XMLHttpRequest");
			post.setRequestHeader("Accept-Language", "sr,sr-rs;q=0.8,sr-cs;q=0.6,en-us;q=0.4,en;q=0.2");
			
			System.out.println("Extracting from page " + pageNum++);
			
			try {
				StringRequestEntity sre = new StringRequestEntity("_=@selection/sports/selection/selection%253Fpage%253D" + i, "XMLHttpRequest", "utf-8");
				post.setRequestHeader("Content-Length", Long.toString(sre.getContentLength()));
				post.setRequestEntity(sre);
				
				httpClient.executeMethod(post);

				pageHtml = getDataFromStream(post.getResponseBodyAsStream(), true);
				Writter w = new Writter("lastPage.html");
				w.writeLine(pageHtml);
				w.close();
				
			//	System.out.println(pageHtml);
			} catch (Exception e) {
				e.printStackTrace();
			}			

			if (pageHtml != null) {
							
				all = findAllGroupsInString(pageHtml, allInOnePattern);
				
				for(String[] sve : all) {
					
					if (!sve[3].equals(dateToScrape)) {
						continue;
					}
								
					String link = "https://www.tipico.com/spring/update?_=/program/eventstakeratio%253FeventId%253D" + sve[0];

					String htmlId = getProcenat(link);					
					
					procenti = findAllInString(htmlId, idPattern);
					
					if (procenti.size() == 0) {
						continue;
					}
					
					pProc.addData(1, sve[1]);
					pProc.addData(2, sve[2]);	
					
					ArrayList<String> odds = findAllInString(sve[4], oddPattern);
					
					if (!odds.isEmpty()) {
						pProc.addData(3, odds.get(0));
						pProc.addData(4, odds.get(1));
						pProc.addData(5, odds.get(2));
					}
					
					if(!procenti.isEmpty()) {
						pProc.addData(6, procenti.get(0) + "%");
						pProc.addData(7, procenti.get(1) + "%");
						pProc.addData(8, procenti.get(2) + "%");
					}
					
					System.out.println("\t" + sve[1] + " - " + sve[2] + " : " + procenti.get(0) + " " + procenti.get(1) + " " + procenti.get(2));
					
				//	pProc.addData(6, sdf.format(new Date()));
					
					pProc.processPatterns(htmlId, writter);
					
					sleep(300);
					
				}		
								
			}
			
			paginationMatcher = paginationPattern.matcher(pageHtml);
			if (!paginationMatcher.find()) {					
				break;					
			}
										
		}
						
	}

	private String getProcenat(String link) {
		
		String data = "";
		
		post = new PostMethod(link);
		post.setRequestHeader("Accept", "text/html, */*; q=0.01");
		post.setRequestHeader("Cache-Control", "no-cache");
		post.setRequestHeader("Connection", "keep-alive");
		post.setRequestHeader("Pragma", "no-cache");
		post.setRequestHeader("Accept-Encoding", "gzip, deflate");
		post.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
		post.setRequestHeader("Host", "www.tipico.com");
		post.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0");
		post.setRequestHeader("Referer", "https://www.tipico.com/en/online-sports-betting/football/g1101/");
		post.setRequestHeader("X-Requested-With", "XMLHttpRequest");
		post.setRequestHeader("Accept-Language", "sr,sr-rs;q=0.8,sr-cs;q=0.6,en-us;q=0.4,en;q=0.2");
		post.setRequestHeader("Content-Length", "0");
		
		try {			
			httpClient.executeMethod(post);
			data = getDataFromStream(post.getResponseBodyAsStream(), true);
			//System.out.println(data);
			return data;
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		return data;
	} 
}


	



