package bots;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.GZIPInputStream;

import org.apache.commons.httpclient.Header;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;

import util.PatternProcessor;
import util.Sha1Hash;
import util.Writter;
import master.Master;

public class StarPerfumes extends Master{

	private Pattern genderPattern;
	private HttpClient client;
	private Pattern imagePattern;

	public StarPerfumes() {
		
		firefoxMask = true;
		recordCount = 1;
		requestDelay = 1000;
		
		pProc = new PatternProcessor();
		writter = new Writter("starperfumes.csv");
		writter.writeLine("Qty,Title,Price,Product Code,Image URL,Manufacturer,Category");
		
		baseURL = "http://www.starperfumes.com";
		
		firstPageNumber = 1;
		pageIncrement = 1;
		
		incrementPartOneURL = "http://starperfumes.com/Browse/?stock=1&sort=AZ&show=100&page=";
		
		paginationPattern = Pattern.compile("Next &raquo;");
		detailsPagePattern = Pattern.compile("<div class=\"details\">.+?<a href=\"(.+?)\"", Pattern.DOTALL);
				
		pProc.addPattern(1, Pattern.compile("<th>Stock</th>.+?title=\"In Stock\".+?>(\\d+).+?in stock", Pattern.DOTALL));
		pProc.addPattern(2, Pattern.compile("<h1 style=\"padding-bottom: 4px;\">(.+?)<", Pattern.DOTALL));	
		pProc.addPattern(3, Pattern.compile("<td class=\"price\">&pound;(.+?)\\s+<", Pattern.DOTALL));
		pProc.addPattern(4, Pattern.compile("<th>Code</th>.+?<td>(.+?)</td>", Pattern.DOTALL));
		pProc.addPattern(6, Pattern.compile("<th>House</th>.+?<td>(.+?)</td>", Pattern.DOTALL));
		
		imagePattern = Pattern.compile("<div class=\"image\">.+?</a>.+?<img src=\"(.+?)\"", Pattern.DOTALL);
		genderPattern = Pattern.compile("<th>Gender</th>.+?<img.+?/>(.+?)<", Pattern.DOTALL);
	
	}
	
	public void run() {
		
		httpClient = new HttpClient();
		
		PostMethod post = new PostMethod("http://starperfumes.com/Login");
		
		post.setFollowRedirects(false);
		post.setParameter("AccountNumber", "aud005");
		post.setParameter("Email", "princejames11@gmail.com");
		post.setParameter("Password", "F3rrar11");
		post.setParameter("redirectTo", "/Browse/?stock=1&sort=AZ&show=100&page=1");
		post.setParameter("s.x", "32");
		post.setParameter("s.y", "5");
				
		post.setRequestHeader("Host", "www.starperfumes.com");
		post.setRequestHeader("Referer", "http://starperfumes.com/");
		
		try {
			httpClient.executeMethod(post);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		Header [] headers = post.getResponseHeaders();
		for (Header h : headers) {
			if (h.getValue().contains("PHPSESSID")) {
				cookie = h.getValue();
			}			
		}
			
		typeOneProcessing();
	}
	
	public void write(String data) {
		
		//System.out.println(data);
		
		String image = findInString(data, imagePattern);
		
		if(!image.equals("")) {
		
			String imageLink = "http://starperfumes.com" + image;
			
			pProc.addData(5, imageLink);
		}
		
		String gender = findInString(data, genderPattern);
		
		gender = gender.trim();
		
		if(gender.equals("Unisex")) {
			
			pProc.addData(7, "Other items");
		} else if(gender.equals("For Her")) {
			pProc.addData(7, "Laides Fragrances");
		} else {
			pProc.addData(7, "Mens Fragrances");
		}
		
		pProc.processPatterns(data, writter);
	}
	
	public static void main(String[] args) {

		new StarPerfumes().run();
	}
	
	private String cookie = "";
	
	public String fetchPageContent(String fromPage) {
		try {
			if (httpClient == null) {
				httpClient = new HttpClient();
			}
			
			GetMethod get = new GetMethod(fromPage);
			
			get.setRequestHeader("Accept-Encoding", "gzip, deflate");
			get.setRequestHeader("Host", "starperfumes.com");
			get.setRequestHeader("Referer", "http://starperfumes.com/Browse/");
			get.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:36.0) Gecko/20100101 Firefox/36.0");
			get.setRequestHeader("Cookie", cookie);
			
			httpClient.executeMethod(get);
			
			/*System.out.println("Request headers:");
			Header [] headers = get.getRequestHeaders();
			for (Header h : headers) {
				System.out.println(h.getName() + ": " + h.getValue());
			}*/
			
			/*System.out.println("Response headers:");
			headers = get.getResponseHeaders();
			for (Header h : headers) {
				System.out.println(h.getName() + ": " + h.getValue());
			}*/
			
			StringBuilder sb = new StringBuilder();
			String line;
			BufferedReader in = new BufferedReader(new InputStreamReader(new GZIPInputStream(get.getResponseBodyAsStream())));
			while ((line = in.readLine()) != null) {
				sb.append(line).append("\n");
			}
			
			in.close();
			get.releaseConnection();
			
			//System.out.println(sb.toString());
			return sb.toString();
			
		} catch (Exception e) {
			System.err.println("#### GREÅ KA ZA: " + fromPage + " ####");
			e.printStackTrace();			
			return null;
		}
	}
	
	protected void typeOneProcessing() {
		paginationURL = null;
		detailsPageURL = null;
		String pageHtml = null;
		String detailsPageHtml = null;
		String carURLHash = null;
		long carID;
		int errorDelay = initialErrorDelay;

		Matcher paginationMatcher;
		Matcher urlMatcher;
		HashSet<String> carURLs;

		mainLoop: for (int i = firstPageNumber; i <= lastPageNumber; i += pageIncrement) {
			paginationURL = incrementPartOneURL + formParam + formValue + pageNumberParam + i + incrementPartTwoURL;
			pageHtml = fetchPageContent(paginationURL);
			
			//System.out.println(pageHtml);

			if (pageHtml != null) {
				System.out.println("-Pagination page: " + paginationURL);
				errorCount = 0;
				errorDelay = initialErrorDelay;
				urlMatcher = detailsPagePattern.matcher(pageHtml);
				carURLs = new HashSet<String>();
				while (urlMatcher.find()) {
					detailsPageURL = urlMatcher.group(1);
					if (!detailsPageURL.startsWith("http:")) {
						detailsPageURL = baseURL + detailsPageURL;
						//System.out.println(detailsPageURL);
					}

					detailsPageURL = fixURL(detailsPageURL);
					System.out.println("\t"+ detailsPageURL);
					carURLHash = Sha1Hash.SHA1(detailsPageURL);

					String code = detailsPageURL.substring(detailsPageURL.lastIndexOf("/")+1);
					
					if (carURLs.contains(code)) {
						continue;
					} else {
						carURLs.add(code);
					}
					
					// test for duplicate url
//					if (1 == 1 + 0) {
//					//	DBWorksOnline.updateTime(carID, countryDescription.getCode());
//						recordCount++;
//						updatedRecordsCount++;
//						continue;
//					}
					
					

					detailsPageHtml = fetchPageContent(detailsPageURL);
					//System.out.println("Ovde");
					//da se obrise
					//System.out.println(detailsPageHtml);

					if (detailsPageHtml != null) {
						//System.out.println("Usao");						
						write(detailsPageHtml);
						recordCount++;
						newRecordsCount++;
					}
					
					sleep(requestDelay);
				}
				paginationMatcher = paginationPattern.matcher(pageHtml);
				if (!paginationMatcher.find()) {
					if (paginationCheckTime != 0) {
					//	System.out.println("Last pagination check for " + webSiteID + " in progress ...");
						sleep(paginationCheckTime);

						pageHtml = fetchPageContent(paginationURL);
						if (pageHtml == null) {
							break;
						}

						paginationMatcher = paginationPattern.matcher(pageHtml);
						if (!paginationMatcher.find()) {
							break;
						} else {
							i -= pageIncrement;
						}
					} else {
						break;
					}
				}
			} else {
				errorCount++;
				if (errorCount == 5) {
					break;
				}
				i -= pageIncrement;
				
				sleep(errorDelay);
				errorDelay *= 5;				
			}
			if (stopped) {
				break;
			}
		}
	}
	
}
