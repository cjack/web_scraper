package bots;

import master.Master;
import util.*;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLEncoder;
import java.util.regex.Pattern;
import java.util.*;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.GetMethod;

public class CampingInfo extends Master {


	public CampingInfo() {		
		writter = new Writter("camping_info.csv");
		pProc = new PatternProcessor();
		
		pProc.addPattern(1, Pattern.compile("<h1 itemprop=\"name\">\\s+(.+?)\\s+<"));
		pProc.addPattern(2, Pattern.compile("<span itemprop=\"streetAddress\">(.*?)<"));
		pProc.addPattern(3, Pattern.compile("<span itemprop=\"addressLocality\">\\d+\\s+(.*?)<"));
		pProc.addPattern(4, Pattern.compile("<span itemprop=\"addressLocality\">(.*?)<"));
		pProc.addPattern(5, Pattern.compile("<span itemprop=\"addressCountry\">(.*?)<"));
		
		pProc.addData(6, "");
		
		pProc.addData(10, ""); // emails
		pProc.addPattern(11, Pattern.compile("id=\"ctl00_ctl00_cphMain_main_ucLoc__hfCtrLat\" value=\"(.+?)\""));
		pProc.addPattern(12, Pattern.compile("id=\"ctl00_ctl00_cphMain_main_ucLoc__hfCtrLng\" value=\"(.+?)\""));
	}	

	public static void main(String[] args) {
		new CampingInfo().start();		
	}
	
	private Pattern urlPattern = Pattern.compile("<loc>(.+?-\\d+/location)</loc>");	
	private Pattern websitePattern = Pattern.compile("<a id=\"hl_Homepage\".+?href=\"(.+?)\"");	

	@Override
	public void run() {
		// fetchDetailsLinks();
		
		int counter = 1;
		ArrayList<String> links = Files.loadListFromFile("camping_info_urls.txt");
		for (String link : links) {
			
			System.out.println(counter++ + ". " + link);
			pProc.addData(8, link);
			String htmlLocation = fetchPageContent(link);
			sleep(500);
			
			String mainHtml = fetchPageContent(link.substring(0, link.lastIndexOf("/")));
			sleep(500);
			String webSite = findInString(mainHtml, websitePattern);
			pProc.addData(9, webSite);
			
			write(htmlLocation);
		
		}

	}
	
	private void fetchDetailsLinks() {
		HashSet<String> allUrlsSet = new HashSet<String>();
		
		for (int i = 1; i <= 39; i++) {
			try {
				URL url = new URL("http://en.camping.info/_generated/sitemaps/en/sitemap.en."+i+".xml.gz");
				String data = getDataFromStream(url.openStream(), true);
				
				ArrayList<String> allUrls = findAllInString(data, urlPattern);
				allUrlsSet.addAll(allUrls);
				System.out.println("Size : " + allUrlsSet.size());
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		Writter w = new Writter("camping_info_urls.txt");
		
		for (String s : allUrlsSet) {
			w.writeLine(s);
		}
		
		w.close();
	}
	
	private Pattern imagePattern = Pattern.compile("(http://i\\d+\\.images-camping\\.info/CampsiteImages/\\d+_Small\\.jpg)");
	
	@Override
	public void write (String data) {
		
		ArrayList<String> images = findAllInString(data, imagePattern);
		ArrayList<String> bigImages = new ArrayList<String>();
		
		for (String img : images) {
			img = img.replace("Small", "Large");
			bigImages.add(img);
		}
		
		pProc.addData(7, Utils.joinStringFromArray(bigImages, ","));
		pProc.processPatterns(data, writter);
	}
	
	public String fetchPageContent(String fromPage) {
		try {
			if (httpClient == null) {
				httpClient = new HttpClient();
				httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(60000); 
				httpClient.getHttpConnectionManager().getParams().setSoTimeout(60000);
			}
			
			String toEncode = fromPage.substring(fromPage.indexOf("http://en.camping.info/") + 23);
			String encoded = URLEncoder.encode(toEncode);
			encoded = encoded.replaceAll("%2F", "/");
			GetMethod get = new GetMethod("http://en.camping.info/" + encoded);
			httpClient.executeMethod(get);
			
			StringBuilder sb = new StringBuilder();
			String line;
			BufferedReader in = new BufferedReader(new InputStreamReader(get.getResponseBodyAsStream(), "utf-8"));
			while ((line = in.readLine()) != null) {
				sb.append(line).append("\n");
			}
			
			in.close();
			get.releaseConnection();
			
			return sb.toString();			
		} catch (Exception e) {
			System.err.println("#### GREÅ KA ZA: " + fromPage + " ####");
			e.printStackTrace();			
			return null;
		}
	}
	
}


