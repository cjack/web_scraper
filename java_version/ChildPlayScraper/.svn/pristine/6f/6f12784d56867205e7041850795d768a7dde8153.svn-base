package bots;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.regex.Pattern;

import proxy.PropertiesLoader;

import master.Master;
import util.*;

public class Mobilnisvet extends Master {

	private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
	private Pattern wrapPattern;
	private Pattern titlePattern;
	private Pattern pricePattern;
	private Pattern sellerPhonePattern;
	private Pattern descPattern;
	private Pattern idAndDatePattern;
	
	private Connection con;
	private HashSet<Integer> phoneIDs = new HashSet<Integer>();

	private PreparedStatement insertPhone;

	public Mobilnisvet() {		
	
		wrapPattern = Pattern.compile("valign=mid.+?>\\s+(.+?)</table>", Pattern.DOTALL);
		titlePattern = Pattern.compile("<strong>(.+?)<br />(.+?)</strong>");
		pricePattern = Pattern.compile("<div style=\"font-size:18px;\">(\\d+)\\s+â‚¬");
		descPattern = Pattern.compile("<font size=\"1\">(.+?)</font>");
		sellerPhonePattern = Pattern.compile("<font size=\"2\" color=#AAAAAA>(.+?)<");
		idAndDatePattern = Pattern.compile("<font color=#DDDDDD size=1>#(\\d+)\\s+\\|\\s+(.+?)\\s+</td>");
		
	}	

	public static void main(String[] args) {
		new Mobilnisvet().start();				
	}

	@Override
	public void run() {
		loadPhonesFromDb();
		checkForChanges();
	}
	
	private void loadPhonesFromDb() {
		try {
			PropertiesLoader.init();
			Class.forName("com.mysql.jdbc.Driver");
			con = DriverManager.getConnection("jdbc:mysql://"+ PropertiesLoader.readBaseLocation +"/mobilni?characterEncoding=UTF-8", 
					PropertiesLoader.inUsername, PropertiesLoader.inPassword);
			
			insertPhone = con.prepareStatement("insert into telefoni values (?, ?, ?, ?, ?, ?, ?)");
			
			Statement st = con.createStatement();
			ResultSet rs = st.executeQuery("select * from telefoni");
			
			while (rs.next()) {
				phoneIDs.add(rs.getInt("id"));
			}
			
			rs.close();
			st.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	private void checkForChanges() {
		String data = fetchPageContent("http://mobilnisvet.com/mobilni-malioglasi");
		ArrayList<String> oglasi = findAllInString(data, wrapPattern);
		
		for (String oglas : oglasi) {
			System.out.println(oglas);
			String makeModel [] = findGroupsInString(oglas, titlePattern, 2);
			String price = findInString(oglas, pricePattern);
			if (price.trim().equals("")) continue;
			String description = findInString(oglas, descPattern);
			String sellerPhone = findInString(oglas, sellerPhonePattern).replaceAll("[^0-9]", "");
			String [] idAndDate = findGroupsInString(oglas, idAndDatePattern, 2);
			
			int id = -1;
			try {
				id = Integer.parseInt(idAndDate[0]);
			} catch (Exception e2) {
				System.out.println("Error parsing id!!!");
				continue;
			}
			
			if (!phoneIDs.contains(id)) {
				phoneIDs.add(id);
				
				try {
					insertPhone.setInt(1, id);
					insertPhone.setString(2, makeModel[0]);
					insertPhone.setString(3, makeModel[1]);
					insertPhone.setString(4, description);
					insertPhone.setInt(5, Integer.parseInt(price));
					insertPhone.setString(6, sellerPhone);
					insertPhone.setTimestamp(7, new Timestamp(sdf.parse(idAndDate[1]).getTime()));
					
					insertPhone.executeUpdate();
				} catch (Exception e) {
					e.printStackTrace();
				}
				
				
			}
		}
		
	}

	@Override
	public void write (String data) {
		
	}
	
}


