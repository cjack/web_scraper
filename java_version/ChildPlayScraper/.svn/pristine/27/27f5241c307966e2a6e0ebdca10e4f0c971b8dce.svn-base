package bots;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.regex.Pattern;

import util.Patterns;

public class RelationsExtractor {

	private HashSet<String> relationsSet = new HashSet<String>();
	private HashMap<String, String> relationsMap = new HashMap<String, String>();
	private HashMap<String, String> survivedByMap = new HashMap<String, String>();
	
	private ArrayList<String> untilDeathSet = new ArrayList<String>();
	
	public RelationsExtractor() {
		relationsMap.put("husband of", "husband of");
		relationsMap.put("father of", "father of");
		relationsMap.put("brother of", "brother of");
		relationsMap.put("wife of", "wife of");
		relationsMap.put("mother of", "mother of");
		
		relationsMap.put("husband of", "husband of");
		
		// generation below
		survivedByMap.put("son", "survived by son");
		survivedByMap.put("sons", "survived by son");
		survivedByMap.put("daughter", "survived by daughter");
		survivedByMap.put("daughters", "survived by daughter");
		survivedByMap.put("child", "survived by child");
		survivedByMap.put("children", "survived by child");				
//		survivedByMap.put("daughter-in-law", "survived by daughter-in-law");
//		survivedByMap.put("son-in-law", "survived by son-in-law");
		
		// two generations below
//		survivedByMap.put("grandson", "survived by grandson");
//		survivedByMap.put("grandsons", "survived by grandson");
//		survivedByMap.put("grandchild", "survived by grandchild");
//		survivedByMap.put("grandchildren", "survived by grandchild");
//		survivedByMap.put("granddaughter", "survived by granddaughter");
//		survivedByMap.put("granddaughters", "survived by granddaughter");
		
		// same generation
		survivedByMap.put("wife", "survived by his wife");
		survivedByMap.put("spouse", "survived by his wife");
		survivedByMap.put("husband", "survived by her husband");
		survivedByMap.put("sister", "survived by sister");
		survivedByMap.put("sisters", "survived by sister");
		survivedByMap.put("brother", "survived by brother");
		survivedByMap.put("brothers", "survived by brother");		
		
		// generation above
		survivedByMap.put("mother", "survived by mother");
		survivedByMap.put("father", "survived by father");
		survivedByMap.put("parents", "survived by parent");		
		
		untilDeathSet.add("predeceased by");
		untilDeathSet.add("preceded in death by");
		untilDeathSet.add("proceeded in death by");
		untilDeathSet.add("preceding in death by");
	//	untilDeathSet.add("predeceased by");
	}
	
	private Pattern wordPat = Pattern.compile("([\\w,;\\&]+)");
//	Pattern headPattern = Pattern.compile("regex", Pattern.DOTALL);
	
	public ArrayList<String> extractRelations(String text) {
		text = text.replace(",", " , ");
		text = text.replace(";", " ; ");
		text = text.replaceAll("\\(.+?\\)", " ");
		text = text.replaceAll("(?:Dr|Mrs|Mr|Ms)\\.", " ");
		
		
		text = text.replaceAll("<head[\\s\\S]*?</head>", "");
	//	text = text.replace("\\s+", " ");
		
		ArrayList<String> relations = new ArrayList<String>();
		
		if (text.toLowerCase().contains("survived by")) { // survived by handling
			int index = text.toLowerCase().indexOf("survived by");
			String survivedByText = text.substring(index);
			
			if (survivedByText.contains("<")) {
				survivedByText = survivedByText.substring(0, survivedByText.indexOf("<"));
			}
			
			int indexOfEnd = survivedByText.length() - 1;
			boolean foundDeathPhrase = false;
			for (String predeceasedPhrase : untilDeathSet) {
				if (survivedByText.toLowerCase().contains(predeceasedPhrase)) {
					indexOfEnd = survivedByText.toLowerCase().indexOf(predeceasedPhrase) - 1;
					foundDeathPhrase = true;
					break;
				}
			}
			if (!foundDeathPhrase && survivedByText.contains(".")) {
				indexOfEnd = survivedByText.indexOf(".");
				if (indexOfEnd > 0) {
					while (Character.isUpperCase(survivedByText.charAt(indexOfEnd-1))) {
						indexOfEnd = survivedByText.indexOf(".", indexOfEnd+1);
						if (indexOfEnd < 0) break;
					}
				}
			}
			
			survivedByText = survivedByText.substring(0, indexOfEnd < 0 ? survivedByText.length() - 1 : indexOfEnd);
			survivedByText = survivedByText.replaceAll("\\s+", " ");
			
			for (String key : survivedByMap.keySet()) {
				int sIndex = -1;
				if (survivedByText.contains(key)) {
					sIndex = survivedByText.indexOf(key);
					if (sIndex > 0 && Character.isAlphabetic(survivedByText.charAt(sIndex-1))) {
						continue;
					}
					sIndex = sIndex + key.length();
					if (sIndex < survivedByText.length() && (Character.isAlphabetic(survivedByText.charAt(sIndex)) || survivedByText.charAt(sIndex) == '.')) {
						continue;
					}
				} else {
					continue;
				}				
				
				ArrayList<String> words = Patterns.findAllInString(survivedByText.substring(sIndex), wordPat);
				int UpTo = words.size() > 5 ? 5 : words.size();
				
				StringBuilder name = new StringBuilder();
				boolean firstNamePartFound = false;
				for (int wordNr = 0; wordNr < UpTo; wordNr ++) {
					if (wordNr > 1 && !firstNamePartFound) {
						break;
					}
					
					if (words.get(wordNr).charAt(0) == '(' && words.get(wordNr).charAt(words.get(wordNr).length() - 1) == ')') {
						continue;
					}
					
					if (Character.isUpperCase(words.get(wordNr).charAt(0))) {
						String word = words.get(wordNr);
						
						if (word.length() > 1 && (word.endsWith(",") || word.endsWith(";"))) {
							word = word.substring(0, word.length() - 1);
							name.append(word).append(" ");
							break;
						}
						
						name.append(word).append(" ");
						firstNamePartFound = true;
					} else {
						if (firstNamePartFound) {
							break;
						}
					}
				}
				
				if (name.length() > 1) {
					name.deleteCharAt(name.length() - 1);
					relations.add(survivedByMap.get(key) + "~" + name.toString());
				}				
				
			}
			
		}
		
//		for (String key : relationsMap.keySet()) {
//			int sIndex = -1;
//			if (text.contains(key)) {
//				sIndex = text.indexOf(key);
//				if (sIndex > 0 && Character.isAlphabetic(text.charAt(sIndex-1))) {
//					continue;
//				}
//				sIndex = sIndex + key.length();
//				if (sIndex < text.length() && Character.isAlphabetic(text.charAt(sIndex))) {
//					continue;
//				}
//			} else {
//				continue;
//			}				
//			
//			ArrayList<String> words = Patterns.findAllInString(text.substring(sIndex), wordPat);
//			int UpTo = words.size() > 5 ? 5 : words.size();
//			
//			StringBuilder name = new StringBuilder();
//			boolean firstNamePartFound = false;
//			for (int wordNr = 0; wordNr < UpTo; wordNr ++) {
//				if (wordNr > 1 && !firstNamePartFound) {
//					break;
//				}
//				if (Character.isUpperCase(words.get(wordNr).charAt(0))) {
//					String word = words.get(wordNr);
//					
//					if (word.length() > 1 && (word.endsWith(",") || word.endsWith(";"))) {
//						word = word.substring(0, word.length() - 1);
//						name.append(word).append(" ");
//						break;
//					}
//					
//					name.append(word).append(" ");
//					firstNamePartFound = true;
//				} else {
//					if (firstNamePartFound) {
//						break;
//					}
//				}
//			}
//			
//			if (name.length() > 1) {
//				name.deleteCharAt(name.length() - 1);
//				relations.add(relationsMap.get(key) + "~" + name.toString());
//			}
//			
//			
//		}
		
		return relations;
	}
	
	
}
