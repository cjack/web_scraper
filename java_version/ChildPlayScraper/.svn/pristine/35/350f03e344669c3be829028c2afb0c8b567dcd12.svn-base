package bots.australia_jarris;

import master.Master;
import util.*;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.regex.Pattern;
import java.util.*;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.GetMethod;

public class Courts_TAS extends Master {
	
	private SimpleDateFormat sdfFrom = new SimpleDateFormat("dd MMMM yyyy");
	private SimpleDateFormat sdfTo = new SimpleDateFormat("yyyy/MM/dd");
	private Pattern datePattern = Pattern.compile("<H2><DIV align=\"left\">Court List for.+?,\\s*(.+?)<");

	public Courts_TAS(Integer firstPage, Integer lastPage) {		
		this();
		firstPageNumber = firstPage;
		lastPageNumber = lastPage;
	}
	
	private HashMap<String, String> replacementMap = new HashMap<String, String>();
	
	public Courts_TAS() {		
		
		writter = new Writter("courts_TAS.csv");
		writter.writeLine("State,Date,Type,Magistrates Court,Location,Room,Name,FileNo./Matter,Offence");
		
		pProc = new PatternProcessor();
		
		pProc.addData(1, "TAS");		
		pProc.addData(4, "Magistrates Court");
		
		ArrayList<String> lines = Files.loadListFromFile("tas_replacements.txt");
		for (String line : lines) {
			String parts [] = line.split(",");
			replacementMap.put(parts[0].trim(), parts[1].trim());
		}
	}	

	public static void main(String[] args) {
		if (args.length == 2) {
			new Courts_TAS(Integer.parseInt(args[0]), Integer.parseInt(args[1])).start();
		} else {
			new Courts_TAS().start();
		}
		
	}
	
	Pattern caseWrapPattern = Pattern.compile("(<TD>[^<]+,.+?colspan=\"14\")", Pattern.DOTALL);
	Pattern firstLinePattern = Pattern.compile("<TD>([^<]+,.+?)</TD><TD>(\\d+/\\d+).+?>([\\w\\&\\s]+)<");
	Pattern tdPattern = Pattern.compile("<TD.*?>(.*?)</TD>");
	
	Pattern offencePater = Pattern.compile("<TD colspan=\"11\">(.+?)</TD>");
	 

	@Override
	public void run() {
		processPage("http://www.magistratescourt.tas.gov.au/lists/burnie_criminal_and_general");
		processPage("http://www.magistratescourt.tas.gov.au/lists/devonport_criminal_and_general");
		processPage("http://www.magistratescourt.tas.gov.au/lists/hobart_criminal_and_general");
		processPage("http://www.magistratescourt.tas.gov.au/lists/launceston_criminal_and_general");
	}
	
	private void processPage(String fromPage) {
		System.out.print("Processing " + fromPage + " ... ");
		
		String pageHtml = fetchPageContent(fromPage);
	//	System.out.println(pageHtml);
		
		String dateString = findInString(pageHtml, datePattern);
		
		try {
			pProc.addData(2, "'" + sdfTo.format(sdfFrom.parse(dateString)));
		} catch (Exception e) {
			pProc.addData(2, "'" + sdfTo.format(new Date()));
		}
		
		
		ArrayList<String> caseWraps = findAllInString(pageHtml, caseWrapPattern);
		
		for (String caseWrap : caseWraps) {
			String lines [] = caseWrap.split("\n");
			
			// Name, Matter, List Type
			String [] parts = findGroupsInString(lines[0], firstLinePattern, 3);
			pProc.addData(7, parts[0]);
			pProc.addData(8, parts[1]);
			pProc.addData(3, replacementMap.get(parts[2]));
			
			String loc = findInString(lines[1], tdPattern);
			pProc.addData(5, replacementMap.get(loc));
			
			String room = findInString(lines[2], tdPattern);
			pProc.addData(6, "Court " + room);
			
		//	String time = findInString(lines[3], tdPattern);
		//	pProc.addData(6, time);
			
			ArrayList<String> offences = findAllInString(caseWrap, offencePater);
			String offenceString = Utils.joinStringFromArray(offences, ";");
			pProc.addData(9, offenceString);
			
			pProc.processPatterns(fromPage, writter);
			
 		}
		
		System.out.println("done!");
		
	}
	
	public String fetchPageContent(String fromPage) {
		try {
			
			httpClient = new HttpClient();
			httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(60000); 
			httpClient.getHttpConnectionManager().getParams().setSoTimeout(60000);
			
			
			GetMethod get = new GetMethod(fromPage);
			get.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:39.0) Gecko/20100101 Firefox/39.0");
			get.setRequestHeader("Cache-Control", "max-age=0");
			httpClient.executeMethod(get);
			
			StringBuilder sb = new StringBuilder();
			String line;
			BufferedReader in = new BufferedReader(new InputStreamReader(get.getResponseBodyAsStream(), "utf-8"));
			while ((line = in.readLine()) != null) {
				sb.append(line).append("\n");
			}
			
			in.close();
			get.releaseConnection();
			
			return sb.toString();			
		} catch (Exception e) {
			System.err.println("#### GREÅ KA ZA: " + fromPage + " ####");
			e.printStackTrace();			
			return null;
		}
	}

	@Override
	public void write (String data) {
		
	}
	
}


