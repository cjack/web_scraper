package bots;

import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang.StringEscapeUtils;

import proxy.ProxyFetcher;

import master.Master;
import util.*;

public class PaginasAmarillas extends Master {
	
	private ArrayList<String> categories = new ArrayList<String>();
	private String catLetter = "";
	private Pattern catPattern;
	private Pattern adWrapPattern;
	private Pattern localityPattern;
	private Pattern regionPattern;
	
	private ProxyFetcher proxyFetcher;
	private String fromCategory = null;
	private Pattern websitePattern;
	private ArrayList<String> categoriesList;
	private HashSet<String> carURLs;
	private String carURLHash;
	private String detailsPageHtml;
	private Writter writterLastHtml;
	private Pattern actividadPattern2;
	private Pattern actividadPattern1;
	private String actividad1;
	private String actividad;
	private Pattern websitePattern1;
	private Pattern websitePattern2;
	private String website;
	private ArrayList<String> detUrls;
	private HashSet<String> detUrlsSet;
	private Pattern cityWraperPattern;
	private Pattern cityPattern;
	private String cityWraper;
	private ArrayList<String> cities;
	private Pattern cityPattern2;

	public PaginasAmarillas() {		
		
		/*Properties properties = new Properties();
		try {
			properties.load(new FileReader("props.txt"));
			catLetter = properties.getProperty("letter");
			fromCategory = properties.getProperty("fromCat");
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		
		detUrls = new ArrayList<String>();
		detUrlsSet = new HashSet<String>();
		
		writterLastHtml = new Writter("paginasLastHtml.txt");
		
		proxyFetcher = new ProxyFetcher();
		requestDelay = 2000;
		
		categoriesList = Files.loadListFromFile("inputCategoryPaginas.txt");
		
		pProc = new PatternProcessor();
		
		firstPageNumber = 1;
		pageIncrement = 1;
		//catPattern = Pattern.compile("<li><a onclick.+?href=\"(.+?)\"><span>(.+?)</");
		//paginationPattern = Pattern.compile("<a class=\"a-siguiente\"");
		paginationPattern = Pattern.compile("li class=\"last\"");
		detailsPagePattern = Pattern.compile("a id=\"businessId.+?href=\"(.+?)\"", Pattern.DOTALL);
		actividadPattern1 = Pattern.compile("<p>Actividad Principal:(.+?)<"); //2
		actividadPattern2 = Pattern.compile("<p>Actividad Principal:.+?<a.+?>(.+?)<", Pattern.DOTALL); //2
		websitePattern1 = Pattern.compile("<a.+?class=\"\\s*PaolClick omn_fWeb_0\".+?target.+?title.+?>(.+?)</a>", Pattern.DOTALL); //8
		websitePattern2 = Pattern.compile("<a.+?class=\"url\\s*PaolClick omn_fWeb_0\">\\s*(.+?)<", Pattern.DOTALL); //8
		cityWraperPattern = Pattern.compile("<div id=\"filtro-provincia\"(.+?)</ul>", Pattern.DOTALL);
		cityPattern = Pattern.compile("<li>\\s*<a href=\".+?/all-ma/(.+?)/.+?\"", Pattern.DOTALL);
		cityPattern2 = Pattern.compile("/all-ma/(.+?)/");
		
		//adWrapPattern = Pattern.compile("m-results-business-header(.+?)m-results-business-expanded", Pattern.DOTALL);
		pProc.addPattern(4, Pattern.compile("itemprop=\"name\">(.+?)<"));
		pProc.addPattern(5, Pattern.compile("<span itemprop=\"streetAddress\">(.+?)<"));
		pProc.addPattern(6, Pattern.compile("<span itemprop=\"postalCode\">(.+?)<"));
		pProc.addPattern(7, Pattern.compile("<span itemprop=\"addressLocality\">(.+?)<"));
		pProc.addPattern(8, Pattern.compile("<span itemprop=\"addressLocality\">.+?<.+?,.+?>(.+?)<"));
		pProc.addPattern(10, Pattern.compile("<span itemprop=\"telephone\">(.+?)<"));
		pProc.addPattern(11, Pattern.compile("email='\\+'(.*?)'"));
		//localityPattern = Pattern.compile("<span itemprop=\"addressLocality\".*?>(.+?)<");
		//regionPattern = Pattern.compile("<span class=\"region\">(.+?)<"); //8
		
		//pProc.addPattern(6, Pattern.compile("<a itemprop=\"url\".+?href=\"(.+?)\"", Pattern.DOTALL));
		
		pProc.addReplacement(9, "%40", "@");
		pProc.addReplacement(9, "\\s+", " ");
		
		for(int i = 1; i <= 10; i++) {
			pProc.addReplacement(i, "&Aacute;", "Á");
			pProc.addReplacement(i, "&aacute;", "á");
			pProc.addReplacement(i, "&Eacute;", "É");
			pProc.addReplacement(i, "&eacute;", "é");
			pProc.addReplacement(i, "&Iacute;", "Í");
			pProc.addReplacement(i, "&iacute;", "í");
			pProc.addReplacement(i, "&Oacute;", "Ó");
			pProc.addReplacement(i, "&oacute;", "ó");
			pProc.addReplacement(i, "&Ntilde;", "Ñ");
			pProc.addReplacement(i, "&ntilde;", "ñ");
			pProc.addReplacement(i, "&Uacute;", "Ú");
			pProc.addReplacement(i, "&uacute;", "ú");
			pProc.addReplacement(i, "&Uuml;", "Ü");
			pProc.addReplacement(i, "&uuml;", "ü");
			pProc.addReplacement(i, "&iexcl;", "¡");
			pProc.addReplacement(i, "&ordf;", "ª");
			pProc.addReplacement(i, "&iquest;", "¿");
			pProc.addReplacement(i, "&ordm;", "º");
		}
		

	}		

	public static void main(String[] args) {		
		new PaginasAmarillas().start();
	}

	@Override
	public void run() {
		
		for(String category : categoriesList) {
			
			File f = new File(category + ".csv");
			if(!f.exists()) {
				writter = new Writter(category + ".csv", true);
				//writter = new Writter("test.csv", true);
				writter.writeLine("URL,Category query,Actividad Principal,Name,Street,Post Code,City,Area,Website,Phone,EMail");
			}
			else {
				writter = new Writter(category + ".csv", true);
				//writter = new Writter("test.csv", true);
				detUrls = Files.loadListFromFile(category + ".csv", 1);
			}
			
			for(String detUrl : detUrls) {
				detUrl = detUrl.replaceAll("\"", "");
				detUrlsSet.add(detUrl);
			}
			
			pProc.addData(2, category);
			
			//String firstHtml = getHtml("http://www.paginasamarillas.es/" + category + "/all-ma/all-pr/all-is/all-ci/all-ba/all-pu/all-nc/1");
			
			//cityWraper = findInString(firstHtml, cityWraperPattern);
			//cities = findAllInString(cityWraper, cityPattern);
			
			//for(String city : cities) {
				//city = city.replaceAll("%c3%b1", "ñ");
				incrementPartOneURL = "http://www.paginasamarillas.es/" + category +"/all-ma/all-pr/all-is/all-ci/all-ba/all-pu/all-nc/";
				//incrementPartOneURL = "http://www.paginasamarillas.es/search/pavimentos/all-ma/all-pr/all-is/all-ci/all-ba/all-pu/all-nc/";
				incrementPartTwoURL = "?od=comentarios";
						
				firstPageNumber = 1;
				pageIncrement = 1;
				typeOneProcessing();
			//}			
		}
		
		/*incrementPartOneURL = "http://www.paginasamarillas.es/az_"+catLetter+"_";
		typeOneProcessingSmall();
		
		paginationPattern = Pattern.compile("li class=\"last\"");
		
		int catNum = categories.size();
		int curCat = 1;
		
		boolean categoryFound = false;
		if (fromCategory == null || fromCategory.trim().equals("")) {
			categoryFound = true;
		}
		
		for (String category : categories) {
			String parts[] = category.split("~");
			
			if (!categoryFound) {
				if (parts[1].equals(fromCategory)) {
					categoryFound = true;
				} else {
					curCat++;
					continue;
				}
			}
			
			
			
			System.out.println(curCat++ + "/" + catNum + " - Category: " + parts[1]);
			
			incrementPartOneURL = parts[0];
			incrementPartTwoURL = "?od=comentarios";
			firstPageNumber = 1;
			pProc.addData(1, parts[1]);
			typeOneProcessing();
			
		}
		*/
	//	MailSender.getInstance().sendMail("Gotovo Slovo " + catLetter, "alalalal");
		
		
	}
	
	protected void typeOneProcessingSmall() {
		paginationURL = null;
		detailsPageURL = null;
		String pageHtml = null;

		Matcher paginationMatcher;
		Matcher urlMatcher;

		mainLoop: for (int i = firstPageNumber; i <= lastPageNumber; i += pageIncrement) {
			paginationURL = incrementPartOneURL + formParam + formValue + pageNumberParam + i + incrementPartTwoURL;
			pageHtml = getHtml(paginationURL);
			
		//	System.out.println(pageHtml);

			if (pageHtml != null) {
				System.out.println("-Pagination page: " + paginationURL);
				errorCount = 0;
	
				urlMatcher = catPattern.matcher(pageHtml);
				while (urlMatcher.find()) {
					detailsPageURL = urlMatcher.group(1);
					if (!detailsPageURL.startsWith("http:")) {
						detailsPageURL = baseURL + detailsPageURL;
					}

					detailsPageURL = fixURL(detailsPageURL);
					
					categories.add(detailsPageURL.substring(0, detailsPageURL.length()-1) + "~" + urlMatcher.group(2));
										
					
				}
				
				sleep(requestDelay);
				
				paginationMatcher = paginationPattern.matcher(pageHtml);
				if (!paginationMatcher.find()) {
					if (paginationCheckTime != 0) {
					//	System.out.println("Last pagination check for " + webSiteID + " in progress ...");
						sleep(paginationCheckTime);

						pageHtml = getHtml(paginationURL);
						if (pageHtml == null) {
							break;
						}

						paginationMatcher = paginationPattern.matcher(pageHtml);
						if (!paginationMatcher.find()) {
							break;
						} else {
							i -= pageIncrement;
						}
					} else {
						break;
					}
				}
			}
		}
	}
	
	protected void typeOneProcessing() {
		paginationURL = null;
		detailsPageURL = null;
		String pageHtml = null;

		Matcher paginationMatcher;
		Matcher urlMatcher;

		mainLoop: for (int i = firstPageNumber; i <= lastPageNumber; i += pageIncrement) {
			paginationURL = incrementPartOneURL + formParam + formValue + pageNumberParam + i + incrementPartTwoURL;
			
			String check = "PÁGINAS AMARILLAS</title>";
			
			if (i > 90) { // use proxies
				String city = findInString(paginationURL, cityPattern2);
				if(city.equals("a-coruña")) {
					break;
				}
				pageHtml = proxyFetcher.getHtmlWithProxy(paginationURL, check);
			} else {
				pageHtml = getHtml(paginationURL);
			}
			
			
			//System.out.println(pageHtml);

			if (pageHtml != null) {
				System.out.println("-Pagination page: " + paginationURL);
				errorCount = 0;
				urlMatcher = detailsPagePattern.matcher(pageHtml);
				carURLs = new HashSet<String>();
				while (urlMatcher.find()) {
					detailsPageURL = urlMatcher.group(1);
					if (!detailsPageURL.startsWith("http:")) {
						detailsPageURL = baseURL + detailsPageURL;
					}

					detailsPageURL = fixURL(detailsPageURL);
		
					System.out.println("\t"+ detailsPageURL);
					carURLHash = Sha1Hash.SHA1(detailsPageURL);
					
					if(detUrlsSet.contains(detailsPageURL)) {
						continue;						
					}
					else {
						pProc.addData(1, detailsPageURL);
					}

					if (carURLs.contains(carURLHash)) {
						continue;
					} else {
						carURLs.add(carURLHash);
					}
					
					int j = 1;
					
					while(j <= 5) {
						
						detailsPageHtml = getHtml(detailsPageURL);
						//detailsPageHtml = getHtml("http://www.paginasamarillas.es/f/olazti-olazagutia/muebles-y-carpinteria-aguirre_148153463_000000001.html");
						
						if (detailsPageHtml != null) {
							write(detailsPageHtml);
							recordCount++;
							newRecordsCount++;
							sleep(1000);
							break;
						} 
						else {
							j++;
							sleep(1000);
						}
					}

					/*detailsPageHtml = getHtml(detailsPageURL);
					//System.out.println(detailsPageHtml);

					
					if (detailsPageHtml != null) {
						write(detailsPageHtml);
						recordCount++;
						newRecordsCount++;
					} 
					
					sleep(1000);*/
				}
		
				/*urlMatcher = adWrapPattern.matcher(pageHtml);
				while (urlMatcher.find()) {
					
					String data = urlMatcher.group(1);
					
					write(data);
					
				}
				
				if (i <= 90)
					sleep(requestDelay);*/
				
				paginationMatcher = paginationPattern.matcher(pageHtml);
				if (!paginationMatcher.find()) {
					writterLastHtml.write(pageHtml);
					break;
					/*if (paginationCheckTime != 0) {
					//	System.out.println("Last pagination check for " + webSiteID + " in progress ...");
						sleep(paginationCheckTime);

						pageHtml = getHtml(paginationURL);
						if (pageHtml == null) {
							break;
						}

						paginationMatcher = paginationPattern.matcher(pageHtml);
						if (!paginationMatcher.find()) {
							break;
						} else {
							i -= pageIncrement;
						}
					} else {
						break;
					}*/
				}
			}
		}
	}
	
	
	
	@Override
	public void write (String data) {
		
		//ArrayList<String> addresses = Patterns.findAllInString(data, localityPattern);
		//String region = Patterns.findInString(data, regionPattern);
		
		//String addRegion = Utils.joinStringFromArray(addresses, " ") + " " + region;
		//pProc.addData(5, addRegion);
		actividad = findInString(data, actividadPattern1);
		
		if(!actividad.equals("")) {
			pProc.addData(3, actividad);
		}
		else {
			actividad = findInString(data, actividadPattern2);
			if(!actividad.equals("")) {
				pProc.addData(3, actividad);
			}
			else {
				pProc.addData(3, "");
			}
		}
		
		website = findInString(data, websitePattern1);
		
		if(!website.equals("")) {
			pProc.addData(9, website);
		}
		else {
			website = findInString(data, websitePattern2);
			if(!website.equals("")) {
				pProc.addData(9, website);
			}
			else {
				pProc.addData(9, "");
			}
		}
		
		pProc.processPatterns(data, writter);
	}
	
}


