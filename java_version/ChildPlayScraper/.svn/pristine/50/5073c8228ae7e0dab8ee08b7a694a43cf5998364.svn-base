package bots.australia_events;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.URI;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.regex.Pattern;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.GetMethod;

import util.Files;
import util.Patterns;

public class ImageDownloader {
	
	private HashMap<String, SiteConfig> sitePatterns;
	private HttpClient httpClient;

	public ImageDownloader () {
				
		loadPatterns();
	}
	
	private void loadPatterns() {
		sitePatterns = new HashMap<String, SiteConfig>();
		ArrayList<String> rows = Files.loadListFromFile("site_patterns.txt");
		for (String row : rows) {
			String parts [] = row.split("~");
			sitePatterns.put(parts[0], new SiteConfig(parts[1], parts[2]));
		}
	}

	public void start() {
		ArrayList<String> rows = Files.loadListFromFile("urllist.txt");
		
		for (String row : rows) {
			String rowParts [] = row.split("\t");
			
			String id = rowParts[0];
			String url = rowParts[1];
			
			System.out.println("Doing " + url);
			
			String imgLink = getImageFromLink(url);
			
			if (imgLink != null) {
				System.out.println("\tFound image " + imgLink);
				saveImage(imgLink, id);
			} else {
				System.out.println("\tNo image found");
			}
		}
	}
	
	public static void main(String[] args) {
		ImageDownloader d = new ImageDownloader();
		d.start();
	}
	
	public void saveImage(String imageUrl, String name) {
		try {
			URL url = new URL(imageUrl);
			java.net.URLConnection c = url.openConnection();
			c.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/36.0");
				
			String fileName = imageUrl.substring(imageUrl.lastIndexOf('/')+1);
			String extension = fileName.substring(fileName.indexOf(".") + 1);
			
			File f = new File("imgs/" + name + "." + extension);
			if (f.exists()) return;
			
			InputStream is = c.getInputStream();
			OutputStream os = new FileOutputStream("imgs/" + name + "." + extension);

			byte[] b = new byte[2048];
			int length;

			while ((length = is.read(b)) != -1) {
				os.write(b, 0, length);
			}

			is.close();
			os.close();
			System.out.println("\tImage saved as " + name + "." + extension);
		} catch (Exception e) {
		//	e.printStackTrace();
			System.out.println("\tImage was not downloaded");
		}
		
	}
	
	public String getImageFromLink(String link) {
		try {
			URI uri = new URI(link);
			String host = uri.getHost();
			
			Pattern p = sitePatterns.get(host).getImgPattern();
			if (p != null) {
				String pageHtml = fetchPageContent(link);
				String imgUrl = Patterns.findInString(pageHtml, p);
				return sitePatterns.get(host).getBaseUrl() + imgUrl;
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	public String fetchPageContent(String fromPage) {
		try {
			if (httpClient == null) {
				httpClient = new HttpClient();
			}
			
			GetMethod get = new GetMethod(fromPage);
			httpClient.executeMethod(get);
			
			StringBuilder sb = new StringBuilder();
			String line;
			BufferedReader in = new BufferedReader(new InputStreamReader(get.getResponseBodyAsStream(), "utf-8"));
			while ((line = in.readLine()) != null) {
				sb.append(line).append("\n");
			}
			
			in.close();
			get.releaseConnection();
			
			return sb.toString();			
		} catch (Exception e) {
			System.err.println("#### GREÅ KA ZA: " + fromPage + " ####");
			e.printStackTrace();			
			return null;
		}
	}
}
