package bots;

import master.Master;
import util.*;

import java.util.regex.Pattern;
import java.util.*;

public class GreatSchoolsXML extends Master {

	public GreatSchoolsXML(Integer firstPage, Integer lastPage) {		
		this();
		firstPageNumber = firstPage;
		lastPageNumber = lastPage;
	}
	
	private Pattern addressPattern = Pattern.compile("<div class=\"col-sm-4 col-md-4 col-lg-4 contact-content\">(.+?)<br/>\\s+<br/>", Pattern.DOTALL);
	private Pattern addressLinePattern = Pattern.compile("<span class=\"notranslate\">(.+?)<");	
	
	private int counter = 0;
	private Writter gradeLevelWriter;
	private PatternProcessor gradeProcessor;
	
	public GreatSchoolsXML() {		
	//	writter = new Writter("schools_output.csv");
	//	writter.writeLine("ID,School Type,School Name,Office Number,Fax Number,Address Street,Address (City State ZIP),Email,Password	EIN Number,Total Students,Full time teachers,Male Students (%),Minority Students (%),Students economically disadvantaged (%),English Proficiency (%),Math Profficiency (%),Enter college students (%),Website,fb Link,National Rank,State Rank");
		pProc = new PatternProcessor();
		
	//	gradeLevelWriter = new Writter("Grade Level.csv");
		gradeProcessor = new PatternProcessor();
		
		pProc.addPattern(2, Pattern.compile("<div class=\"fl phm hvs\">(.+?)<"));
		pProc.addPattern(3, Pattern.compile("<h1 class=\"mtn pts\">(.+?)</h1>"));
		pProc.addPattern(4, Pattern.compile("<span class=\"iconx16 i-16-phone vam\"></span><span class=\"mlm vam\">(.+?)<"));
		pProc.addPattern(5, Pattern.compile("<span class=\"iconx16 i-16-fax vam\"></span><span class=\"mlm vam\">(.+?)<"));
		
		pProc.addData(8, "");
		pProc.addData(9, "");
		
		pProc.addPattern(10, Pattern.compile("Students enrolled: <strong>(.+?)<"));
		pProc.addData(11, "");
		
		pProc.addPattern(18, Pattern.compile("<span class=\"iconx16 i-16-computer-screen vam\"></span><a class=\"mlm vam contact-content\" href='(.+?)'"));
		
		pProc.addData(19, "");
		pProc.addData(20, "");
		pProc.addData(21, "");
		
	}	

	public static void main(String[] args) {
		if (args.length == 2) {
			new GreatSchoolsXML(Integer.parseInt(args[0]), Integer.parseInt(args[1])).start();
		} else {
			new GreatSchoolsXML().start();
		}
		
	}
	
	private Pattern districtPattern = Pattern.compile("<td><a href=\"(.+?)\"");
	private Pattern schoolUrlPattern = Pattern.compile("<a class=\"open-sans_sb mbs font-size-medium rs-schoolName\" href=\"(.+?)\"");

	private Pattern xmlWrap = Pattern.compile("<url>(.+?)</url>", Pattern.DOTALL);
	private Pattern xmlSchoolPattern = Pattern.compile("<loc>(.+?)</loc>");
	
	@Override
	public void run() {
	//	String states [] = Files.loadFileData("zomato.csv").split(",");
		String states [] = Files.loadFileData("sitemap.txt").split(",");
		
		for (String state : states) {
			
			state = state.trim();
			
			writter = new Writter("schools_output_"+state+".csv");
			writter.writeLine("ID,School Type,School Name,Office Number,Fax Number,Address Street,Address (City State ZIP),Email,Password	EIN Number,Total Students,Full time teachers,Male Students (%),Minority Students (%),Students economically disadvantaged (%),English Proficiency (%),Math Profficiency (%),Enter college students (%),Website,fb Link,National Rank,State Rank");
		
			gradeLevelWriter = new Writter("Grade Level_"+state+".csv");
			
			String sitemapHtml = fetchPageContent("http://www.greatschools.org/sitemap/sitemap-"+state.toLowerCase()+".xml");
			
		//	Writter w = new Writter("counts.csv");
			
			ArrayList<String> xmlWraps = findAllInString(sitemapHtml, xmlWrap);
			
	//	    for (String state : states) {
	//			
	//			state = state.trim().toLowerCase();
	//			String html = fetchPageContent("http://www.greatschools.org/sitemap/sitemap-"+state+".xml");
	//						
	//			ArrayList<String> xmlWraps = findAllInString(html, xmlWrap);
	//			
	//			int count = 0;
	//			for (String xmlWrap : xmlWraps) {
	//				
	//				if (xmlWrap.contains("<priority>1.0</priority>")) {
	//					count++;
	//				}
	//			}
	//			
	//			System.out.println(state.toUpperCase() + "," + count);
	//			w.writeLine(state.toUpperCase() + "," + count);
	//		}
			
	//		w.close();
			
			boolean found = false;
			
			int count = 0;
			for (String xmlWrap : xmlWraps) {
				
				if (xmlWrap.contains("<priority>0.8</priority>")) {
					String cityUrl = findInString(xmlWrap, xmlSchoolPattern) + "schools/";
					
					if (cityUrl.contains("mountainair")) {
						found = true;
					}
					
					if (!found) continue;
					
					System.out.println("City: " + cityUrl);
					String districtSchoolsHtml = fetchPageContent(cityUrl);
					
					if (districtSchoolsHtml == null) continue;
					
					ArrayList<String> schoolUrls = findAllInString(districtSchoolsHtml, schoolUrlPattern);
					
					for (String schoolUrl : schoolUrls) {
						if (!schoolUrl.startsWith("http")) {
							schoolUrl = "http://www.greatschools.org" + schoolUrl;
						}
						schoolUrl = schoolUrl.replaceAll("\\&#39;", "");
						schoolUrl = schoolUrl.replaceAll("\\&amp;", "");
						System.out.println("\t" + (counter+1) + ". School: " + schoolUrl);
						sleep(500);
						String schoolHtml = fetchPageContent(schoolUrl);
						if (schoolHtml == null) continue;
					//	String schoolHtml = fetchPageContent("http://www.greatschools.org/massachusetts/newton/1216-Ward-Elementary-School/");
										
						write(schoolHtml, schoolUrl);
					}
				}
			}
			
			gradeLevelWriter.close();
			writter.close();
		}

//		for (String cityLetter : cityLetters) {
//		
//			String cityLetterHtml = fetchPageContent("http://www.greatschools.org/schools/cities/Massachusetts/MA/" + cityLetter + "/");
//			
//			ArrayList<String> schoolDistricts = findAllInString(cityLetterHtml, districtPattern);
//					
//			for (String dist : schoolDistricts) {
//				
//				String cityName = findInString(dist, Pattern.compile("city/(.+?)/MA")).toLowerCase();
//				
//				System.out.println("District: " + "http://www.greatschools.org/massachusetts/" + cityName + "/schools");
//				String districtSchoolsHtml = fetchPageContent("http://www.greatschools.org/massachusetts/" + cityName + "/schools");
//				
//				ArrayList<String> schoolUrls = findAllInString(districtSchoolsHtml, schoolUrlPattern);
//				
//				for (String schoolUrl : schoolUrls) {
//					if (!schoolUrl.startsWith("http")) {
//						schoolUrl = "http://www.greatschools.org" + schoolUrl;
//					}
//					schoolUrl = schoolUrl.replaceAll("\\&#39;", "");
//					schoolUrl = schoolUrl.replaceAll("\\&amp;", "");
//					System.out.println("\t" + (counter+1) + ". School: " + schoolUrl);
//					sleep(500);
//					String schoolHtml = fetchPageContent(schoolUrl);
//				//	String schoolHtml = fetchPageContent("http://www.greatschools.org/massachusetts/newton/1216-Ward-Elementary-School/");
//									
//					write(schoolHtml, schoolUrl);
//				}
//			}
//		}
		
	}
	
	private Pattern malePattern = Pattern.compile(">Male</td>\\s+<td data-title=\"This school\">(.+?)<");
	private Pattern whitePattern = Pattern.compile("\\[\"White\",(\\d+),");
	private Pattern ecoDisPattern = Pattern.compile("<td data-title=\"Label\">Students participating in a free or reduced-price lunch program</td>\\s+<td data-title=\"This school\">(.+?)<");
	
	private Pattern chartWrapPattern = Pattern.compile("<script>GS.visualchart.drawBarChartTestScores\\(\\[\\[(.+?)</script>");
	private Pattern chartValPattern = Pattern.compile("\"\\d+\",(.+?),.+?js_bar_chart_div_\\d+_(.+?)'");
	
	private Pattern collegeReadinesPattern = Pattern.compile(">Students attending any higher learning institution</td>\\s+<td data-title=\"This school\">(.+?)<");
	
	private Pattern gradePattern = Pattern.compile("<div class=\"fl prm hvs\">(.+?)<");
	
	public void write (String data, String schoolUrl) {
		counter++;
		pProc.addData(1, Integer.toString(counter));
		
		String addressWrap = findInString(data, addressPattern);
		ArrayList<String> addressLines = findAllInString(addressWrap, addressLinePattern);
		
		pProc.addData(6, addressLines.size()>0?addressLines.get(0):"");
		pProc.addData(7, addressLines.size()>1?addressLines.get(1):"");
		
		sleep(500);
		String schoolDetailsPage = fetchPageContent(schoolUrl + "/details/");
		
		String malePercent = findInString(schoolDetailsPage, malePattern);
				
		pProc.addData(12, malePercent);
		
		String whitePeople = findInString(schoolDetailsPage, whitePattern);
		if (!whitePeople.equals("")) {
			int whiteCount = Integer.parseInt(whitePeople);
			int otherCount = 100 - whiteCount;
			pProc.addData(13, Integer.toString(otherCount) + "%");
		} else {
			pProc.addData(13, "");
		}
		
		String ecoDis = findInString(schoolDetailsPage, ecoDisPattern);
		
		pProc.addData(14, ecoDis);
		
		sleep(500);
		String schoolQualityPage = fetchPageContent(schoolUrl + "/quality/");
		
		ArrayList<String> chartWraps = findAllInString(schoolQualityPage, chartWrapPattern);
		
		pProc.addData(15, "");
		pProc.addData(16, "");
		for (String chartWrap : chartWraps) {
			String parts [] = findGroupsInString(chartWrap, chartValPattern, 2);
			
			if (parts != null) {
				if (parts[1].equals("All_All_EnglishLanguageArts")) {
					pProc.addData(15, parts[0].trim() + "%");
				}
				if (parts[1].equals("All_All_Math")) {
					pProc.addData(16, parts[0].trim() + "%");
				}
			}
		}
		
		String collegeReadiness = findInString(schoolQualityPage, collegeReadinesPattern);
		pProc.addData(17, collegeReadiness);
		
		pProc.processPatterns(data, writter);
		
		gradeProcessor.addData(1, Integer.toString(counter));
		gradeProcessor.addData(2, findInString(data, gradePattern));
		
		gradeProcessor.processPatterns(data, gradeLevelWriter);
		
	}
	
}


